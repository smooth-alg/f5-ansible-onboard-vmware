#TMSH-VERSION: 12.1.0

cli admin-partitions {
    update-partition Common
}
sys application template /Common/f5.analytics {
    actions {
        definition {
            html-help {
            }
            implementation {
                #_
###########################################################################
##       ffff55555                                                       ##
##     fffff f555555                                                     ##
##   fff      f5    5              Analytics iApp Version 3.6.9          ##
##  ff    fffff     555                                                  ##
##  ff    fffff f555555                                                  ##
## fff       f     55555             Written By: F5 Networks             ##
## f        ff     55555                                                 ##
## fff   ffff      ..:55             Date Created: 11/01/2015            ##
## fff    fff5555 ..::,5             Last Updated: 09/21/2016            ##
##  ff    fff 555555,;;                                                  ##
##   f    fff  55555,;    For Questions, Feature Requests, and Comments  ##
##   f    fff    55,55       Feel Free to Reach Out to Me @ KB@F5.com    ##
##    ffffffff5555555                  Thanks, Ken Bocchino              ##
##       fffffff55                                                       ##
###########################################################################
###########################################################################
##                              Change Log                               ##
###########################################################################
## Version #     Name      #                    NOTES                    ##                  
###########################################################################
##   0.01  # Ken Bocchino  # Created base functionality                  ##
###########################################################################
##   0.02  # Ken Bocchino  # Continued build of iApp                     ##
###########################################################################
##   0.03  # Ken Bocchino  # Added application mappings and other fixes  ##
###########################################################################
##   0.04  # Ken Bocchino  # Added gtm object model and irule search     ##
##         #               # Added export mapping support                ##
##         #               # Added partition support                     ##
###########################################################################
##   0.05  # Ken Bocchino  # Added tier mapping & application dependency ##
##         #               # Cleaned up data model                       ##
###########################################################################
##   0.06  # Ken Bocchino  # Started Fixes for pre 12.x versions         ##
##         #               # Corrected Facility Var set                  ##
##         #               # Corrected 11.6 issues with iapp create      ##
##         #               # Corrected 11.6 issues with fqdn pool        ##
##         #               # 11.6.0 support verified                     ##
###########################################################################
##   0.07  # Ken Bocchino  # Support from 11.4.0 to 12.0.0               ##
##         #               # Updated Source Types per Splunk             ##
##         #               # Added Application and Tier Status Mapping   ##
###########################################################################
##   0.08  # Ken Bocchino  # Fixed iRule Pool Mappings Missing Partition ##
##         #               # Added Apl Shell for iHealth Uploads         ##
###########################################################################
##   0.09  # Ken Bocchino  # iHealth integration coding                  ##
###########################################################################
##   0.10  # Ken Bocchino  # iHealth integration coding added data pull  ##
###########################################################################
##   0.11  # Ken Bocchino  # Added Callback URI and Node Name to poolstat##
###########################################################################
##   0.12  # Ken Bocchino  # Added and fixed process usage mapping       ##
###########################################################################
##   0.13  # Ken Bocchino  # APL updates part 1                          ##
###########################################################################
##   0.14  # Ken Bocchino  # AFM Data Pull                               ##
###########################################################################
##   0.15  # Ken Bocchino  # APM SessionDB Pull                          ##
###########################################################################
##   0.16  # Ken Bocchino  # Added vCMP Stat Pull 112377833              ##
###########################################################################
##   0.17  # Ken Bocchino  # Bytes Transfered Stat Added 114279115       ##
##         #               # Fixed callback url issue 114278061          ##
##         #               # Added Aggperiod to all AVR tables 114309129 ##
##         #               # Added devicegroup override 114278039        ##
##         #               # Added hostname override 114310721           ##
##         #               # Added tenant default 114278027              ##
##         #               # Correct Virtual ports to # 112280241        ##
##         #               # Handle IPv6 Virtual Correctly 112280165     ##
##         #               # Send AVR by bucket and track 112280177      ##
##         #               # Added Aggperiod to all tmstats 114309159    ##
###########################################################################
##   0.18  # Ken Bocchino  # Setup DoW Month iHealth Schedule 112734737  ##
###########################################################################
##   0.19  # Joel Moses    # APL updates part 2 112280319                ##
###########################################################################
##   0.20  # Ken Bocchino  # Added AppMap Export support pre12 112280367 ##
##         #               # Correct for first selfip being V6 114436217 ##
##         #               # Correct for non SSL HEC 112280913           ##
##         #               # Added proxy support stats/ihealth 112654373 ##
##         #               # Limit iHealth Retries 114439653             ##
##         #               # lookup callback url via mgmtip 114439165    ##
###########################################################################
##   1.0   # Ken Bocchino  # Added compression to stats send 114528149   ##
###########################################################################
##   1.1   # Ken Bocchino  # Added SWG data 114366305                    ##
##         #               # Added app version and aggr_period to system ##
##         #               # Sort Latest Bucket < aggr_period 114828325  ##
###########################################################################
##   1.2   # Ken Bocchino  # Fixed host header bug                       ##
##         #               # Removed curl retries                        ##
##         #               # Collect APM policy state 112291643          ##
##         #               # Collect ASM policy state 112291649          ##
##         #               # Collect AFM policy state 115010489          ##
###########################################################################
##   1.3   # Ken Bocchino  # iStats application mappings                 ##
###########################################################################
##   1.4   # Ken Bocchino  # Added new F5 Analytics Server Option        ##
###########################################################################
##   1.5   # Ken Bocchino  # SNAT pool option                            ##
##         #               # Correct APM collection for versions 12.x    ##
###########################################################################
##   1.6   # Ken Bocchino  # Updated GZip for F5 Analytics               ##
##         #               # Added Manual Unique ID support              ##
###########################################################################
##   1.7   # Ken Bocchino  # New F5 Analytics Endpoint                   ##
###########################################################################
##   1.8   # Ken Bocchino  # Added Staged AFM Rule Stats                 ##
###########################################################################
##   1.9   # Ken Bocchino  # Collection Flags                            ##
###########################################################################
##   1.10  # Ken Bocchino  # Added Risk Engine Logging Logic             ##
###########################################################################
##   1.11  # Ken Bocchino  # Added ADM Logging / Thrift Interface        ##
###########################################################################
##   2.0   # Ken Bocchino  # Data Model Rename for F5 Analytics          ##
###########################################################################
##   2.1   # Ken Bocchino  # DNS AVR Stat Collection                     ##
###########################################################################
##   2.2   # Ken Bocchino  # profile_udp_stat added                      ##
###########################################################################
##   2.3   # Ken Bocchino  # Added Interface Status                      ##
###########################################################################
##   2.4   # Ken Bocchino  # Added SWG URL Filter Lookup via Per Req Pol ##
##         #               # Inserted SessionDump Utility                ##
###########################################################################
##   2.5   # Ken Bocchino  # iHealth Fixes                               ##
###########################################################################
##   3.0   # Ken Bocchino  # Release To Web - F5 Contributed             ##
###########################################################################
##   3.1   # Ken Bocchino  # Added Splunk RBAC Controls!                 ##
###########################################################################
##   3.1.1 # Ken Bocchino  # Moved devicegroup override to non advanced  ##
###########################################################################
##   3.1.2 # Ken Bocchino  # Added Collection of HD/AV status for APM    ##
###########################################################################
##   3.2.0 # Ken Bocchino  # Added Collection of SSLi Stats              ##
##   3.2.0 # Ken Bocchino  # Added Collection 5 Custom SessionDB Vars    ##
###########################################################################
##   3.2.1 # Ken Bocchino  # Fixed APM SessionDB Collection Bug          ##
###########################################################################
##   3.3.0 # Ken Bocchino  # Added Agent Manager Registration iCall      ##
###########################################################################
##   3.3.1 # Ken Bocchino  # Fix for missing datagroup issue             ##
###########################################################################
##   3.4.0 # Ken Bocchino  # Increased Timeout settings for iHealth      ##
##         #               # Updated Risk Engine iRule                   ##
##         #               # Made Response Logging Optional              ##
###########################################################################
##   3.4.1 # Maydan Wienreb # Updated Risk Engine iRule                  ##
###########################################################################
##   3.5.0 # Ken Bocchino  # Initial Support for BIG-IQ                  ##
###########################################################################
##   3.5.1 # Ken Bocchino  # 12.1.1 sessiondump fix                      ##
##         #               # Advanced Source Selection                   ##
##         #               # Push interval start randomization           ##
###########################################################################
##   3.5.2 # Maydan Wienreb # Updated Risk Engine iRule                  ##
###########################################################################
##   3.5.3 # Ken Bocchino  # Bug Fix for Config Mapping                  ##
##         #               # Risk Engine iRule Fixes                     ##
##         #               # Modified BIG-IQ File Location               ##
###########################################################################
##   3.5.4 # Ken Bocchino  # Collection of Virtual Server Status         ##
##         #               # Collection of Disk Usage                    ##
##         #               # Collection of Disk Latency                  ##
##         #               # SSL Intercept Subtable Update               ##
###########################################################################
##   3.5.5 # Ken Bocchino  # SSLi Subtable Math Update                   ##
###########################################################################
##   3.5.6 # Ken Bocchino  # SSLi Subtable Field Name Correction         ##
###########################################################################
##   3.5.7 # Ken Bocchino  # Risk Engine iRule Updates                   ##
###########################################################################
##   3.5.8 # Ken Bocchino  # Risk Engine iRule Updates                   ##
###########################################################################
##   3.5.9 # Ken Bocchino  # Updates to BigIQ TMStat Table List          ##
##         #               # MySQL AVR Query Updates for 11.5.x          ##
###########################################################################
##  3.5.10 # Ken Bocchino  # Updates to BigIQ TMStat Table List          ##
###########################################################################
##  3.5.11 # Ken Bocchino  # Updates to BigIQ TMStat Table List          ##
###########################################################################
##  3.5.12 # Ken Bocchino  # Added Response Code and Client IP AVR Table ##
##         #               # Sessiondump cleanup                         ##
###########################################################################
##  3.5.13 # Ken Bocchino  # Bug Fix for collection intoed in 3.5.12     ##
###########################################################################
##  3.5.14 # Ken Bocchino  # Version 13 Support Initial Release          ##
###########################################################################
##  3.6.0  # Ken Bocchino  # Version 13 Support                          ##
##         #               # New AppIQ Config Models                     ##
###########################################################################
##  3.6.1  # Ken Bocchino  # AVR Offbox addtl. cmds.                     ##
###########################################################################
##  3.6.2  # Ken Bocchino  # AVR Offbox addtl. cmds.                     ##
###########################################################################
##  3.6.3  # Ken Bocchino  # TCP Latency Stats Collection                ##
##         #               # SSLO URL Category                           ##
##         #               # APPIQ Config Push on change only            ##
###########################################################################
##  3.6.4  # Ken Bocchino  # APPIQ Config Push changes                   ##
###########################################################################
##  3.6.5  # Ken Bocchino  # Registration iCall Fixes                    ##
###########################################################################
##  3.6.6  # Ken Bocchino  # Bug Fix for 616125 - Mod Logs Delta         ##
##         #               # Disk Latency Fix for 12.x+                  ##
###########################################################################
##  3.6.7  # Ken Bocchino  # Corrected log publisher for tcp/udp         ##
###########################################################################
##  3.6.8  # Ken Bocchino  # added monitor_instance_stat monitor_stat    ##
###########################################################################
##  3.6.9  # Ken Bocchino  # New Request Logging Profile                 ##
##         #               # Requested Risk Engine iRule Updates         ##
###########################################################################

	set ::time [clock seconds]
	set iappversion "3.6.9"

	if {[catch {set ::app $::localmode__orginalapp}]}{set ::app $tmsh::app_name}
	catch {set ::localmode__uniqueid $::basic__uniqueid}	
	if {[catch {set ::uniqueid $::localmode__uniqueid}]}{set ::uniqueid 1000}
	if {[catch {set ::intro__localmode $::intro__localmode}]}{set ::intro__localmode "No"}
	if {[catch {set ::basic__format $::basic__format}]}{set ::basic__format "Splunk"}
	if {[catch {set ::basic__appiqformat $::basic__appiqformat}]}{
		if {[tmsh::run_proc f5.app_utils:get_provisioned avr] == "provisioned" && [tmsh::run_proc f5.app_utils:get_bigip_version_is_equal_or_later 13.0.0] == "true" && $::basic__format == "F5 Analytics" } {
			set ::basic__appiqformat "Yes"
		} else {
			set ::basic__appiqformat "No"
		}
	}

	
	if {[catch {set ::basic__stats $::basic__stats}]}{set ::basic__stats "No"}
	if {[catch {set ::basic__ihealth $::basic__ihealth}]}{set ::basic__ihealth "No"}
	if {[catch {set ::basic__logging $::basic__logging}]}{set ::basic__logging "No"}
	if {[catch {set ::basic__syslog $::basic__syslog}]}{set ::basic__syslog "No"}
	if {[catch {set ::basic__alerts $::basic__alerts}]}{set ::basic__alerts "No"}
	if {[catch {set ::basic__facility $::basic__facility}]}{set ::basic__facility ""}
	if {[catch {set ::basic__systemtenant $::basic__systemtenant}]}{set ::basic__systemtenant ""}	
	if {[catch {set ::basic__hostnameoverride $::basic__hostnameoverride}]}{set ::basic__hostnameoverride ""}
	if {[catch {set ::basic__devicegroupoverride $::basic__devicegroupoverride}]}{set ::basic__devicegroupoverride ""}
	if {[catch {set ::basic__tenantdefault $::basic__tenantdefault}]}{set ::basic__tenantdefault ""}
	if {[catch {set ::basic__devicegroupoverride $::basic__devicegroupoverride}]}{set ::basic__devicegroupoverride ""}
	if {[catch {set ::basic__callbackurl $::basic__callbackurl}]}{set ::basic__callbackurl ""}
	if {[catch {set ::basic__callbacktype $::basic__callbacktype}]}{set ::basic__callbacktype "Use Management"}
	if {[catch {set ::basic__rbac $::basic__rbac}]}{set ::basic__rbac "No"}
	if {[catch {set ::basic__debug $::basic__debug}]}{set ::basic__debug "Yes"}
	
	if {[catch {set ::applicationmapping__mode $::applicationmapping__mode}]}{set ::applicationmapping__mode ""}
	if {[catch {set ::applicationmapping__irulesearch $::applicationmapping__irulesearch}]}{set ::applicationmapping__irulesearch "No"}
	if {[catch {set ::statistics__splunkdestinationip $::statistics__splunkdestinationip}]}{set ::statistics__splunkdestinationip ""}
	
	if {[catch {set ::statistics__pushstate $::statistics__pushstate}]}{set ::statistics__pushstate "Yes"}
	if {[catch {set ::statistics__pushtmstats $::statistics__pushtmstats}]}{set ::statistics__pushtmstats "Yes"}
	if {[catch {set ::statistics__pushistats $::statistics__pushistats}]}{set ::statistics__pushistats "Yes"}
	if {[catch {set ::statistics__pushsslistats $::statistics__pushsslistats}]}{set ::statistics__pushsslistats "No"}
	if {[catch {set ::statistics__pushavr $::statistics__pushavr}]}{set ::statistics__pushavr "Yes"}
	if {[catch {set ::statistics__pushsessiondb $::statistics__pushsessiondb}]}{set ::statistics__pushsessiondb "Yes"}
	if {[catch {set ::statistics__pushconfig $::statistics__pushconfig}]}{set ::statistics__pushconfig "Yes"}
	if {$::basic__format == "F5 BIG-IQ"} {set ::statistics__pushconfig "No"}
	if {[catch {set ::statistics__certexpiration $::statistics__certexpiration}]}{set ::statistics__certexpiration "Yes"}
	
	if {[catch {set ::statistics__customsessiondb $::statistics__customsessiondb}]}{set ::statistics__customsessiondb "No"}
	if {[catch {set ::statistics__customsessiondb1 $::statistics__customsessiondb1}]}{set ::statistics__customsessiondb1 ""}
	if {[catch {set ::statistics__customsessiondb2 $::statistics__customsessiondb2}]}{set ::statistics__customsessiondb2 ""}
	if {[catch {set ::statistics__customsessiondb3 $::statistics__customsessiondb3}]}{set ::statistics__customsessiondb3 ""}
	if {[catch {set ::statistics__customsessiondb4 $::statistics__customsessiondb4}]}{set ::statistics__customsessiondb4 ""}
	if {[catch {set ::statistics__customsessiondb5 $::statistics__customsessiondb5}]}{set ::statistics__customsessiondb5 ""}
	
	if {[catch {set ::statistics__randomstart $::statistics__randomstart}]}{set ::statistics__randomstart "No"}
	if {[catch {set ::statistics__customcollection $::statistics__customcollection}]}{set ::statistics__customcollection "No"}
	if {[catch {set ::statistics__customcollectionconfig $::statistics__customcollectionconfig}]}{set ::statistics__customcollectionconfig ""}
	
	if {[catch {set ::rbac__indexprefix $::rbac__indexprefix }]}{set ::rbac__indexprefix "Yes"} 
	if {[catch {set ::rbac__indexprefixstring $::rbac__indexprefixstring }]}{set ::rbac__indexprefixstring "f5-"} 
	if {[catch {set ::rbac__systemindex $::rbac__systemindex }]}{set ::rbac__systemindex "Use Default Tenant"} 
	if {[catch {set ::rbac__systemindexstring $::rbac__systemindexstring }]}{set ::rbac__systemindexstring "system_stats"} 	
	if {[catch {set ::rbac__defaultindex $::rbac__defaultindex }]}{set ::rbac__defaultindex "Use Default Tenant"} 
	if {[catch {set ::rbac__defaultindexstring $::rbac__defaultindexstring }]}{set ::rbac__defaultindexstring "unknown_stats"} 	
	if {[catch {set ::rbac__logindex $::rbac__logindex }]}{set ::rbac__logindex "Use Default Tenant"} 
	if {[catch {set ::rbac__logindexstring $::rbac__logindexstring }]}{set ::rbac__logindexstring "events"} 
	if {[catch {set ::rbac__sharedindex $::rbac__sharedindex }]}{set ::rbac__sharedindex "Use Default Tenant"} 
	if {[catch {set ::rbac__sharedindexstring $::rbac__sharedindexstring }]}{set ::rbac__sharedindexstring "shared_stats"} 
	
	
	if {[catch {set ::statistics__splunkdestinationhostheader $::statistics__splunkdestinationhostheader}]}{set ::statistics__splunkdestinationhostheader $::statistics__splunkdestinationip}
	if { $::statistics__splunkdestinationhostheader == "" }{set ::statistics__splunkdestinationhostheader $::statistics__splunkdestinationip}
	
	
	if {[catch {set ::statistics__splunkdestinationprotocol $::statistics__splunkdestinationprotocol}]}{set ::statistics__splunkdestinationprotocol ""}
	if {[catch {set ::statistics__splunkdestinationport $::statistics__splunkdestinationport}]}{set ::statistics__splunkdestinationport ""}
	if {[catch {set ::statistics__splunkapikey $::statistics__splunkapikey}]}{set ::statistics__splunkapikey ""}
	if {[catch {set ::statistics__pushinterval $::statistics__pushinterval}]}{set ::statistics__pushinterval 60}
	if {[catch {set ::basic__avrinterval $::basic__avrinterval}]}{set ::basic__avrinterval "300"}
	
	if {[catch {set ::statistics__proxy $::statistics__proxy}]}{set ::statistics__proxy "No"}	
	if {[catch {set ::statistics__proxyip $::statistics__proxyip}]}{set ::statistics__proxyip ""}
	if {[catch {set ::statistics__proxyport $::statistics__proxyport}]}{set ::statistics__proxyport ""}
	if {[catch {set ::statistics__proxyuser $::statistics__proxyuser}]}{set ::statistics__proxyuser ""}
	if {[catch {set ::statistics__proxypassword $::statistics__proxypassword}]}{set ::statistics__proxypassword ""}
	
	
	if {[catch {set ::ihealth__ihealthpassword $::ihealth__ihealthpassword}]}{set ::ihealth__ihealthpassword ""}
	if {[catch {set ::ihealth__ihealthuser $::ihealth__ihealthuser}]}{set ::ihealth__ihealthuser ""}
	if {[catch {set ::ihealth__schedule $::ihealth__schedule}]}{set ::ihealth__schedule ""}
	if {[catch {set ::ihealth__time $::ihealth__time}]}{set ::ihealth__time ""}
	if {[catch {set ::ihealth__endtime $::ihealth__endtime}]}{set ::ihealth__endtime ""}
	if {[catch {set ::ihealth__dayofweek $::ihealth__dayofweek}]}{set ::ihealth__dayofweek ""}
	if {[catch {set ::ihealth__dayofmonth $::ihealth__dayofmonth}]}{set ::ihealth__dayofmonth ""}
	
	if {[catch {set ::ihealth__proxy $::ihealth__proxy}]}{set ::ihealth__proxy "No"}	
	if {$::ihealth__proxy == "From Main Configuration"} {
		set ::ihealth__proxyip $::statistics__proxyip
		set ::ihealth__proxyport $::statistics__proxyport
		set ::ihealth__proxyuser $::statistics__proxyuser
		set ::ihealth__proxypassword $::statistics__proxypassword
	} else {
		if {[catch {set ::ihealth__proxyip $::ihealth__proxyip}]}{set ::ihealth__proxyip ""}
		if {[catch {set ::ihealth__proxyport $::ihealth__proxyport}]}{set ::ihealth__proxyport ""}
		if {[catch {set ::ihealth__proxyuser $::ihealth__proxyuser}]}{set ::ihealth__proxyuser ""}
		if {[catch {set ::ihealth__proxypassword $::ihealth__proxypassword}]}{set ::ihealth__proxypassword ""}
	}
	
	if {$::ihealth__ihealthpassword != "" && $::intro__localmode == "No"}{ 
		#we do this up here b/c we want to error before we get started with deployment as well as we use the start var for the icall script set command below.
		regexp {(.*):(.*)} $::ihealth__time junk start_hour start_minute		
		regexp {(.*):(.*)} $::ihealth__endtime junk end_hour end_minute
		
		set start_minute [expr ($start_hour * 60) + $start_minute] 		
		set end_minute [expr ($end_hour * 60) + $end_minute] 
		
		if {[expr $end_minute - $start_minute] < 120} {
			puts "You must specify a minimum of a two hour window for iHealth qkview transfers."
			error "You must specify a minimum of a two hour window for iHealth qkview transfers."				
		}
		
		#pick a random time between the two numbers
		set start_random [expr {int(rand()*($end_minute-$start_minute+1)+$start_minute)}]
		
		set start_random [expr $start_random / 60.00]
		set start_random [split $start_random "."]
		set start_hour [lindex $start_random 0]
		set start_minute "0"
		catch {set start_minute [format %02d [expr round("00.[lindex $start_random 1]" * 60)]]}
		
		set ::ihealth__time "${start_hour}:${start_minute}"	
	}
	
	set ::request_logging_string {catagory=\\"response_logging\\",virtual_name=\\"\$VIRTUAL_NAME\\",virtual_ip=\\"\$VIRTUAL_IP\\",virtual_port=\\"\$VIRTUAL_PORT\\",server_ip=\\"\$SERVER_IP\\",server_port=\\"\$SERVER_PORT\\",snat_ip=\\"\$SNAT_IP\\",client_ip=\\"\$CLIENT_IP\\",request=\\"\$HTTP_REQUEST\\",referer=\\"\$Referer\\",user_agent=\\"\${User-agent}\\",reponse_code=\\"\$HTTP_STATCODE\\",response_size=\\"\$RESPONSE_SIZE\\",latency=\\"\$RESPONSE_MSECS\\"}
	
	
	#RBAC var setup
	if {$basic__rbac == "Yes"} {
		regsub -all "\\.| " $::basic__tenantdefault "_" tenantdefault_index
		set tenantdefault_index
		
		
		if {$::rbac__indexprefix == "Yes"} {
			set rbac_prefix $::rbac__indexprefixstring
		} else {
			set rbac_prefix ""
		}

		if {$::rbac__systemindex == "Use Default Tenant"} {
			set rbac_system_index ",\"index\":\"$rbac_prefix$tenantdefault_index\""
		} else {
			set rbac_system_index ",\"index\":\"$rbac_prefix$::rbac__systemindexstring\""
		}

		if {$::rbac__defaultindex == "Use Default Tenant"} {
			set rbac_default_index ",\"index\":\"$rbac_prefix$tenantdefault_index\""
		} else {
			set rbac_default_index ",\"index\":\"$rbac_prefix$::rbac__defaultindexstring\""
		}	

		if {$::rbac__logindex == "Use Default Tenant"} {
			set rbac_log_index ",\"index\":\"$rbac_prefix$tenantdefault_index\""
			set rbac_log_index_irule ",\\\\\\\\\\\"index\\\\\\\\\\\":\\\\\\\\\\\"${rbac_prefix}${tenantdefault_index}\\\\\\\\\\\""
		} else {
			set rbac_log_index ",\"index\":\"$rbac_prefix$::rbac__logindexstring\""
			set rbac_log_index_irule ",\\\\\\\\\\\"index\\\\\\\\\\\":\\\\\\\\\\\"${rbac_prefix}${::rbac__logindexstring}\\\\\\\\\\\""
		}
		
		if {$::rbac__sharedindex == "Use Default Tenant"} {
			set rbac_shared_index ",\"index\":\"$rbac_prefix$tenantdefault_index\""
		} else {
			set rbac_shared_index ",\"index\":\"$rbac_prefix$::rbac__sharedindexstring\""
		}		

	} else {
		set rbac_prefix ""
		set rbac_system_index ""
		set rbac_default_index ""
		set rbac_log_index ""
		set rbac_shared_index ""
		set rbac_log_index_irule ""
	}
	
	regsub -all "\"" $rbac_prefix "\\\"" rbac_prefix_icall
	regsub -all "\"" $rbac_system_index "\\\"" rbac_system_index_icall
	regsub -all "\"" $rbac_default_index "\\\"" rbac_default_index_icall
	regsub -all "\"" $rbac_log_index "\\\"" rbac_log_index_icall
	regsub -all "\"" $rbac_shared_index "\\\"" rbac_shared_index_icall
	
	
	

	
	set deviceinfo ""
	set version ""
	catch {set deviceinfo [tmsh::show sys version]}	
	regexp {.*Version\s*(\S*)\s*} $deviceinfo junk version
	
	#hostname override logic 114310721
	if {$::basic__hostnameoverride == "" } { 
		set deviceinfo [tmsh::get_config sys global-settings hostname]
		foreach object $deviceinfo {
			set hostname [tmsh::get_field_value $object "hostname"]
			set hostnamemapping "\\\\\$static::tcl_platform(machine)"
		}
	} else {
		set hostname $::basic__hostnameoverride
		set hostnamemapping $::basic__hostnameoverride
	}
	
	
	set deviceinfo ""
	set device_base_mac ""
	catch {set deviceinfo [tmsh::get_status sys hardware]}
	foreach object $deviceinfo {
		catch {set device_base_mac [tmsh::get_field_value $object "base-mac"]}
	}

	if {$device_base_mac != ""} {
		set device_base_mac_split [split $device_base_mac ":"]
		set device_base_mac ""
		foreach macpart $device_base_mac_split {
			if {[string first 0 $macpart] == 0}{
				append device_base_mac "[string range $macpart 1 1]:"
			} else {
				append device_base_mac "${macpart}:"
			}
		}
		set device_base_mac [string trimright $device_base_mac ":"]
	}
	
	set devicegroup $hostname
	#device group override logic and collection 114278039
	if {$basic__devicegroupoverride == ""} {
		set deviceinfo ""
		catch {set deviceinfo [tmsh::get_config cm device-group]}
		foreach object $deviceinfo {
			set type ""
			catch {set type [tmsh::get_field_value $object "type"]}
			if {$type == "sync-failover" } {
				set devicegroup [tmsh::get_name $object]
			}
		}
	} else {
		set devicegroup $basic__devicegroupoverride
	}
	
	regsub -all "/Common/" $devicegroup "" devicegroup
	
	
	if {$::basic__format == "Splunk"} {
		set datareceiverurl "/services/collector/event"
		set datareceiverauth "Authorization: Splunk $::statistics__splunkapikey"
		set eventformat_start "\\\\\\\\\\\"event\\\\\\\\\\\":\\\\\\\\\{"
		set eventformat_end "\\\\\\\\\}"
		set bofdata ""
		set eofdata ""
		set bordata ""
		set eordata ""
	} 
	if {$::basic__format == "F5 Analytics"} {	
		set datareceiverurl "/mgmt/ap/v1/tenants/$::basic__systemtenant/sources/$hostname/raw-data"
		set datareceiverauth "Postman-Token: $::statistics__splunkapikey"
		set eventformat_start ""
		set eventformat_end ""	
		set bofdata "\\\\\\\\\["
		set eofdata "\\\\\\\\\]"
		set bordata ""
		set eordata ""		
	}
	if {$::basic__format == "F5 BIG-IQ"} {	
		set datareceiverurl "/mgmt/ap/v1/tenants/$::basic__systemtenant/sources/$hostname/raw-data"
		set datareceiverauth "Postman-Token: $::statistics__splunkapikey"
		set eventformat_start ""
		set eventformat_end ""	
		set bofdata "\\\\\\\\\["
		set eofdata "\\\\\\\\\]"
		set bordata ""
		set eordata ""		
	}	
	if {$::basic__format == "F5 Risk Engine"} {	
		set datareceiverurl "/"
		set datareceiverauth "HealthStats: $::statistics__splunkapikey"
		set eventformat_start ""
		set eventformat_end ""	
		set bofdata "\\\\\\\\\["
		set eofdata "\\\\\\\\\]"
		set bordata ""
		set eordata ""				
	}
	if {$::basic__format == "F5 Risk Engine - Full"} {	
		set datareceiverurl "/"
		set datareceiverauth "HealthStats: $::statistics__splunkapikey"
		set eventformat_start ""
		set eventformat_end ""	
		set bofdata "\\\\\\\\\["
		set eofdata "\\\\\\\\\]"
		set bordata ""
		set eordata ""						
	}
	

	
	########SplunkStats Script Start ########
	#yeah we could do some substr stuff here but to keep things simple we will do an append
	set ::icall_splunkstats 	"	set url ${::statistics__splunkdestinationprotocol}://${::statistics__splunkdestinationip}:${::statistics__splunkdestinationport}\r\n"
	append ::icall_splunkstats 	"	set devicegroupoverride \"$::basic__devicegroupoverride\"\r\n"
	append ::icall_splunkstats 	"	set hostnameoverride \"${::basic__hostnameoverride}\"\r\n"
	append ::icall_splunkstats 	"	set format \"${::basic__format}\"\r\n"
	append ::icall_splunkstats 	"	set systemtenant \"${::basic__systemtenant}\"\r\n"
	append ::icall_splunkstats 	"	set tenantdefault \"${::basic__tenantdefault}\"\r\n"
	append ::icall_splunkstats 	"	set callbacktype \"${::basic__callbacktype}\"\r\n"
	append ::icall_splunkstats 	"	set callbackurl \"${::basic__callbackurl}\"\r\n"
	append ::icall_splunkstats 	"	set hostheader \"${::statistics__splunkdestinationhostheader}\"\r\n"
	append ::icall_splunkstats 	"	set apikey \"${datareceiverauth}\"\r\n"
	append ::icall_splunkstats 	"	set iappversion \"${iappversion}\"\r\n"
	append ::icall_splunkstats 	"	set appname ${::app}\r\n"
	append ::icall_splunkstats 	"	set facility \"${::basic__facility}\"\r\n"
	append ::icall_splunkstats 	"	set irulesearch ${::applicationmapping__irulesearch}\r\n"
	append ::icall_splunkstats 	"	set ihealthusername \"${::ihealth__ihealthuser}\"\r\n"
	append ::icall_splunkstats 	"	set ihealthpassword \"${::ihealth__ihealthpassword}\"\r\n"
	append ::icall_splunkstats 	"	set debug \"${::basic__debug}\"\r\n"
	
	append ::icall_splunkstats 	"	set pushstate \"${::statistics__pushstate}\"\r\n"	
	append ::icall_splunkstats 	"	set pushtmstats \"${::statistics__pushtmstats}\"\r\n"
	append ::icall_splunkstats 	"	set pushistats \"${::statistics__pushistats}\"\r\n"
	append ::icall_splunkstats 	"	set pushsslistats \"${::statistics__pushsslistats}\"\r\n"	
	append ::icall_splunkstats 	"	set pushavr \"${::statistics__pushavr}\"\r\n"
	append ::icall_splunkstats 	"	set pushsessiondb \"${::statistics__pushsessiondb}\"\r\n"
	append ::icall_splunkstats 	"	set pushconfig \"${::statistics__pushconfig}\"\r\n"
	append ::icall_splunkstats 	"	set certexpiration \"${::statistics__certexpiration}\"\r\n"
	append ::icall_splunkstats 	"	set pushinterval \"${::statistics__pushinterval}\"\r\n"

	append ::icall_splunkstats 	"	set rbac \"$::basic__rbac\"\r\n"
	append ::icall_splunkstats 	"	set rbac_prefix \"$rbac_prefix_icall\"\r\n"
	append ::icall_splunkstats 	"	set rbac_system_index \"$rbac_system_index_icall\"\r\n"
	append ::icall_splunkstats 	"	set rbac_default_index \"$rbac_default_index_icall\"\r\n"
	append ::icall_splunkstats 	"	set rbac_log_index \"$rbac_log_index_icall\"\r\n"
	append ::icall_splunkstats 	"	set rbac_shared_index \"$rbac_shared_index_icall\"\r\n"
	
	append ::icall_splunkstats 	"	set uniqueid \"$::uniqueid\"\r\n"
	
	append ::icall_splunkstats 	"	set customsessiondb \"$::statistics__customsessiondb\"\r\n"
	append ::icall_splunkstats 	"	set customsessiondb1 \"$::statistics__customsessiondb1\"\r\n"
	append ::icall_splunkstats 	"	set customsessiondb2 \"$::statistics__customsessiondb2\"\r\n"
	append ::icall_splunkstats 	"	set customsessiondb3 \"$::statistics__customsessiondb3\"\r\n"
	append ::icall_splunkstats 	"	set customsessiondb4 \"$::statistics__customsessiondb4\"\r\n"
	append ::icall_splunkstats 	"	set customsessiondb5 \"$::statistics__customsessiondb5\"\r\n"
	
	

	append ::icall_splunkstats	{
		
		
		#set a common epoch
		set date [clock seconds]
		
		
		########SessionDump Base64 Start########
		set sessiondump_11_6_x_base64 	{}
		set sessiondump_11_6_x_md5 "8b2474e0a649a3e4861b8d0a941f4e22"

		set sessiondump_11_5_x_base64 	{H4sICD5rM1cCA2Y1X2FuYWx5dGljcy1zZXNzaW9uZHVtcADsvXlAVFUbMH4HZoarYjMqGpYVJpamFpia5BIKg5ZiuKBWGiLbkGzCDFq5gMMot+sopWR72mrLW5b7jkuiZYlLSmlFZTUjVLikuMH3PM85d+bOsNj7/n7ff591OfPcc+45z36es9xz55tGx2g0GkH55yf4CwitrNSK/SANLhfpfj8hRBCFHkJP4S5BTzBcBVAGLnoALh0kWrj8MQ/gfoWQD1cHgDvwPF6U/cNn4Ro8y1/AC58XjDy/AGsRRbruEYTACIHaxXw/SKY87y9MaSeKeFXCA3jpeRt4jQR4JLSNVwjAIaq8AJ/6kZawQE/+2N8syUIT/5T678tIn35fRnKfjPQs6+x787Lv7cvuGzltI8bEc16y+x2xTciYBWkkXG2wXEXfOztrn/+ia1jA2db3rHtB/yigpQ/RtBeEhycLISVCWedOOv20Fwpad8t5znrsHY2gLVs5cpXwwvSCwhemHQ/7aE23MuHx99O0t9413G+Y4LdgoTFcEDdGxwmR2tAXhJzlmm73C8MjO4o9urTzP5cbUrAgRNPvrZyXCoRHhH5fPDdhwmuRq6LDtEIIMCYwP/Id4c7IgpUjnzsmaAuElXlxYpv9wl/yZ0GvjeypnRztpwkevv709Fe6jfttbcHym0r7//6WzRCn1QCBIe2FmfvbfRjT2h6pL/BvJ/zcd/Nq7ZMfRRt1RSNDBd3EkCKj4LdYuDXshQJNWM9f5ZErbxnpJxojZnGezvbh8TNwzYFrLlzzUEz8fiFcC+CywWXn94rheo7/llV1LOHpUp6WwPU8XC/AtYzfK4XrJbhehusVuF6F6zW43oDrTbhWwfUWXO/w8u/B9T5cH8D1IVwfw/UfuD6Hay0vsw6uDfz3Rrg2qXDaDNcWuLZzeCdcu+DaA9cXcH0J10G4KuA63ITufQvXCf77O7hOwvUjh3+Cqwqun+H6Ba5f4foNLidcLriq4aqB60+4/oLrLFzn4fqHP18H1xW4rsF1Ha56fr+Bp+ge/LjRatHO0dY8LkNozX8HQtoWrpvgMvB77SBtz393hLQTXMFwdYbrFrhuVdVzG/y+Ha474OrK73eDNBSuHnD1hKsPXPfCFQ5XX7j6w/UAXA/CNQiuwfy5IZA+BFcUXNFwxfD7IzTMN+C/UZCOgSsOrrFwxfP7kyB9gv+eytMESBPhSuFwGqRmuGbAlQlXFlw5cOWq6LHw31ZI89H+4XoarmfgehauuXDNh6sArkK4FsBlg2shXIvgKoZL4nUshtQB11K4XoBrOVwvwvWSqr1X4PfrcL3J763k6SpI34LrXbjeh2s1XB9ovPXrIw5/DOkncH3G4bWQbuC/t0C6Da4dHN4JaRlcu+Daze/tgXQvXPvgOgDXV/z+15B+A9chuA7DdYTfPwrpt3Ad5/AJSC+t+rxfl2vTr7V6csDisojOGVOfWDoj8/Chjm9qig6c27H9SpKYvHDIc64Vg9p2H9Or9reOx4fUtfl2wL3vrB4zqnrK7z1HLY3v41eXsu3CLt2sXf8Ybt1+rWvi8CkPD/t51oCh29vZtnV59+1vj3S7r9+k8jcXNTz08xtbHlxwy/Z/Ovb4cMrUu5fn2NuM+i1s3C8nP/ntcoTmzehhVe9U/trpg//E/dz3vZNL6/uuXdxnyeoh7wy4f1HV0a2/vjBnw7Fjf0Wck7tkzPC7Z35E0Ym/L259tGbdqU8Kx8VWH+2+5o6s4c5d9yd3rE8//tOiqs9Gj76wcOltx34IXLV49OtbpLitV7ItaWkdn6o8e3zCi/NM85/+odWkLmM++Ofe9o7+fm9tt0x52dht9bTitP3TP3jvw40/pj92Qo6ce+TcmMDPNBusH05LCF7Uec6bPe4sPfbsxmeHztlQWDo555Mk05mfxu7YO8RxIGJ3+Bdnrk+O6Rz1phRsTfy2Nv0Lw5Jv3oz9bMEdY/7UbRyx5tPEfj0+m10u3PbwXTt7jzMEPriizZC1A17qO/3kn90F09/rDummf70w6i/jFdsj06pe2fF27FtrH6rI6xdl+rbGluO/zuo/1Nq1tPP2/NETR59N7TP44+4/3zQw+OyBZZm335K04/GvMj77s8ttM6MHZNb9+R9X9+PJaR2vHBS+vS/kxa+fH9Y/uP2Q9y58/9fL+9c+1Sm017Bel5/+sP2qgj+OLXy9/5/vLH36xTRx0Mb7/rygb32i7t3H0n/umVfa8+tL343/YeiB8V0++rvP9i/s8WmtXpue1frm1K5jRv66tHXX7/4JPn01Nz1udL8hG9ZHl928u/TZhT+Vde3a8PKgb7u3K3xt/Obs+Eu3Pn313We63Ldc2nDXfZqJ0x85M+RSv6G6jhPeTWi9vfSRUP3vrpHnOs9+ql3hf8Y9ofuwuI1uxcQfl4wadOW+57Trxj/S9qY3t5/9feTvP/T7Y+Z9SeYZb/62dUTfvR1XBk/ecGTT0MnOP2vWOVIuSP0Hv57+w58Hnloprv699/r8ocLOqe1yxunf7jbt0TNH/77p+7kxtYY/ux/vv6BzxpL7bk79eNSvZTNaRR0//saRo3OvvTxn5PRr6wdv2Xm2bdAvb7i2XtoQMOa67uv5Zwac235PlWN++0+2XMhZum5Lp+6V4itz1s88P3P7sdscC24K+Gyz4+xN3fqNun3sNCn3+69/fWN077bpiYfmn8+q/qZg9tDX14764dyRrC8/svwdvczY7YOhhpBvqww5ba4HjtvjTLljbt3MaVWxtyeUPVV879wjd+57tcOaM+cfObzx25/PvnhNf+eln7s/nJv61k2rrr8gCuf27fBfMP+u2vU9e61e+PBHcV9K72c/OySj5tw9ezXF2Scyg5ZmCLd0OCO+l/GGI23cX5MvfvLjb/L7ne/454/QONfLX/QJsq57sv+kyL97vXagdb/i4O9mTu5yQO+fdX36imHvNuzv6PzE75br5beXP3Rok0U3xb7XsnbdsdjSsX2u/J398mc7f6/scCn+yVmjPn79ZK116YmH69f+WJt4j/6jBzatL3vru/hJgwfER0T9mF19aFNRed91NX9esORdHLkmc8Lwv4/dMemFzr8uPT9nf2rxPY9E9/osIiTtysT75n80snKbs3eYsc3x4wOcp/7YHHF064Onz2Qcir13uGH10K8f3/d5zPi5P8xY9srERyr6vPuw4XrdRyduvuQ/fv3Vh/wtz4e+9oooi9c7bPzwSfNH59KHBU0YP+OOEyd1E5YeHPPNvl+fqW3/0ycRmxave2fAAyEjEwKdF14LK8sVx5aMuT1/5pE+6ZueXeM84z9vzeN7luWtPtr79POP/nTLT3f6DT+3fPvOI2f2v5bi/PSHhWPC5/wxR/f3qydWrH3rUnvDc9eST8jz44eceOb7L45sqHL1etw54dbTB/x/ternfKZb90z5hCNf1Bs+e+P5Fy/3vG1xlzNLPp/30bbvbo9//Kjc8cCmK61/eOyen6VVhQmP3aw5GTJ2Z+/fxs3M7NzvtdcfDEl9fXfJ5hnzX5njG39ojCzF+KY9xlv+DI7j8F4d78M5HHw7g0M4HM/zh3A4Ts/gwRwe6fP8c60YnM3hCl5+Modf5u3fzeFtHH6fw+tu9cSTCD/B60/h8AJe31AOC/x5kz+DP+FwGs9/kpfvx+GPOBzK4cW8/l4c3qz1pm89rw/7boSX8PwVHD7D4QCFXxzO5/DHvL0IDq/UecPEOBV/bTzfxOGr/Pm3OHyS5w/icCXH716Oz2EOR/H8tfz5K34MDvLzlpcS73XicMcuDP6M11em9cTdCL/P6x/M+b2d49OWlz/gQ5+Rw5t5/spO3vKt5/lOnv8sx7cbz8/m+a/y/AaO73M8fwzPf4rDP3J87+RwYkdPfIPwPfz5Szz/DG9vhMJ/Dps5vx7i9Y/h+b05PI3DQ3n5CRzuyvMRjXZoTxyexPPb6r3lu0LvLf9KDr/J8d3C4U95fgyHozmczutP4/jm8fwPef5vnB8XFH3TeOvHn37e+tqdw8m8/dM6b/48wOvvrfCX52dpGTznFu/6DvH2Izm8mpefyeu/v523vtzh419u5vhuU/yVvze/QlS+Dn+X6D1xP+Yv5+315eU/0Xnzcxmvbz6Hdfz5Mv78Ra23/xjI+bOPw7W8vosc1gZ4y/d3Xn93Dt/ng+8dAR596Yr5N/ExMG//da6/H/Pn39F7xjEIj+LPD+DwGzx/JS+fz/FzcPh7nbf+Wzh+ZxR/x/PtHJZ4fT8q9HJ+3MThe3zktYLnt+b6eEjnra8P8fxPFPly/P/k/mQgL5/H8+dweACHn9d7+48hGm990PPy6Zwfe3n5zzk+F3WeeQfyP1pvfpzQesbWCH/p67/9vf3/D9BfVVzSi8z/BArz20IfqdWJrL8IFLZC/1vQXS/O4vnjwP9V7NeL4zjcF/xt5DmtaObwj9D/1r6oFws5PAPKR76nF2/icIfW4FPf8cCfipB/RSe25vBt8HzkXXoxg8N3Q8HIfL2o4/CfweC7euvFIA6b4MEKs15M8GPwbIDjoL32PP85hLP14mCe/2ugIHS+RxQ15N9uFWaA/OJe1Yn38PKjoP+f9qxeTOLwBMAnZJROvJc/Pxb4WzYgQIzk+T/fDPT4i6KR6uso1IH/qOigE4dy/pUBf4JV7a0HetaIevFe/vxbQH/cKzoxncOXQT4FoQE0d4nwQejoIjP0YiiHpyDjMvViGofvBHxW3hUgXuewExiT06AXh3F4AMj/4+NasSeXfxHgV/CMXkzm+W8AfWEgDwOH58DzJWl6cSKHN4N+lCzXi29x2A4FC1Tyex74UnaLXuzE4c8DsbPUiyM5v7oDITnFevE7nv82+IOSN/XiqxyOAMYZH9SJnTncG/zpyu16cSaH/xZxDlYU2RTs2YZ1KM8wndiV52egfgN/tZy/y6GisrNa8VaevwvkG5KjE7/m+OwG/Gun6cRqLZc3MCXkbb14Fy9/H/CjbKZevJuXfxPt+x+d+JI/g/dh+7304ile/haQbwHoYxcOj0C4Tiv+o7QP+lRxn96Nb/s2UP9XevF2Dl8CenMkvXgLh08FY9CgF+M4PA0yQoDfbTh8DfgZ9phHf14Ezqw068TeHN/ngP8hKn2sBPjiBR3nX6BwO9q7Ri/exp/XA34lQ3RiLw63hgdXbtKL9yn6De2tVNnbsyC/kHY6sRuHn0D9APt8kcOPQMU5ACv2/BYoSkG4TiznsBkIr5isFydx+F54fg3Y3wgOnwN+V2UGUPvtwEsfA3mFnNS79SMD+BVnDHD7m48B3xCQt1LfgyDPNas8/BqH+vWqXpzPYZx3K0vTid9zOBQU15jv4WcNwFUz9OKDHE4BetaE6sUvOLwO6Qf/0o7DpwGxgrc9/uZW9B+Sx57sIJdpYB/Bin2BPMqA32MUfwUFV4J9K/xMx/re9dhHd2BkGdizjetrL0hD7gkQ0zh8Ewgm7AkPvm9DQ2WL9OIqDo8EfCM7MvsJEToLP6A//hrKc/80uiNbcxEUeQF+00DfFPvJxv7gAz33H4HCdtDHaec9+nQz4GEE/7OY52+D+uPu1bv9Vz7gE1mnF2MVfwqCKVbp5ymR2a9i3+2h4TKQn8jL50J7xo46EfsxhAdBeyX3BoiXOf0LgF9hYXoxjJf/CsqXzNaLfpy+qSCYApDnUJ5vRMT6ePzNO/DDCPgO4nAD8DskSy/O4TDOj5bs0ol7eH2vQVp7ztNfvQfyXvm0XpzK4V9xbeJOvdidlz8GhEYuBX/I4VbwYNVAkfwB+qsOgF/FEzpxCH8+FvqT2lK9+LZij0BnLfYH/PlvQfEKQN8V/A/B8yUP6MS7OTwIno9r0IpXOX/8UZ7/aMV0/nwkyLNKJU8t+KuKBMBP6f9QUUGfuiv8BHpyuurF95T+FOx5GvD7BQ4/gP3d9x7/h3O8RtAPxV+sRnry9OKjCj9BPwrAf3/DYQkEXZKlE4s5ftsB3tTTow+7AR8j2MMMXj4Z8J92U4C7fwpAxwn49FDiCcA38lbo7zm8A/nVVSe+yutfA/YWd58nftl+M/JHL2Zze/wZCJlm0okbOfw22H9Bsl78lpdfD+2v+UwvOrk+/gn5Fdv0bnq+AXsquOApvw/4v7JOJ+7nsAGeN17Qio9yfM6Avq/soxdTeP4GjDdG6sTLvP2joF85T3jiqQuoz9c9/cOnoM/G7/RiGa+vAvmr6o+7gr2VXNOKO3h9v2N/A/r1DM+fifEC+LebObwI+J0D8VS04g8gX4zw9K9rQTLTngkQMfhH/1yC/Ueop70L6B97KuU7Cw8CfVVZnv4jCvurl3TiFQ77IT9X68VpHG4Fip2j8ofTsL+N1YkbeP/7PuA/7bYAd/80FfW3W4A73lmK/es9enEJh/th/BgRwPG5SViI/JrisbdUoLfgG73bfpJRHmBvD3P4O6ivqrfHXziQUdV6caBSPzy/EuiL4PBsjF9DdGJfLo8I4EcZ9FcbODyZ+BnA/W1bQYf6N8Rjv09A/5dz2aMvPUG/4lT9fybQY4T6HuLwh0BYtIq+GJW/NwL/l6A+Q7ywWeE/Bh5d9OIiDi8B/gsQbyvx7Gzgb+0Kj/8eA/hOGxjgjr8/gvpCznvi/ViMB/vqxTGKvwZ6IlX+fSLUFzZcJ4Zx+e2C9uMkT3zwBo4HPvDY651oL+/rxVc43AXqC7lNLw7g8FbQ4zVg30q80B74sfI7nbiDw7cj5a/pxG2c3xIwrt9hpX9rLQyC8iEg3xBe/h6gb80kvTiFw4chPwfoVeLxToB/JMh7PIejsf+5P0AM5fT8CoSuUY1/KkBRpukCxD8DePyN+v6yTnyf568E/Ktu8cTXtwJ9JSCPYg6PxfEAjIcG6Bh8Ffl7qyf+fwX4b4T2FPtojfHUQb2Yw2FcDyyD8cSTij4hPkCvEl8+D3itgfjvDkXe0F5tis7tP1/DeOp20AfOv844fu8YIL6r8AvtP1UnxnP4e/BH06aAPHn5VLSvQ3qxvzL+AP7ndNeJZ5V8kG+cqr/7C/3Hea1b3xKAHxWgT59zOAnzX9aL8zi8FwpOU/V3P2N8D/Gj0v9/gPFkiac/I8mf9/TXncBe4/I9+j0A6jd+6InfHkB+r/TIA9dNp63UidbbeDwF/DaGgL5wejSID9CrjL8C0P+JOvESz++G/T/49wTFP+J4t9Qz3vDH/u15vdhRsXdApAr6d2W8gBObBUCf0l8PgfZCYPzypRJv+MRPEaDPIcme+Po5HG/N9MRH76KjhvGflcOrMJ4D+9qmjK9Br8vAnyr8+h3yV0L/poyPV4G/KFCNx7/2af8xjI9ydW7+P9sG+2PQP97/dAX5vqTyD4cw3k8MoP4G/ddxKBfXDeTB+VeOHYeqfC/AZw3o4wcKfwERrap/KkN/b9GLlbz9xaAPxsmeeOZJqK+gfYA4mcN1gF+Fqr95GP3J3QHisxx+FfgdCf43kMPtML495PHHd4F9rXwSxg8cn2rQn6rDnvHuBezfznvitfeg/YqLWnEaL58EnKt4SieaOHwF8Qd+P8bLB6N8ftWLMs//GxqeJurFUcp4Avg37U2d2KD0Z+iP7vLEQ0U4vlfxby7ocdnjenf/cRQHgip/+zTGT7d49PEc+Jsq4FeBEp+0oUksNz8c2B+/7GmvJ9oXjPcUf1WO/J+qE7co4yuoL0g1Xn8G9D0S+v/pPH8e2GPYKk88/j7k59wN8RCnPwjHSzDeilHoxfh8oU4MbM/tGcdzkTrxNmW+BhAtUfmbMoyXIX7oxeu7DwiNaxsgHuL5o2/FOVGd2EcZTwPjwg7oxY95/kDgV+0EnXiY519Ee7NCPKjEyzhegvgjkcOJaG8PBIjjeHv7MR6D/m83z58E5Vfe4hnfBsOPSJW/fh/9G/hbZXwXAO1Pg/F3Fm/fDPhP6xAgLuP15wP+BSs8/es6eL4Mnhd4/iygp2SFR3+vAjwtRS8e5/B4HO+rxheHcX4LxpuKvF8Eemvf0ItvcLgU45MyndiP1/8gFKx92zN+7Aj6HQLxYg9u3ykQN2tV8n8I7Udln7NB/8Oe9+D3M86XwfhspTIeB/mHva53y3MnPF+hmq/4AQhfc9Az3h6P8deLerEPh1/G+UuIn1/i+OI89bQ9Hv86CfCt2q4TUzh/MwCRkAxPfS7wN6IK/74Yv4zViSd4PDAWBFf1lSeeeRDso8zsoecQ8LcA4p0JHLaAPZQ86bGPMuDnyE6e+Pk8zm+C/ZQp/Ef667SiSbE31LcpnudlnP/4xqNPt0N9YYYAMUrhD+p7gqf/+A3kUXBaK5YG8v4mI3369OzsPEuCxZybkpjcJzyhf1/caxh+L6RhQkJCWmZ2VkKeJTHXkpAgJDySnzAuJS09z5KSG5WRmJeXkuepITnRkpJgSc9M8a0ESiRZczP6JOYk491+eGNG7vT+CNyPQFpeXmJOeoJyry89kZ2ZkJKb64Zn9E/KfTrHku1+CEvnWXNysnMteI+ayUhOzEnI7dP33vs9t6aneN/wVBMeJpgmxiVEp6el5Fkezkq3EJiZ3F91OyY9KzEjIWU23YqNToiaMDkhKSMlMcuaoyoVn4PEC8kpqRmQmrKSlZ9Ya4ICCOlZ7nz+U0mxXN8ENZQgPAPITkzJzUvPzhKeMeXmZuci+rNTcpNS8vokEWMG4p3Mp/NmZiRlpKdkWRKIX+ED8HZeXgYnEiWUlwcA/sphgmbs4EBCptWSMjvBmpWRnTQDZA58z8pOACDRgo17l6IyqUlZlgxqPCmHVwy/EpJyFCi1P/wGGYL28DuJOZkJnhtpKZaE1P7UkJCn+s3u51lyU4jgPG8QOZ/LygoZ2WkJSkZSztMEJyYlpeRY6Gdyel5OoiXJTEBKPjAHKstKthAuBCMaCQnTB/RLyLJk5xDLkswpmYkgykQPTZl5ab16cTApMT/Fm6aklKQMVhPRbLWkZ3AgLzEvo69be7OnI2pMCNk5KVkDyAiwpTxLdi7u7hXyns5LSszIEPLMmYkWITMlE4nK4XRDRnYSZgF/BKAa/sckC8vALbS67NTkxKfxOeAZ0IXGCTabmpiegSWTMnOETLCxzLy8BKwDfyNzsWbAbQbdyE1Jyk9Iz84nICkxKyklw32f3QPiE5JAGUBzEc7JzsjgVWUlu59EAMmbmZ6amagoRJ4lOYkYeS9pZ6b7V1pSUkIeaSpgnZyen5x+P/zIzE7GH8h0VjLh4UdB3MnpWQnWvJRkIQ+0kOicnZOWMD0RmkzMBJxmJFtSgNLU1AxrnpnoBgalzAbTNluyszLob56Ql5ObnmVJZRyE4ulZwIlEyMI7uUnmXKgXfiWDjSck5ORmp1HlqZZcaxaYRAoILxMIgyQpIxuQSc8VZiXmZs1G+SSBWQAWcAuAZIsAvCLRJU4HP0VShdpzUAVQbjnpydhkKsoPHssj5NHuMvBOAgiep6lQOA+LZsCD+DRotTArN92Skk9tC7mZ2GZCQups8NUWQC0/L4tTmWrJngGPJmdbLUJqjtWSRHRjRamEv5CTl5KRkmRhRFuyMxLgsZRc8HtofsjobLApxDYF7wKm+aCriAAiwppVWk1ISLI8nZOSMD2B9BU0OisVikH3kYYooN0S00HDc1jj1ryMlJQcwYqE5gmpRBNwjdqBTgDEh1IEpqUq5CQT99AjQdvQ5sw8ZK2VKUAKWGd+CuCBmsP7rczEdOI24AFoZaUlgCY8zWSHVHCyrWq6wRazAXOUfW5iJmTkc2eYkGeG1hKoMe+9+QkJCZYMMq4EwCxXSEzOSMm9vy/azHRQMMW3j386KykuG1py30ixRKcnYd2JuYBVbpLqGV6H0oHE5aKecGB4ttW7n+nr7mgSkG+56WlmdyMjUiwjgWEpucoNVRHsZ6KywXAzUmIyEtPyhGewAwC/p5SNQinwqidYPaSMS0FXo+CWCIzKY/iraVXyvcn03ORo8RteVVK7vCpGOjIXWkiwJE7PSCHBoXzRjymCzM7xgCnoX9HFg8+jknALWJYHSgKeC/Q8F/QeXIeQmURig2gGO1soZAEUgQeARx74QegV2D0SbEqqYMlEdU/IzZ6FQU8i8dJTHhQnHfofCAvyEpKzWXPpWfAE+NO8BCQGgqWUfFQzzDInZoGUE5g1YGcFqESnpCZaMywjMqDfyMjzrRoMOSE7leItdxY2lzDdmufBI5McDyOUOzOgMzEHbTYhyQz9qCU7ISkzGZ5KTQWW56cnpSSAP+LEEYuRxDzlTmZKbhrxKk/Fq/zEXHeLUJFSfwpYfg646calE/ISU1OUKtPzeG+S7K6EOfYEsnFfVBLy0p9xS2tGytMJYCTIR+XZHOv0jPQ8c0qu1+PJ1swcJjmKV9nj0/H5JjB3P8T9NhGQmw9VQkAB/M9CR8mpygQRpTemzS2tlFQSC0SQFEalkUtydyeKEqUQX0FDoJNqTIgSxiQoWajZpDeJ6CQhMs1Jz03xUda0JE5lXsKs9IzkpMTcZCQ3j9SLNYQBUALrdpISKLoDRkJr0NVbMp5OSM2F8BtFodb11PSUjGSQQVpWSrKXDYC0c9NziEioLSkxz8eU2M3pje8mgwGCL1KLwpyX4cU1VTvgCrIb2x70mD6uFvtn4hmROj09LT0ngYVfIEBLLtgD8AEb65s83UvHvHhBLHDbB+fndB+GevSYKSl2RRidKBGtJTENyuROBzA9y8e20sk8ciHkokAsM1mx/rjc7GRrkmUMaonClvSc1PTZ3En4soAZZmPdgbgHfVBqdq6X9ni8QFbKLOjAUrwcQYIlF91obkpyAvXk1Fd66oYoJCE1J8E8yxMPQr9tJgiNDhwb+BYwkwwv4yJJcEbkpqSoNTgpO3tGugd9in4YoQkYDvv4ZvQ3yKbcFC+DQa0hm+cdf1Ke1duiAMm8RDAzaBK6G2/9JWmRbsP4xqL2TWYQNjSflZLLOn8kLS0l2dunKxz3IYGNRdKz0nx7AJCHuygxQ4WKWw25hMBxe0nHy90TgVAWU+wbssjZK9XNSsyY0YQXJ63JhfEORLDqoZXayUP11P9g4Sb0iitRWlMukPeu7rKEI9frqOzklAlEoDf/qJtWoccHGPgUmHOy0gtaaZBNtosPYHaqJzsmO3e8JdfNbqZboOBuBnFfk5Oek4JK76YLY26KiAjpJOyyvfsdPt+h3IVRcnrWjMaPIztYX67ybGrOMPXnIzlvBlBhXz3JS5mZMD3l6WyP31D6ClXnBBwARpMKuynj3RMyKAMcfYYq4mFBQZOxjSoYysP+sZGzJi7m5uUwTVT6SeoxsqEEv+GxlqbigrxEqAQ68eRG/YovjXnW6V69SpMdrs9DDMskr/7ELR8cEGei8rnlqOpeFBPmau3t5L25lZENHQRpoBJJNOIU4Zo4G9ACjUxxmx7ebok873pUDMqB0AWDEK+IhpwTaDnTNka0d/+C3WVj60X6stRdCyqHNQvcQZOho6IW7viMhZIKiFEYNkReTeV8US+9AzCskkUgmTPQE3h8mXtYAA3n5CjuFf0TBDJ5rJsE95afkusdSYJjzPQWNvO8bHTaVBTBPYu616DJCt4Pc6PFrthHG5nvgbvpybMxluTGDMaagsMK1g+zMYa3aXOD49UxJiTg7IHSZhrv+33iXzMEUXwKTDVIUIe1am0CGwTj9yAN3YpbmRvFXYrKJ1rMyugqHjvFTPQdCqOo50uCIaZ3H8sCEI9/a94iQW2RTxgXTIfgz+LLUY5y4+7da4CA0Zjv8KeRRsIok+d5phVZ4EV1QJ+em5hkacod0UyuO1b2ZlN+RmqmxSf+UqsUPJWTmAtRCrpE8rvekse+x0cvUdXcWOdkWLNmNKWk3t2O9+CSa4dXHDjTmoLuOzsjw5rjicqSUyzgrtwPAtuzsT9qbBqNBhPJPkST0nkGXU3xEX426Ty8tT8dbT3X4tZA7gOnN+kKrFl8oOEztMGOjQ+h1drsjsBJuyjIUONJcVZjX+gJM72x97CRRpyN+pIkNl3i5UI9teaZM9OTPVXkJmbN8ArKmHERunneER3IO1Pdfadas5KaDsASZiPPvYI2DNYaRVEJWY041EQ864UEhndeFWckTk/JUDtzL8eempuYlgmy8NJhrCg326dDYjN07gG1Mpr2MW+M6ZBWgpXQ0RPk4eBovHU6xHoCzuUhwjTY862GummmKW59w5k7shZV5OQbFvKyhKvXZByMKrm3jE3MneGlXbQsoTh08Hrk0HGqeaY1Mdk91e4ZGXk7iny+xqNWJrdpKNqkslKyR09Ix2NcikSaHJwyipvWIrXhurW7JWNxB4JpPhEnxCjgDlPUfaiPL0JErKoJmMZ9h9vLmTM9ASdGwXwETje8Qt2WBvep6XwolUz8EJJTplvTfHtiFvh41MGLLNbJo82qDQtnAOEB0IkMGLpac7yDROYzsU2KCaCba2KkYqK1rqY8JkpTPb3atynf6BmpAB5uP0HrQI0Da48n9TgCdfSZwIIFJSrOcS/jKrYH1gaIeM1G8G6ILfQoi284VpvI7AA8ddIMxcB9dZsznJaM1JFPanNRG59aSbEo0yvcQ6o7I/VIBmVIAbq3nfHIdcToh4dHJfS99373rzD3r77uX+HsZB3lP3+4tPw3S9W5foJOle/5Tw/3ArzuaOGenlKR4AB3SXUpkedivlbVrueub/tKGc/dVrzW1iocRXdbvnj5CZr/D//5/Y95/++///fff6c1N9KmIQHsfCzc79shPb2tAHZwnp8RgPm1gic/xHKhNb4JXyt48gu0nnwjPa8Trruf9xP+1rB82l9J+a2FgDvYPVZeqyqvFVby+gR3edFdvh3BeqEdhxm+/oSvpz4/d339OoiifqAgDMT0N0EYjOmjghCJ6X5BiMb0bbY/UwfpSIS/1ND+JR2koxGu0NB+LN0OjTAFYDwvbBqm4DqSMfUXBDOmgHcGpjpByMFULwgWTIG/szEVBWEOpq0EoQBT4GQRpvi+D6aBgrAYU6CgBNObBGE5pgZBeAlTIPA1TPH9P0zbC8I7mHYQhNWYBgnCx5h2FIQ1mHYShHWY3iwImzANFoRtmOL7f5jeIgh7Mb1VEPZj2kUQDmKK72tgCjw8hinwuhJTEPApTLsKQhWmdwrCaUy7CYIT01BBqMG0uyDUYnqXIFzA9G5BqMO0hyBcwxQ3kgVBeg9IHtNeIGFMewtCIKZ9QI6Y3gvFML1PEIIxBQXqgin0MyGY9hWEUEzvF4QemPYThN6Y9gddw3QAyB/TB0D+mEaA/DF9EOSP6SCQP6aDQe6YDhGE0ZgOFYQ4TB8ShAmYRgrCZEyHCcIUTIeD/DGNAvljGg3yx9QE8sc0BuSP6QiQP6YjQf6YPgzyx/QRkD+mo0D+mI4G+WMaC/LHdAzIH1PQ0+WYxoH8MR0L8sd0HMgf0/Egf0wngPwxjQf5YzoR5I9pKcgf00kgf0wng/wxfQzkj+kUkD+mU0H+mD4J8sc0AeSP6TSQP6aJIH9Mp4P8MU0C+WOaDPLHNAXkj2kqyB/TNJA/pmaQP6bpIH9MnwL5Y4ovKnWENAPkj2kmyB/TLJA/ptn4PhukOSB/TGeC/DHNBfljmgfyx9QC8sfUCvLHNF8Q4qXfbDWi0w4m5wwEe3OuSPMTDuwRGvpPAM1r6D65A9uH3dAdLRnfSBBcVQ3wrztatBnzXBUEo2Wb0aW4yghGCzfjFkfXGoLR0s3o8lwrCUaLN+MWTlcJwWj5ZnR5rgKC0QOY8ZUYVw7B6AnM+EqJaxrB6BHMuCXcFUcwegYzvsLkiiQYPYQZt2S7wghGT2HGV4JcIQSjxzAjQS4jweg5zDl0zBzB6EHMeKSfq7YeYfQk5gKin2D0KOZiop9g9CzmEqKfYPQw5peIfoLR05hXEv0Eo8cxryb6CUbPY15D9BOMHsi8iegnGD2RuYzoJxg9knk/0U8weiZzBdFPMHoocyXRTzB6KnMV0U8weiwzHatnJBg9l7mW6CcYPZi5jui/jvApkr8G6Se4iuSPcAXBp0n+CJcR7CT5I7yG4BqSP8IrCa4l+SNcQvAFkj/CBQTXkfwRziH4Gskf4WkEo0c04yuQrjiC0TOa8fg7VyTB6CHNkxEOIxg9pRm3yLtCCEaPacZj71xGgtFzmvHYO5dAMHpQ82yEa68hjJ7UXED0E4we1VxM9BOMntVcQvQTjB7W/BLRTzB6WvNKop9g9Ljm1UQ/weh5zWuIfoLRA5s3Ef0Eoyc2lxH9BKNHNu8n+glGz2yuIPoJRg9triT6CUZPba4i+glGj212Ev0Eo+c21xL9BKMHN9cR/VcRRk9uxujfVUUwenSziHAFwejZzUaEywhGD28ORngNwejpzSEIryQYPb65B8IlBKPnN4chXEAw9gBmPFrElUMw9gTmSISnEVxA8kc4juAikj/CkQQXk/wRDiN4Mckf4RCCS0j+CBsJXk7yR1gg+CWSP8K1V8j+Sf5EP8ErSf5EP8HvkPyJfoJXk/yJfoI/JvkT/QSvIfkT/QSvI/kT/QRvIvkT/QRvI/kT/QSXkfyJfoL3kvyJfoL3k/yJfoIPkvyJfoIrSP5EP8HHSP5EP8GVJH+i/zLZP8nfH+knuIrkj3AFwadJ/giXEewk+SO8huAakj/CKwmuJfkjXELwBZI/wgUE15H8Ec4h+BrJH+FpBGOPaB6JcBzB2DOa4xCOJBh7SPNkhMMIxp7SPA3hEIKxxzSbETYSjD2nOQdhgWDsQc2zEa6tI/tHuIDoJxh7VHMx0U8w9qzmEqKfYOxhzS8R/QBjxxn+55PSz7bTtXETxpnx/UczvhQ4dqIZ98o7B4HRXSgpgf54vK1Gi35ZeKJwT8GD/oK8rAbqsx+x6Jwx4JkmP3FgTwn942ULhhjxZSnrQ5siBVHsMxj+7Krzc0xuWBUI9yP25N/hWIevhgm2Ms3beKshyI6FePYs5z4dVqCx7dU+MXWPw3KX4NiGr8Lx2GBVNJS1l1na0xGw8KNVuTYU7zVUKIiUuPGZKO0DlIySNtT5JRBkqxMtrWx7jeFlTzx5YE/4ScOGwPsdwyoGt3IM22lYsXuwzrCirKjCEuAY9uZg3azjUbarovUklEe3J+AjDjqDVo1P8GqNoWg6qOUqfEWrPDpUOzoiQJSiQ8VVOCbBlqcBvwmAXHqJGEthjYD4O0OpcKCzzTVVoR7ehWZH8EK/X1UV6uVTk1Jol7rQEO9CFUqh19SFensXMj7IC81SFwr3LhSpFBqnLvSQdyGLUqiPutAt3oW2KiwQW8BpnVLTr1dUhdp6Fzqu1LRDXSjQu9BppdDL7kLaUHyVCG5qnVo1Drf7PKngkKCu/kHvQtpBvNCDV5qXVaRSqKO60APehTKUQujvDuxJLWlew+r/+Rca9sHlf6FhRZf/hYYlXP4XGvbg5X8h8o6X/4XIa+v+hci/qvsXIn+vrgmRt7v8L0Seoa4+wocviqBG1KGgpIse/zBJOsFcUKAUWysH209ab6ruOf9uR16g/ESg/aTlNtlfmhOqRRl+WIf+SbD+HF5m2xv4xJMJB/aobRLP35sEYraXSbstN0sDZZMoDdfKplppuCjrpeGBUqfqL6DgH+cDROdNoFbks6rXefvP8dIe8NCygA26LjQ0yFHU9o/wU+oS6jwOKbrdA+R2Ffy/Ge94vcvZ+obCmi4GjSDZr8EABNlQodcQG7BufHoyVshyTTXMOUt2ER40FGE/L1lCtTLBjtdrLkFDZSHY9p1AFGSRYrd9CDgJNY2BbAeQNgVYAw3JpfiUFBTq/CAWazXYMa6Wp9baTxqK8K3Swj9w8qjcroVihM12I/yq7i8P2oyHOF2zlXeUtgtwS16Pf3feDu2cf89gv8NPeQqZJT8RBCIJl9fjw/aL1tayA7PsBywbgU9yB3lUICDsMNXYdgc674BBCT1gPSSbapDSOiDcmu3CtzVZNyHTLTqt8po8WbtpOFJXLv2ILa9hKmQcAfcgDWxN5QPPEme14x5iBi7Hi0j1HeegrVKsTB4XaD8i0U9DEZ4pzm+3l0qVZ/GUH3zo8fOoLIaifOisCwYKhqJM+LFlINS8mVR/3zXpBGBC+a6xDYrotmpIcIYifFu0cC9JvJK0sUTeTm3NIhE9C2KL2GcouiyQZAPl7QoCUxD5OYC8iXzT9LMe5EX7kXnh4Sd5/y/PxXJanjlca9ihDY7CR+ZD3ayxiARxfiVUpLbXRMh1/YnsN9Xay6xtqoN5fVKlPDnI2QliEvtJaWqt9W9GUfhJ1JhwoNARVW+r0xgWdkdqt5NODQ51/nYLI9gAd7f6+1LNNaY38g3dCrLsADThcsEfUFAjEu8aVs8MqPP9WJd10yp8/1d6HZvAqjVQFkg4C37IeQRtjXJcZ6DP97bPSY7tIZfrG9BnFNYEBgAWpYGXm7A2QPtMLZhQvf+8CHJLeGYEZtMhJyq/kfQQ900fgToU7qUqGWGpJVAL0etM6ktYVxHWyCw8KVHWrjcOCxBJHyS7EbBAiyRrRAAelrWlIcOoeq3T+AgzTHzHmhumg1Qay8pae28saBcBqB4KxmQrC0asZLrj748IP6vovB0pRjXo8TfJGIU67CoXquVBW73Guh39FliPHBXoW43bdIhxaAg//9XQUL3RkS+En0S+XQxm4v673i1uFVcUKfUGdrmgAh/5FNY4b4Ky1muO9T1QfabWKaKR9riF0y/UGQuoY9oqnEJUAzUE+mm9Jk+tO7CHM9r6ICiQ6Hi9DtwdPm3j7u/Rc6RaWqgh/KTT+hhJpwvWF0HIW9dUr1UQtUHZ6k1rNQBXQT/kzEP4WAmhPRqqPF3bMPMaatZOnEWaOH5sYU1lVz9B1sgPayX74B+vN6yaGgnNOgbCT8l0aFUiQqajq1IoPbEqndKTqzIp/cmwQTcTfhWbfpU1bysByQuIOEjsvT/J55SWGTaAQ4yGGh3xNejepnVkPecrqAYTQHCsudHYIyAO+PDDf2MH2CDtMRThNJKtru2sWDoOX9p19PdL+/C0D8t4e4NhaRSwudV6rF0qr37D3St39+mVB3PN/wwMhfghE0ZO0wUyRizmfBfavLSvIEAQrB0u7RMGQhPfsapdw3GQA619C6KTh+D6AWpPEVpd3UOGRU/rUKAcDfBiu6r00k+OIt0F0FSkZhRonasevRS12l0Q0Ywi4afB/hlW2RGXKKTSkXCHF8FvQQzBP4YifEWb3y2kkVKBoagDIGTbjtzyNxQtBh4wwM9ivEQlsQs0FC2DDA6HADWty3VB/GjGi3QXRivzoHlbQ2vDomqcWAvdfhrkKRMiFDM4LUjCHpmQRZueBFVyjbUEAueKUO/a1KI/QVWSKh9D03EkXtvDa0Ff5LyXaqnexO+Ro7mF3XvHYQ/9rQmvBmwLgrGlo3QCPNEoF0z5YjUZCp1cgvf9mahR/ZxXQJQO+zrwtA4H1v42HukkBYY67X3IZqLljkTDEYP9WgAyQG8ouoV+BBiKyumH1lAkwg9yeQxFROmLIOYwqhWH4foZ/UIp5jvW90PP35/aCgr1xdlpAoSlWmfuWdYXT9BDxYQdIlbTmxD7SB5CiDUQc8moPwHlcbx+4bwnMqrjrqEf5ijco0U2NC+eih3QRqewePKNBHI9N8m3Ue0nDfZ4EcmK5pwPYR03lR3jUghSaqE2hwRQ+BFt5jW1pZoOGOxdsabXL1R78AuNZPgt/1PhP+IBHhfoXDeB9Q27gbesFaw1qwO7+wEw0LX0uoqsRkrRAOiB3/kdePCg3QLlreEA/kGgFcE7AXQSmI9gBwBdBM4C0FD0GbKdVMM58ApqoOuO6zycJ1ljmxN9hnGK98gDhXR1QPSmHkIC33aSKItxphTLb+Sub4aLYnM7Kruh6Dn8vAgwAGragsr5tRPDDzRXlwE7fUeTGg68CnK1xIiLzib1fw/pP1qO/cJ1xX7e5jrptN/DGI3T0B4RbvLnGn9V4MZwjsJJxD+8DJ6T22IFcin5zLOgihC3EdqI5mftWJ01QIzrCFg1dzlgKgb7XDeM01MGe+ZVxQs6D/zl8b09z2BgiO0hloNAcWQHQkqsB52D01qNj47kPcT7QL4rF2sz1ZDgdlVp5QLet2jfeMhnVOz8HYpPvsr6Uqh1CsjUGfWHB4P3Xazf/ebpAIwwD0I+szrn3GomzdHQsvVmF55MDPESq2Y2mIXz2u+I7mgmRS059y6hgLLo/IUUwXrEYV3nzP+DwgCKkB6B+9J3ssa2S+soaaivr79U0XV34S8F8M/ikip4f7/Laby0u6AA2BZd4RjmZ4jeLxyxfeff8zvH6xZUoWENSKJzezUOkE7zh+jWKy4WcpyDNuX405vwBEb7EYtJtp4OP2DYENS57Iy24ErrzmW2qu8c0cZJxUWtsAjm2H4x+OT8DDnDIr6ZVe5gpfYxfcOfzO6BDyuRDxd+QwGN5gLq9AeFweiSsCiq6jdsgKP9CXU0H7Xb5GQKisiz6BKKoQocfAgUMNZpPyA5+pEVLQaNJR29wHXU/ozbvaMWfnQ308LpaM1K7GoCWclWp/2itJ7VgoM8Z5fTDRgt3CJT1fLMICVfsjphJIXDydvRvN8BFTPsmODfIAdcjI7TiJZvmPrJY9BRMmtg9un8oRYZ7ZRKsZrq92RKYRhDgenwQFUwGuiI6kMxKek3Yh57GpXYKdnpGfbkuCAc2hFO8YCT4xpylnKCEbPWTow8+uQfri5VuolFaA8PXCNp3A8OmAYBzpl4d2gd3e03hEfwzifw7iD1JONd3h5vjuLxCkGIroqLpGCY/2ikMgqAhzzd4u1DGfOP1nEh/aAIaVud4uGQVP1drBwuxamjCKLgC1RW02mwl04uGnSYTsuRQWB5ptOGot/oDHBbWaCz7xm0KcvPmC26/YEiDWzJtivQORoigOrtjMnhZdT3eDmx3pDvCq3zDMVGIKXnLykeF54Auo5Db+pqf9VTqiuW+vA6R9QyiqH0Jpm5JQxMzSNzGoz4KZKHYmwkovi4Sb9QJQqF1vXhJ13LLykOG5rHMtj8/EtKf4y39oYyDuLdRhy0/U6CYkaBLZ/hbhB5/8xg9mTbfxTsQwl76htojIO5f1/wRuuUmh3lbVj08yeOuq9fJLZMg4bXapwi+tdejJ/73Yp2DjyCqyO7GzpUuXsK7zYAAd7z8+NtNUHyVHS+FC5NrAIr9XfuhIqlKPS1uD7sDMG7UaIjKgjVduAw5lAieZ+4+2doKopCIdveoCdUawDxzngLDO92fdnVX5B+w+mIwlOdBOHAHj5fEO/sT/kfevIv+Hnld6T851h+vCgX4kqkZIQ2+PwYPOSI05Wzzw1EagWppBjMQipZPBTrqW7rux6BUxlUuDySOvXygkB+mP2+SFFocn0BBpuyVYSRplPOA2z2XAvxFxwLC+zwSIxeKI+h4G9fjI6Ykd6AkVKMLr3MCPU6isKwB8YM3MNQHkNbJ8pj6Psh4WUwFIUBKRLD6fVp71Zqb3FL7eEIucn2jP9Dex/lYntdWmpPaq493MPwL9oD/svxgbLYIBRPEFs15jcK2W9ftF+rtpGSXwP9au3RB9BXh8loq6EOVzLVyaZA58WZiHTaHf40OcXmvGQb6kmD0bY39Anv+WBbDU3cTr0gzb0mWeucm+jpnvC0PNcYsQmpdpTgXwncyguoS3OfkGXUWnkZroXuQG2R9tt+CbBVBUTsnhXusA1/pKGh4EAxDgfOBVIQST2O7e8+DRQrOGxV99EvrXMQam+tPPWCbK2T5wJnHGvs0JbOXgo23lBuolU+yVQrWWvmDUotiYivhUBrVjC4uEELUKPz+g8y1eZ1knYzthk2tAYOQF9bHKiXKhqgX4/TRMx1Wsvl2NPhF3tGSM8jAdUOLwL8vQgwLMrAqEZNxPWmiegRxonACN81AJ5Ce5o0cbzTkoM8/O02f8FW01uON8rWQBjkFeEXHx22KVCxYxlWE96AlMXXVHdEd3YU9yru05RHzDUailZRz4MzedqedXzeVfZDter+I81JWA86X/0BnKRou6yV5EqgxrLPdrmNZRcjSrYhgTRXoRCW39q2t7dUS3NK6IlHn6RQ03gokPrRIJnm0gLl+BqHrYCTJk2AlqmqwGJsnMIfdy2gN+EX5UijvWz+O4Dsy9IJwFKzoAyGCO227IW/4RerZS9W+/mw+qkGhsOxQCS3FvjtRuEUokBMJyyc7byaVtsr119nfRZyPbsL6D2psq0sBFTY6q2t+kbaWusRtLFVk4IeHM4FjQGQl7aC5bLCV/qwuB13/0iDmTVOCDU6NwKTQcgjh+AiQP7jXqiI3qi8xxiAeHR24xHE8PPFaLaC0VWIClzoYpmUwi9CXbY6vWFhPCkxPos4zgkNxnq7tKK4aimLnJQaJ4QGsVqPKbW+i7Xi5I7iD+uAo+ASgZ3I6NJMZLT+VmD0HHguppW/nnkaXIxw7gUF1QxVm7TPevlAXEMAf0O1OkdSZZtv8QfjHa6T5wZxR7rOSI4Uhg+TLiMppx9hA009m88kPKcy9dGG8DnO/1zBsMFI9gLI8FIP+JRadAWn0SzjAXlgwQTorB1zXVigjRL5Dw511n+Hkcj82x224L5s+mz0T1A5UbVJpKUCII1Kz6ERjxP3uGE68opSDvx9Y/r5+pUzLgPp3tUZfcRgw8b4kFQp/kfDhjhd+hGif7kf0R9fhfHWhDokrAqnNhxWF7bo2IqII16TcUYvvspNIRR/9zIWZ6GeSWSyqcKyvRuXfZrKdkFJunlAjAt0XqkkHkxVa61KYYeiSo1phT7tP7FkQ03Yzui+XKfGQjvEONvewWTCBFSfZUhWKfM+z11vhOEJIj7YBzuHzXAv2lYlDTUfZah2bwbVZYjq4634TkionwSHTUL9N1Mg7WkSsEjGJuPBJVaqW50QSix1/nKCGuvZdGOGRXdyr5aCDf5U36jB93AcZQq1Of1sdZr8UC4bI5FpxLILMASTTUHScG14meur+kb47YWw1bDR9GNTUou+AXZF9Qy7HMRuWGPsRJxAMaP7yEd9he7s3XRU1U43o6qGyNYgKOVYdghEjhMim/3ZoK0Ln/ELFtgsXpBsxe4L+z5ajLNiA6LzCu552RtCO1fyuT9A5zKXuwTnQGrsg04QfwRg8F87u6dhw6Pa8gCMXwou3zyrlzwCepx5o2RrLZrbP8fY7Bd+cjf8ADM8aT8ZXmqJvFbFg1o3DxbirDJUs2+EFkYS89fLa/EAf/tFy0eGDSO0m5EEx7KwO9D8nIZPd2kqkOeDQcVsi9ZAt6axrViHX0QunFuLq7SGJXgscsPS1+CebDvWiY1OdlI4MkLrWFuLKAQtlBdhAc1wEe8SvJLgQHnFx/CD7gbC3dV4d1hQu7HBMjXjzqCmh3VpNzZEXrFNnbGJMkLbje1Bt1Zg10sZZZTRu93YMHnFQfUT+ymjX7uxA+mWdqEcFxgRZ8zzl+KM/E7DyED8tQOZYfh0n7/JiUz441vQl9ha+wGDNAejnudQf1RM3kyjcg+nF82g8HiEtvAbPkNoPCoqugqdW7tRjTu3KsVl3P6P4kmpWpSptH+PYcMuT2X4IStVTf0a+Z/XlMoOw5DSJRI2s7Rb8CBYhxx3MzwdWyPVGj7d7QgS5UfibJc7GJaGoyev3YGHMTcMjwPiZWuNZj+QXW6qRS2UAhe6OkCZVCXeK0pFnf2nA/lyjNTmgkszFu7GULawHINnNsSS4ivlAHlFMZunWNIRTMexVGtEDxoG3Vv4RSn2mEMm5MEnxJ6qHiDHVg5aSoGuVYaHTZU6XFOJ2J3X3rDBT44NLNbeVPBga0MRflQ5JuIBwxIMHIcPij+We5RFBCweyN+IzLq7LXqVKhZinYI276chMQ8HWJj14XkUMG80V27OieCuUKyyl0+VFBNDPSyS02KcOfk8Wvxg8hPo+EGEjhU6I3KjQl6BzQyKrzDYcN8rY0bEl8AGQ9FJtNFFyKuICsMiPDlXth7TNRhwRk7sWdHzeMQ+w6O18jAjshI/RCBrUkFAEJSYauCuMo9EamCqof12x2k/i2FxXz9cl7KxHSCivAiRoF5SCbLLjpBTWYLmDcG2wY4fvQZ/5bz7iFfMbSh6EJfALrcxFOFqvjr29jib9/mHLLHnk/azyBkpcOQ0MOyX4sIeYgKc00KWrCF/A01VL7DVawxLcGxTMCe8oa2h6CMkVG1wei+Dm/UqSmUAkwozE7dsZt/vnvolUe88ywSj9wgG5dXvEFlMENNJrK64rVe8SHaV3I/ZlXp0kMUr1KgkPVwjxxolEqMjRtMzQNKEH3Cdpx6tchDdNhR1QnvbLZEYXK1wJWsR6YepwnUS+mbSHNdOfKbp3v1HD6oPN4HqGqDbNeM6W+/6C0dZARpqC4fekSSAVOyRA4D1L2sKafjyPPpQ16NwezOOWVg/2Ywt4MsCDAMevuPXcpoIhWrv564oBrwIMcl15npz1eZ35JtVvqtTCm+/7tPOU02304OLxvkjzj5uag7tbg0+1Tmaru6UMsxd+rfCjfuv8/Vr2n+wH2VrqgXu4eBgdiL6QtdN/nxyNmcXPE7jMazbPmEXr20Xhslzawsb5qPxbZ8M92eJ+4qGYHlBtiNsL/MZvPk1Grw960F/ZdOj9DKFGxV/+U41LLsZIkh5PaJUbp8Gf9ESrkknyCLOv2dYsdvwQln4xYG7LeWOZR1UZafAX1wQYtuWTpx/bwcGYKw8lH5ZUax5ATQCry5uOg6Z9TMjQHZgtTLxwNO1fR7opcr9QtnOg9GhwRD18RFbYH9O3Pk/QcdvR4mygbF6fwiTTw2XT2UCyufhtop8MpqRT1ccF8ytaSSfDJLPepLPxRvK5zmPfDJuIJ+wP//vycc6ublIEE9wB+WFjkMZ/Tlst9/LUHLY83exMVbIVzzssQZAybbUF9W6xqDLh65+ktF+ZF5rEo8L+4NmpP2jTNyVHR45K1JF/tiYvIMZ00DOQb6sKlKkrcMV4ArayeFbI9Y0K1CJsFqobLJS2aZqZV9RPtOXySKxhMfjq6eivnRuo+hL7SWmL/aDl3gPwPzU2YucRZKjAnJuqBkvezRjyA00o1N1I83oTdJGFMrtp+BvANeMAL4f7iiF8D1UpSrhL4p4cxvFZgPVNvumY1k/Velj8Be/Sb65FS9tKMJvN7HeTj2VZK/CfaNup8qmXZC2QgfmoEjk7cgQ2XGQ7akyxnkb9pzQYEavdgBJqgs3b61MdSNvO54BEV2pxwiR9Z1N94M/u7kafhEbGt00XysUye9wQbVvY+er3h8M8ey6J1Dm3Vv5C4U1U0Ab7Ee4uEv3418HDj8tgeX0UeNy+pQum8V2OHAXLeOh5NiG9LLPCIOBUWEcMCqrw2UX+H5JyY78MdgXYD3NK01+XwrP7GUW0rft+1HfcJ6HYcBaKtyL+PJJwtQS6Pw9apbdpmU1+9QJ3eWr8nrE27F1KGjDZvzezjXcHDsetw1ssJ9Dkkz0pnpRmaF09+AQQ2lZ+IGiCsudbD9XKT5s2BDdLmCYp0BRhfV33GxtR+4B/nGOYRThfYkkrGc3pV2S3lB0qz/NgzpKsSHEdQLbbuy8bx8aOxaVjVBgn9YPy8mlKAnJTyZe+5PhObbj8qH/3FqHtUYiHXTmliuCkNaXXaJQUyuRiqt36rTmuzjXAVapgNA+6y0yFcJ4t5OhKBa3Z1y+01A0npCskUsp04E1MulGNqpuNJvUSdxPJJpqrU+pqrSMg+rAM6uCZhZVe7zzrTgPsh3JJmuzNxiKLl1XmCbrmQlCA2uAPa4fMKcUKY6Ir7GshhEYBnxO4b/Fdm05MuCiwY6Bu7yenruJWIAuAFlgp42kzeO9aCT1DDUYTv+2RwmnURV7bq8iNMiy54Ctu5URNXRbG6ULmvIA+YJg3xC7DS5wnqlXEWooyqMpLWMq6IGp1lbmj+Wy95F14NZ8SWMoykVMySxRa2IDC/fRis76Ux5z1djK/OQdeDui3LAYPyzGDRV10Hn0N5LgPoN9Fm0CoAeLMXy3lekkcq4RuwwL3sIxG2XqMIKHW4vwUy+yNRBNVS+3C7+IquuK59uMFWOLvpeH+WBsltmseDl9Qxs8GZm3685r3n5vRyuftYQfaReOMoVewIw90sP6Rh3gAG73G08DT1fS0+jEoEW2Hkpa4vqQtgodZPIiZiB/95xW+JF2labYaYchDuvqGD/9/bAV/whk4hxo5Bc3Awfg5PoWLxHa/3PNe/Doq09119z6VLrr3+vTMrc+vcP6lmDXR2gkW1VspKCyztPUiivYg2HdcimKtfBQMQ87sca6Nl591+BQz+pB4EDOz7RfgUB847JFcUVeUYvrIBMXam+zAtv2AG9Ajw38fdnNkgVl/54lq90sEbiJuV665g6bcb01NhBX7ExiucnI5mwCpVgx/MgBGLf+gNtIfNZnJz55wPVFnWc8ROt/E2j9T8Pmg3AwgPuAijriJEJ8rcOWOZome+Ir2TogTvbEn6rumlqCZYvWlPhpaAqRvEy8GBORKxoWVpIfq8S1E5wxL/ocS0lBbIkjuoG0q9yyo5nQ4D3ZVCXHn8JpGYw3LKG4ccFo1al6RPNANnVDFb79MzMHNzJ28jJNDyUXRmkIUZw9vucM03NL1+YKf8sceXQ9TofUsdU8k1OZpvEElPhOP9Jkjae3WSxvNEPaQsZPrkgLdE128nERXHe+rELlbJ6WRf0oglPVOK/pGgOVGmdXKduq43Hay7BhuJYmTXSqNTysrtHMpFLBA1WKTzedkuOreLOz3c9D2f1MNoFUPgDLO9Tzj9pxqG/WBj9ab0bVpRBFHon7KotWUCw8Lhbp4svO8TWOZU5sHxgff7q6oxxfaz9iMFlrJWstPD8iYraYn8Tl4DzPJfq7bW5toKWqGTFsk+NrZJOTaRhp16f+jIIJOP902t2VjPwJwqwl/H0kpjT//MGbCG1mMuRmChTdCNba9vZm82heLN/or2I50tssy3GNsvoj4p+tZjYMc2i/B26BCG9wbohDbt5dDyGWHicB8aPg8hij/cC8BzBUEFQ7XWU9cmg4uOSCg7QQo+WDSJbRkyYxZreV6tRrxioSd2q8x0XHHba7Rrk17zWxSc3rN5hTUf8DUPG2Y8dyXGov22yg/vMjw4Yx2oLLN+eHqN28ysMvxBMj9sVoIdamVY8D1lsNGyZqHVvXdINyFbuqtKm2OQP9BEPRRqQwhuZXo3GdY8M8rZoBfJce7fC7bxuL8PYais9jc1fKTQfZhozdUKGjyJ8qN1XIcytk016sBZ2r8qJh150NDZEG+3RgqfOLbRgeSuWqOdbTGu9oy0MKHr4A9e3043GgcwuYxhIc0VRsYQsXux3LcrqiF9/EVnHyd6Dpc8I7IuFeJIdSnB+jVZ72N23Cp2oBKddZWjzYxTpElE+qe/EBhcaW/ZtefJhwCp4vRhPfSk1DHPsJjri34iITeKeb0UJxnQgsFxlTbtpPfc/cdZJpjTS3TIrfhlhtZljt8jeV0fuZ2xGhMWw1Q567RtpP6xgD5eFxKLOewJyR0vA4LLIJi0hfGj6tmLGro3/0g3Hy4EWyab+9zNpbWbKy3CnHb5O1zzVEBmJbgAItumgXeK0NqVmzDpH4diu9lFJcwcZ5fPODg9YEtM67d9K0q/QCSMi2kJadbC/iUpTQsASXw3DAcf9mYM5tLXQvQVjcdNA296C/wb7lOl/HAcsocS7aRBwOlgNQIMcDFIEMa2JdqWhQ4ynrrd9jMIbvze3fyegq58y9vgXji/32Bou+YQmu1DUsRIRtC1czIj4mIhZijusXiCCcgVvcMZxICulWVh7Nsf4FjwrBoOXrjUrQgrgi9nsCGs9dOx9sjHMA4vzBVXTnwzzO4nBA085ikLL+9R08tYG6qb1swkuZeNLyMRBfLaFtwnq+9l6+lW3IvEwatlcaGt5Ah304Bg90jNDiOyrw7Ai2cXAE8wwjaFBFSBctM/7JZjA+3c7qWeUzxleL2V+jsr2dOi8DzN7cfI/9BkWsKr+Z37TfXM556dxXiSvc8BQXpjSUixOI6wC3U8sD/ITU8hF+vb5y/Q18doZv8oi2aanO4lK9tN5XqlVNSLWiCU0MR6TCSKoDPaRMb1qqkQopV0/AU+X1SlhK8YC0b7zz3MPYhyVd8qMIFAO44j/8cIE8vKFgnh53M9K+utOGol3kpWP02EXz2QbWeS3eyOYlDEtvQ7/cZyP5ZZPTdjlEcczb8dmlL9GouBW4NPrRhr0ADf47tcRQ9GCzvhsPwsEF/LqfaFKkS3Nq8R8N7yehK5Iu28vmt0d0w49oFuK6d7sXcSncvSdTD4/izkxlk4ntcrqhaAOhGUdIpRkWZ3qmydVrpDCC5BuEUn9ikafBvoDjeOwSv1N0uN5npHbZo4j5NBB3siXEP9cy+W9prfikU02MaYqHNNaEu4/DvcuuHrSgSG1UKLu6xtNSE1ZU8CXpx4etBT4I8FYwJUQ4+S36Vrd+oIpOWMtdpp5WGVqrt4Q1g2U/jqVzMVb3Xb2bf7bLWQb7bR7Y9RHfXHKwNfZrp9jkG4tyGmtxkYJlfwVLejfrc8WETvFFvQOtG5tQZROM++sYOsbrbBtW14uKyAKuK9vjuHJdlkyqHQpl1xWeFsbWKl37S60xOK1tEmM+5io4RmIqxNpjAiN2SaYaQ9Fkn+G1J+7Kz0Os2vzAliF7XW/enxmuM7IrAQfXxhb0TX9dpW9zP2NPref65pKv08ZkMOwa9xie4vKjrdkexQk0vdSlaZGHDuWyefkoMHVYA5uv4eON5Sb0Lrrz6F26yLGiYcMwnWHDWL2ydU/ErWuOmFZS0eECci9j9eBTig4XUcisGQYBxjB9ZPEwvfwi7nSyH7GMxtdzl+9yl47RKsVjtI5lI+9taFA9pS47TF9etKuIDtwFdRwW6FeP+cN0UE5nmxuosWRJ+yGmxzNaaIRxixfXL6nGGK1te7so41FbhWfauLh1k8pboDBo9hFc9VYeDW8YfMesxaqqfNfjkH8TopF/X5xVxmvO6CuKx/mFBmvYjMN2NNY92yyBmGGsZKqBkIDGbafl4fRu0QLPKOrT72809D7hGXr35vjJtKOak7rUTxmxBbFdA07ZdNo9J7D0MEV60fXQXoMJh2GDhosG27wGmiogn/czx+AHW0MbS2UzI8Wt1c81p/p9GxS6Feb7NT1nrzD/agVo57VGg++X/FQjwaMtjQS3YAXOevX8jXR8vPPz4SihbrUkIclUhSrFtXsbaTcGrju+8dqVOZj5hf3HVNtNoVRwhZs/3zHXRpsyeelXfEqfOURbNxttdqTdnrgSkPIpbe+b3NJW4nCHzeSZwHi0aQV278zceEi9sxoXB8IvKttgrx6lgY0zD8pUf8/Gyz1gvGzYMFPH3xk44bQPQ2Zd/MsPd+qnX2Q+4CZl++5LX9NEH82e8h257x4lH63Q7fznGzeLNnzmYREvPYuVdv79jc/GWj5+D5am1knWa9I+57VIRCQTELFd1lhG5oVIuxy2n0eRz95Cr3vj+wbKSxiOfCjmZxlqu+y/CQNZ6+/AHlZYOrsF409nIBSvPoS1/MZr0RK+9Z5aMPOMOrNSlUnrqXiCo3qKwRlPaO77009o8sWRtIP02ix2h3Y8WNNnO7N4mM/1JTUzWeI93QDYeczpqabNyfgQV4WPQVbekxUOxKDZV0SbeTe0Fz2lXl9ha4RBMn8lxUjvyhFxtc4V33KCxjXnFnqRW1DRkdM0HRkKHaeBha5/GA5sFxjoz0OXb9TOnnqfdvKbcT9KO3MO8qm4hhjRZYe08ftVXP7qLa7xQ0n+1Sj/EW75D3TL/8um5c89hniIO9nm5e+1Vm4Tx7jpefhG8v/K9wUHEpUz5BOcUSdk9v1vyoBupbFCqPSgzrn0KCdsXMtbllT0PHoDPTj1JT+Yx60H4MseuHSjdrbW+7QTfwM9sGA7KP+GEaJrbr16PQH7++TBKPBvXdibTJHiD+JEGIvsY/e7g/tF2bg8YNs7yv160MVyG46z2CtQe6X4MnyrMr5GMm3D6ZX4TY54p2RaJ8WvqU5TxjOxohx/UDZVOH+5wgbcE/ihAGy2tQLjhAfckTGeCdCMEvWHwjHQnQZE7MubZtuKeMy0TLKrULK8oLy03vdDUPwi7D+RV6/oaU4OOBfDgogyh60k0vtlnugD2GNXsPpzVwLCFL8f5oIJbgYpCNGmKO8exVeo+vsyvaq/3zuqhf4e19w9tbDCfCxVpFfGUo02yxgj+eMyPO6a1MJmwHAWDWF9y6E+tg82SI7fS9PgpjL3lP5IpcqB+/nmDp/B3qIrZCIVOlqqBfbcsQ9Qnytq5Pj9snU/W550xJ8zLN8Fd/0Ny8vEXQbTlepHZJMThxjv19PuXpxMcU5bzY5pk/SW8RDulQ8PIn0YgEvGp237gvDENpOTTm+rkoYHGjaazqVKw43szKx1bGvsGjyBIXabHL8J9cuP1jMty+go5eaYEcosLyiYj6rWMI6Adrg1QxzmrRn3lAM3auiNDJwmNr6Oj3xZrAgFORjEOVihcPAirv4fqWfv3/H3KWON5Saa0TrgmuW9vqfKFyh/klf+JKkcLPbzgRT//Y4WOxrGEX74GkP8MYetzWjFPKXYCo8xlJtOMTM9aFhu+sV+UYrfDz9+rc42bDD92tr0i+VmWlc8Bm5u5CVlJfiUyjbRMb1xjuv/E80F8IE0E3oKuo2ACEhs+JIBN05D0efkAE55kLIfsBQoNrrkPeBRNvrPRYo+HdrDl7wrPG+saZ2Xf2FIWFeAmGUjvre4SEMbCN1Tu7VsPyUvaCiyapqf1NvP/A4bo7Z6FxDwoL8Ah5VI+D9fs9WDSsvtzVh+jP2iIdpaads7WrFctn5kOgjWwJ10G73KSZPHUUYu3+4F4vfyNxF46T5ql9GmpfW5Ffj0HLJrVWu3qVsrHqZqLQ3Liy0sMbaieSLQ5YO8Lq3ePe6CBliVo9VVBu3lGg7DHL4vYa9y3JyhaHOzJpjfC3hPS/xMAMVvs1gc5wvoZwXb6+DKr/ch7041eZVqXIpBbapXu+cbJ8rWIJVNsclfq/jkAden11qMhxzbKcRhLwKSowl0DuqPZvfxL36qV5edN+/7LwOeCs/Yp17b9Bbp4Vy2W3c3Cni4nzHS4lS0+9DAdg0U/EBJGPPUQnHP+MNhuga0AwdUB+PgqP6Tq3j4Jt8wsNO9H7cl+vsR/T970//Ff0m/00N/7Y3o39VEwOdNeHBjwn33CxbdT++/VPkJhTWj6VSxStoteIz2AdKuNGrcUYq7Rx3yk4CgynfSPkfiG99lSLvaHLTHi/JULg1Cmodo0S8QNX8x+r+5gRpD0SN0bqayFbQ5b4TLUDJDDiibd4APCMKb2x1M531Qrbj6vB1/SPSX3Szci9R6+SOjstGskm+PddgGjVaNDl/BY/jsniqQINpHTJtt1CeLldSwA3+wlKHorRaoWogMoQYbiF2GDcMCItgv2034fgrvIey45kizJUqvMHsl3FhT797rQ1uIlaBqn071olbPljykdSdUc4z2I2M17oglczvWTLtfY0X3JlC+Y7SUc0iU7SRvPq36wZfufcS4V8+wfDcd3yfuNhS18+lnmLx93yk/V+/eKlmK6sQtoZt69yft+VQc2sYdyi5iernhc3wezJk2KpLQ6FBAB9cahy0SWOE88qciR9f9nnif8Ym3uNazcURWdkuLvGfCdh+Cdl3RNNTAp8B/8Af/0+hB9yYr6hXwYT98OJz2QiL3tuD2KsdW3MJ8TTqM25U1tBUPWWhz+tHmS8MS2sJM90aieB55AxW14hKPDTUGe6smOey7dQu/RtEEh4eoObxmuIrD8dsVDrcS+NcoGrei8WnlnqZb6a9uJUPdyt/blFbYuzW0UZGUDzpNut/GvU+YaSLPJq/y21V173riKt8qKUqaxjq66hWFcXI7el8LNzVWf0b9AfSHwag+1CVCf0hkWY342iz1igeueO+39i0v+JR/+Yrv/mxpH5sdGO8MvBf97tyT6HcHY6/icNKswSk+a0ALev1Cnd/u4I7uvuZcCL7BWriX6qhT+TMYWPgBU/j2OZXHrqlXPDZ+6sWw3I5WZz/iWLZmNIG4S10qPY0zIvMMG0oRbF2KZSy3IMNKT7Gpn8E1yrz3JkEVCwPKL/yhDFL/atbz5cc1ECKGDTHg7+iXrUwdEa8lGWOGVw9SRMdOcBdofRUM6TG+voEKNliHzglRx8EbjtqIRvfAzW2/83GzyTPNxnmzBvJx4ACdZxxI9TZRqduu78FdBDHAISebVZKWL8QdeN6ysa3xeJnuupZ7+O82Yz/VSLLueKTxeGjF9cbjobd6oaZ1+I7GQ1J8Jb6oamsfq4yF1AOhKjYQqpDiD1anUlxUCaOecWeUUc9Fn1HPar4z1jK9OeW8i0Y9VWzYUGWwVapl/BV1u1VqAVskRbgvvQwimq16Lco9+DmygcfgYvgBOuUExmY4Bq0DGw8/4ux2nI+CFsmmY+Qgin5iYUf4gfAjqs2KDoqmgcCz3yrDIXMLw6EDNBw6xqLxKytwOOSma0EPPhz6vYwNh041OxwaQcOhU6rhEJ//wRC+gmvGWK1qByEfD7EdhF9sxPPDvMdDFq1qPNS+pSWTRfj0s8p4SGktRd0aHw+x1iZh+YAWxkM0VsKTD5S6RnlwgTaUcxdUcyZarJKW4uld9KJ9zY+AIoDdO1q7R0ALX3SPgJ6ln8f4CMjmNbqy0nioQo5XhmhPaZsbD80GTap+RT0eCmaKRTZlZP4/0O3PP7jm7c9tNT0cpnr3+EF0b56BgQgbRuD8hed8L4y3g3qgNdq/ZeuHc5X9ng5bdKzaFiWTkwvQdNqFy6Ul/IiWsS+5Z5WVOVlldvnxLYqdvuBjpwIf71sSmlPuf/CFeYgzSJ9rDbZP1HbKTjSq9XbEGSpHXFMKMn3Ca4aiz1pmECkHlKZtdYGWx5vxt0Vs+ylK64y/J4Iynebbx6O48pSvQ7Nzo7ngMY9/wMbM25n11TRrfZFkfTXqg5CUhn9pouEJSsNjoGHXSW+zO6vesxrdktkZ4elqe3M2NJxsSEHjVBNoXFN6hHLgqqt9g7J/mI1DQat2dEetuu8oRhO9mbOjRTvPSNSxgQ1JcMLe0q85NcC+RvFHVLRwL1bH/NSyDPc+ZI8qhF+USmsocsFeTz3JbLB/iGK53Oyig1t/8cDrJhYgwKTxsNLLeBAqjqqe2cjGXF+zl9bUR9newTYihTc/Iy4qM+Jt3UOqR9l8b0Ok6DKolPmOZcBjE33CwEnDq5p6d4/9sr/KU5JyKJ6yz+cg4pcgrPWsQBX6N9m9a6O5MK98Bg2VtjAHm0BI1BASTg8Sy9T1XlOH0auxxp7u818msWAT9OONbqgfhsOKfrDYD5e1vBeo0tZxa23uCJqFj/lhtEl1KPPwxbHeAWatO8B01isKI9kxenJhiKfol6Pqf1qerFItT6Jm8GiMEzBxveIDu/n4wGunOGnm5kjbij6QsCf/wn7ZUCncnvBmjWIY3s7wPpX+/FTC3+fGVlP3slZxP933dA59oKHocPMTAoue5QcQjcU39exc6mw4eVoddbpd4rpPubpS73uDp9z+bB4+ZWg+AA7H2kw3qM3tlsI+ZdQ62b5DFs8Xfdv8CQkT0A2vr/E4GKnWo0tczfvdwHy2fqI8zTVR5Zonq11zcUuu2Qq1uLLYeWn0/k8Ivf/zNdt96emfl73hpeW8o8NVvCpPR00v+rBjv/p8TGrUeIk4GjLkWcHAAPooCh7xhr6tBEMYemeQXqZDm7TQfl7vw5lomjmIwlb68kG8EY3fsewDwM752FpF+V/xUf6G77jyz2xO+a/7BACfqwOAd5sKADqodL7aAVz0Y7EgEvnRUpx4dN3BrSBsJ57eooGY/Ek6AWp+aXPq/3QDOz02XukOA9UetyZa5XG3fuwdC4zhjSWtv1EQEK0EAYMVH4bvM6pb1apb/VjdqgladR31DgSC1Nr2RkvaFgBPVxc2R/xQX+Lr/VRomNVo7PgI0MAJwkbvf99G739/5aO/jTQX1XZvLL1G5NHfjWxARvN/HzSjv0UfuPX3E66ocHcLKIC0SzZh/EzvKFP4EsS6FyMbZj3lVs/rPuo57cSN1POQj3oWqdXzF1o9U6snjCv6qdRztAzc6uZRz0AHqWck15izPHC2hNvq2lh606EQ859vaSHPVu9nWJjBHz/3uaJwdzb3DH7IxlfpPCHfV36NQ76PFTd3DPjt0rQwBGMmY+R1bXLXFcyOEQyS6Q09T80DTbzmZ7DmQQ1eqvyjevfd3pZUeTA+3cMduirvJR5tgpY5SosiPlPWQsTzn3p1KPxFE3WZFb5sWw11Nd6vse4W0v/9tJ4RoMFpsGDDkk9aGNdvdW9zLzeJtNxtQwDXIqTSqrp6iGBG3QvNxK+DWNdeATek0kq6/STeLj2Nd+wH6f4x+FttoPFeTIRVNCx5HLunc+V2LIT/9tmr4dfthg27i0ud8Eumqtg0JVa9z34G/gr77C5M8CMg9to69hmycvs196869y/hsvLrAtxz+vPPWj3+HL367G5B/X0P5Wgt2Y7oKq9Fb7uqzNoN9+xevyyVnsI62C5mO/52hwjRDtvEUXhYBt4t5icHYjsPiY33fIsxfM831YHtXXsP92BD9IYwcbxwLwpMOWbLKsp0N/yARx52EACWNyw14/Tk7vAD1TsYFlxjwpt+feSgooCLcCnd4HX+WzCtf32hzMPioTAw5Pd6uSDAXz39NP6dZjzjU++gOtDKYGkV3zdFoTn4iJs+uFFgneznnsZVAuuuY5qYpPMJr9lMrav8/6eI2r2/Kz5I9lNv+KtiG73e+09z8fVrh/8vxtddVc58vh3oNXLfO2C9b3zd5t/F10Go0Mqois3qesW2NYqfmfCOKr6+6QZPub327e/8i/havEFtbl9X8TajtvhjdXz9TfMvIix8kXc4PMYerI6xu3o2x13SNGkvxdxanZPeds9AK52WUTHzsxr16yfBrF7fmqKVmtpCTa6N17w6m1vVnU1TT7s7m0NvwdO92cDWO97ZG4T22393S/bbw8t+l61sxn4/XOnZvOm2X76Zesy7N7Jfe2P7jRjzrwfGh9x7Kp3ZRXQEwv+4YbPqBhs2uR3/+IFix4N97PjY15zSrOYoPdakHQ9R23FYM3bcWWXHGwv5Xhv+fhPO332mTMT/rdjy7y3Y8ix35IMvw8iK0Eg7j2uYWrLxaxOD10pFM/NWct3Cxyo0LQ953QY+BJ+6WN+ygX95g9rcBv73m8zA31+tNvD//I8GHuEx8M03MPD8N5s38LW+Bh7RkoH3hppcL3ob+A8alYFHtGTgf73BheA7njltRPuO30H2Lap3nEBcOapx/8j2r/CzztguFlopdi1kg23czWBbwjf945K289dvVJs17CGaRpOLu7/0FLDMaE4gn7G3eZRtHMPd2zhuVhtGa9KIRhtjiqarDOONeco3VE2iez/GD6/SR2zZlgxliw8P3cI/UPaT2be2sNcEzzBRbZag6U92pBPt5+AyGxPQ3NLTI68DXp1b6NPYFhK2i4bXNlL9EmzYCNVc5bXXPFtxBitbceT1FY0OFTLYX2jBB/Rqmop4NRU5I1RUFL3mtWXkYfLEL43ywfuWgOa2nES/xieM2A4EtZ81qhfC8ey3+XS6k+RHB/I33k/H1mf9bkINz9uqaLhtbpDGsBHMsPQ07aXyVpZyew3Xf1y5xy0ic4P8UyXSd97HMU1ebsfDxFy3gND59ypP8b1TL7zcTAf4AWVQrbIDG29NdbDDjiy9HOsvsA0trHPhoTaeDP7a0+xjm7sNRfjBLOksDv2hnGOZeQy5u838RfUgziojXyrrYtjILNU9XA1kp96L0Ec9t1Lpo+7y6aPCynkf9VRzur6D+qiaS0ofRb9sPdSmeCuZYk0jUzyq2mTVAcJF124aL2C7+z9U+qcflf7p2xvEmg7baI83ntK0N3bHms6XeayJYY76wYlNPxg2Ujn/Dh8MbGyaEAD9gqbZ16u2uGbQGMFrS4TaiN7gt5jnc6L872zugBf7RateXu90W3Lj6dhkdT8wuqV+4PeXcBHJsqZ6XXPvEbCzOm9hR/14aDrY9Pc/1ik0OV5SmFO9XVmPtdWI/Iwvw0ZrF3luEC37Bvm7D0WU5oq0nycYV4H7hcpQ8oAr6pqyvtLM834tP+/fxPP4rDUYntW4n8Wzl62ByklWENUqz++52sLzwo2ft7mfn+hYjx8LHu+c3wpdUO0GdEEhIv8KqMiP2KaPcihfCPnc2tAQaekG9kFcig2SzuE696GDGK0W7g3h4sfve8u+J5V5nZXzH8+g3S+gZdEdeRE1y1O1Z71ewX+niPiH/Qv8z1kU/P3U+Bv+a/z/8eBfpW8Z//Yt4H+B8MeNr4V7ctYj/mEt4t+X8O/pMF1Af0j7J89hXB+LG7mddd8wMsLcbbVExQmH7TbPZqRxN6BidClS4alZzf+HCP81627M/9y8Jvn/U+V/y/8iD+ZP6FrG/IXlN9Kf+XrS/7X/Qv9zEf/7sbdnbqIL8J+ygz1iKPzelxqwt5boOeawXfXQc1jbMj27lzVPz0Wi51Md0hOy9sb69MtMosdhwlNnRa5PvvR89p2vWt2Ynns9C3lrb0DPuRe8NYvTE17GRgC/aJGY8Z8jMYvpLJtAvqhhbzCUlkH/RKcgGezn2Ft05abFfA1gyX7a1baYjRbopKa1eJgVfryrpLq5zQJPyKaSEbZ9xvLIONpHWTYhAty4qWTeXEeMlp1sWR7Djs1RPhGnOjZnq3Jszux82pLwSmq5Hk+kifHr9VX1u//VATHfP8/f+6H+qtyGx0+x/mFx4d7F/KD+PdhPD7Zg/HV7/nyvrbmmxd7vluff5T4vaptsq+rE13PSNT41OmxPeZCc1zSSFiXy6P88HnRALVWvdNiScErcul/ZfILbQQ/lsfM3HbZszJy7kjIA6w152IcTHvwLQsWv4YGFkmlx8+93RlDHr0KwuGkEDyoILsfleH966pl7lYNHFOIDMm7Y4P56nwYdTTdofJg32A0bfIGeMvqzqHcwj3pbs90u7CuuttOduNK40Zm8iKNjsNO5jFYRhvhL/Opp6Me+RoO6W8DwkUzFytJdket1NgHvHrjyjXL6aO8a8VS8oggMxwba9mlHDJorlkdqg+gTkkyXI9loJpKtFkSygD0ymCVsLToyhCWhLOnBkt4sCWNJP5YMpIFK0Xz6alIBDVubIHtssoJkUUQLC11D+eEqrwYgecXKlIqpyD3QW6nI4M0luDzawkEt5675SHV501KdoNQYizVuu9bs4LcXVrKqWcycSj26JTgmXIwfjs/CrzXdh1UGhu6Ru4TuaeL7nvYya8DUTbh2tEeO62I/YjlneybYz1qD7nt4l/Cyqb7fo4wNbPwIfjJJOFplc2pSu4H3f24bEJAqLdiE6gQ1uPsPej648fPQmO2ZORppwWI+kbiggJ0JIC0owW/jBUiPzMGK7Aek/fN01Jo0nO74fj8uSJp6QZ6KkzDsE3KOqADJVLPL6e+Y4K9zRD20y6m3H3Bo/SRTrSVLntkFhgJpckywrU5jCbXV+Vmmhx8B9Lrb5oUZLPfIsbUObWv3C1BSzdQ98rwMPLQJegbrSSy0Bd219bhtXpzBWiHH1uyqDnRo2+yq9tNU7qpuo6nUVFTvdO+/rbWV6avXyPO6bGlPVVhekh812g9Y9PKkINvuIPnRLgC0NWzQ2HZrbLs0RWXW8/KjoXCvHZLpfX9EbzS0CfgGz24/12jP9/im1slTgfhr9pNWgzy1jvgsWxnyUV3ANZ+Rc7S2+nss3Wz1JsvttvqHLZ1t9U+kllja2+rTLG1t9TMtYmH9K6B91p1yHH6U20jfnonqAabUMD4UapHjopu+Hdn07YFN3SYTVeDwMmi3PIrsH7CGbpfh7IiOvO7RHzxfhOTLj8yYC1Ra2oAMA+Rnu4BI2jNqvQTmL+nlKK0UA22JUowoRwVKMYFylFGKMcpRQVJMkBwVLMUEI0IxXeRRIdKYEDkqVIoJlcf3kCb2kKN6SzG95agwKSZMjuonxfTDOGZvJ88xl1JQaMNhac8m/IgqoFMoPdlFKUJvy3UJdTrMYJz3KwEQVom0xxDtE0OkqIHNZ0V6skb7ZEVjlpZOKntNcXlKrjxqIBgLuOgo0VCErx/L4yPxdV1auRofjT/38emIHaxdedJAcCaaMvex8pVpwEq4PypSnhSpKVOfOL+dskbLo6LlSdHeWW9h1iRRHkWcnkCfeaIMCTNGGHuNEP1BEFFGjvRuhzbS9ks93POPr5VsL3XCSGo5stUW3AZ/F+O42xZKv+fgaTW2sDboVqRl70BZWmvFIKAe2E8icF2/7j6PCr8fpxyuIk81or5ctN7cWEnY/NU8UCHLL+jgDlhOyiOC0R8cBc9gKNrL3y5Eltmu+hkWfow8m9U74rxhEZ5tKf0ojxgYfpJtTcHdsPS29IpUaObRgdKsDHnSZGnWFNtf/lKsE8wYP0w4YqRhwzCNdPhoSmW4qVIeMaEr/H00UoqvwXcirLXyrGj6ztdpadJIeVI/PAPaX44/Jcc6u35v2BDd2c+wIbYGHr7fVNnNVCVDOVbpRm1MqqQdK5sqU6UuMbY9moiptXn7wstcbdBVzNfeY7DTkUjg3qfw/bsxYXSmZTHQERPm6gLlep7XTA2kvRc+36fE8wNxW3lkb3miRTI5NbgrBXBz4UmB8u3ys1o8vnQ6BgIxGfKYgVSqNrwsYu5pKRYPss4zyPGnwRuMkoD3p3uZTktRWnQRkcHE6EX0TS0/Q9GrNEteJXfwN9X6m06pj1ePTAH0x1ikOs0gzbOiFHsKP2A12Ghr8JPmnpLmWfLvkJ+EhqH5yYYN2g5SDHB6QgfN0arwim4xEwAsbNDhaZKL9tCJY/Jkrf0kOwcQz1geMxge7blLNjn9Y3r3PAwC6IOnP0KXvgA5A/yXJw7EbaHQM1CcGRTq/CQZMp4cDc/0jMnpGZPRM2aKI/BW/zHRNpefYaNG2p3aK945yOTsXIZrbLZqTarUzvqrbd4cTf7d0GfIU53+YyJLWiwMvI13auJPMw7b36inY5kgmgYP92IZxgtjBkd8mVctXfV/MiPi+9xnHTY/QjuvchP+6Hm4Z4WjS3DEV/l+0lf+QMEUTySHJIwCpmrewIqUaum1Y3/mpElBTi2EolFhrpR6Fm57ZRoWs8yRmHmo50+FDdhqvm4nJlKlf8xA5XOUytz1d8A0h/YOaaG6UZ/3j3z7M265dT79WV4IdAG/yqOwqzwl53Upj+qNHrM8igWXUWx9MkYsj2JhZgzdxw4gJhhPv8T3MGzzgjWdy2xVI2xl98BvP+gwDEXHVeubCu7Kx9+/thPF5TE9lNfSqqdiK2AZ6BJjBssxo1PLo4fXAz3RQj0/mUKpxfl9ElCysIjQyWBYTWGJhVigjTRsDLIPnx4glsfMJmpiprHETO29SEfcQZFIKjKS3VzMb0bDTXAF9hhIpRdLiNo5TqMdHadrK9uO0SRVI54Dn9oduHypEjpF1+90+Jnqe8o98BPa8V3Qn+L0H8gmGNyAbAqhjwAH4XfA54pyfCgEUe03XfH1swUDw60u25WB1tP2hhJrAImz+gd5REj5iGBldvw23LMwIhR/6vFg4LlO8Ch4Hi2MVIo74J16Az+gdl5r219G+I18cUTBAFWc9bHtsmh931YfMO8tKDf/dTrvZPaLUEur+SXgJe0HZku2uad1jnxhfoGtXrRqU3e0Eny7dHkEdaOTQvBzgfE1rGs/wnZho8GaauGu9GgXaVgwC0YjyodR6CLNDJPOHq2ShveGWFga3s8xKoDHxtIjcdIumwtujt700Ycffig9MkE6LI+Lg+jt0i+Hz0hjJ7s7+mEsBlBwwKaGeyKE4T65sTXSME+QMGy077OOUfryBWXK4uXwaAWfBa8xgkWtMrXgfmhqjbyMOuddED44tKX0ZBQETQNRKq9TvBCJP2ndLCoafy7iuyLnY9kKcGm2qnr8LmaNVIj9tEM7zn+YKL2MCi8VYi8vm07vGwZevZA+g4SHn4luRXEJ13DQ78Tg2qVFdR0RGnZeJ7r+whHaiJBI+F0+ggzPVQG3Lv3IJ2xc/9DpMDUw5sQAdtXAZ0D/RwTjZMAPF5QAIf26Z34b9DlIvWwk8i1sBr58BIMR5JHIl6jZEpLyyssZ/vKVen8g9I7ueF8snG2hrmbh3f40c2R72gLBw6+o4Y8NlL6Rn86QY0bKD0+Wpp6GPmqQn/xkNHRTu+HJbhMnyCP7SRNHypHgCPqN73oZooFUqd9IqCXVfjFVGjxeHpYjj51WPozcgjQsWRo72zJo0PPoF/LuB59p2PiNdKXnlxDC8R5s1m2yrVhgHeySCC3+AB9n1yrrd1NFefxs2xXAEL9oOWj8NMMC+hbuqAza8yJK+/2jLKm9xiQ7Hr8ur0Cp2pz+aP2LVqKEZzYAfsPlFSjc4i5+tjKNYcNJifIMG2whMwNEx9j6VFvRopegRU1q4ZUG6IMv4dc2N+42bCgIyQ7AD9lDgQUY8mnk4Rb5OXxYfgV1EarrNXy27anZfvhR1qm1EmRbRRiO2co1EXOd0ryM3HA5ZiB1+hMG+gFf/w9zbwMeVXU0ju/dXZIFVu4iqwZNJWq0RFATwZYI2pBwE4oEg7BAlQBWTG2LLcJuoNbwdbOQ63UBFdBav9rSlrelSitNEFF3AyWAvBo+qqmgRox2l426aoQFQvY/M+fcj/2ISvv+nuffx5K75557zpw5c+bMzJmZg5hUYoTIceqMEsRl7UhgipMv6wEJaSGgcDJeGgWNhgV/UCld7HsOVqQUayklDttSSohVb5sH70HxKgZBZ/I80X8lSk9jZxbtBb7iwK0pZLtlFIBS0IwnuKbAEbJNfdvLRKE60D1mqt9Vp+UqJ9VZLrXUXbxTXPV76AFUhjHqJJQ5L1VLXSSUsZRH4ekz6YRemOVUp+eqhQWzXQW3u4XZbvV+t3C7i/LEIyVNwzw8/tVA1KBEafsozicM7vZ7ULZ5EAE6pN42Si2bJzZOtCZUmRBLEnRNi70Un2nanGza9ipUAeZCRVFcYLI64KGYysX6KexSD/V6JOqx8wT5x16BA9IHc7AvQEY51iDOxUCsQKKRx2l5OuSfeAW5dJ7A1wdgHJmSuOpfmCt93ZcUbAnzfxO+XNQfxGpkvpcmWHTWVjRowNSX34O/MFM0YBeE7+kz1Vvn+Q8u7qMcss0eBbioc9oBnXZxXRDkOH7wO5HE8/DaBQz+0nnq9UrpzJRp+btA03KzaVpgSri4HA7eTikr+LQUsWmBL2FOYHJg48tSSx1KqYvdjlCPSdYYMAAISAICpQgD/lMTOp7NSX9+tiNiQdSUAV2pU+YBafX5arp6477e6QpEvJ047XOQUjNS1tkfZKAsdYI2hL2iH7NzsWFEBqNIRw0+jFOLCRoICtBrC37JEsyWzVFL58jxPuKqpjMgmG5HLmOFuRGYvZxRQeTXZ7Q2Oam8DQJCpEK7L1Q+Loh+zJWu+jpASRBeF06LjVk3WgPbUYb03sduUYIBn1Yq5kRXI0apCOQEhCuBsbM7KWcGSOiAG0bpK4nSN5gofUMypa/klL6aKJ2LV5QpWmwsF24sFXwrA7dblc9fQSii/eSddrnZXvxerUe1jSi1ej8VdwRDYZvQVtBS0CP3WJWYuPq2BKNQUH4mzS9uFVeWo99Ra+R7qILFbaL/YbzfqHTesNL5N+GVzeLKZad5zDIJ69FmI55Xu7QlTFtKyTxF6tD2F49j+f1sf1n1LGJ6wnClMhbB2w0ZP690qIO5RjYZ348dpU6G7ztBHesBQW3hAJCaq5S4crIghvWTNTEMRCRNbBtuXYNgT7VJHTbQSE2aWON0WglcE1O/7wUdD6oAU4QvlTJv7eXqwnnqlFHqLTMUH+xw9uuVMlTGrmfKWNlU+GnaJVeheq00qxZ1vB1FiRHYM2xKd8yD/RHxicfODrXWq/ja1fljgFXbSocP87UP83EdTeoQV2SRzBkDZocEH7BfrClpfacTzRfMmF8wY17BjJnqjImopI03K2mx0VIsRe/CpIkOG+jjg9XbvIBNxdOOCtjzpEO3Mw7lJg7lO8/gv2qJF9f+DSkjkJd4rbXX4DZViRu+A7cp2LFwp4J9CnYo4aBt2jixCZDVdHGNcr1SHSYB1juC4OgAzRCkQ207v1Rdrm/nt1j5dl6MV2U3avkex87BtyvvRiXsdbEJgKCVEBh/li2MmmGz5tcouaUZF4XYuJx27SkJWB4rzbs2ygdJuzaw30rT1r1C2y5W0OornQObKfMo2ikAy71vXgHs3pNHaUTxujIWpaBD7Qwt/QRNU0emc8FZIrKig7DpEl9stk0eVSARQVR36M5CPB8yzHn4hXmMN3qIN16fgTf2xto/nJqBtZt2XJ2117owPMlJ2Xz59Ebm4b40dpTyGvIv2lrFRmch22r/k012XVBsbMPNsmSeoFbNk+/xCrBqKR91mvpdsoip31MQhgm4DiOzzmaod88DrN4wqJey/3wHTQrIgnedZaOqDONAykYFch0Bd6HYaANW/DdixS7GigG/pXMi64lTlhGn/HdgglV5+yXiYQPkEHHK18WVn9EF7Mgto5xb7inYXfCFfMaqtC15AfvyhdUpXmUhMMvaTUprdCNMLpDUtJnqJG1Hn/U1O/orP+l9R+eTPirzpMduyzTptBOqt7vhu2vogief27TjuPFk5bxuErlMO/tZfYeLvkacnAIUU/SDibCHIb9dvpQrBx24dpeiZvAr0n1HqdPnqbfOoJvf2sTGmS6rWjH+iukjYX3cOq5op1pRcsXsqaAU/ECZPR5E7iqxSWojncD+A+9wFT5pel2tGF6wT+MTOeoqnU/cbuN84qfImioYe8CkW0ygB8YAXKKNSfQ1w2Yz5vBYMtmuSmMOSSJ9R5JIj28ZU1iF5K1O9yKFr9IpPIjp6ivmDJs+Z/Qqundkuldc9Rs0yKAi8jhCNn0UfIIIqZijLhoHw1c8h9XpU9Hyd+tIdfZ4xRdUPPsBaZhYpnKP6jsM4rrYWHlUmQ5CwLgLrYc+UH2girYC7qTgFdX7L3tT8e0CTWAGIdB+H/Sv+oKkBtQo7lnQj297zVq5Atad1IF8fDIu9AqUzaZrstmtozIIZhgvAvIDyGMV85ACK2YCCSq+TjMVjs9MhT+pItMCUuF31cmgd3YCCRbMIFqcgeIlCJbnMdrS9n+SL/1/54L/RLbxAPX42thkEvtZZWI/meYR5mcNYz+rNPajTY78c6/AJihCib4rAMFtkRZNXhNgjECoFaNaKoi54wwhvea6AK2Ad5dw6IOinUCq8DPyAosK2BbBdlIE+5u5YE8XWU6fCQs/oxwP2NUXPq768Gs16aiOcREeQwgA2WMzI/vsJMoOYyA7piMbWf0Mt4nVz3JBO/clr3O8RWxtCv8cpMnFQAQD5yPZzsNcSBXAIbs5Z30IB+hpt3naGCNVgO352oXXScz1DiPegh/MxQ8MZpPH9IXIhSSIk3VOE033m0TT/lw0rQ7XXs1k00902VQKD/OFSTpd8itYgsqtyGnXAaddywTOKM/nwORN0PYrnHK4z00Y+QfTX5vdInWgTzBwKUFcuRgXZYUX5/9W2GU7bNNntlR4eVJZR/E+cdUzZEObCXN1q7dor5K2aBBPpuQyYeFumslbcSZxGm+diagxLZqyzHrMDZUUzcnmsSoXH9MWjYPNY81aro9tIVKdp86eqexDNvm2bt9HBbMo6D8CoLbZKkYV/Av7MGeCQFCnzT2H9W0C9cGJZJgyQP369U1Chr+BmfqLgswqHw97P6I1hCuGZWZ1goD4zrksnEfu6m3hLFqcsmhMI9hzCwUBGCOIJY0At0p90eCG6b1AXzRcLMa1s9MgbD9Ssn7cgLhridYnxV/JnTPMlyP4T2Q84QW1YDEe3XVA032WvqtWO2EO31LHO1GJOImYpEzFx1g+ULu4XmpZvpTsg2L9giwmKP/AhbLmTfhr0VAQ4SQnnpUpouLbo1QMFet/kIXUb5fE+inZ9PR9UDv709MdYr2LPf1IrL+2P1I+TCbGC+7rw3xloX3A1w+ShJHvofxKeB6cguc5eL3utFzEM6joaUSioRhknQVAIL5ri4ItFXhUl4h8iOQw346iKcYD/KbwfhLOldIcwlrkH8TF7Texod/Vj0lMt9th4i5Qb/WCjDOAWLL3p1TFO1cTHGwwMIELDjegjLKqnmeWGJMfsJegEJ5w+8fjYUNzoKQHFciV/+PEy3tw8mEjXxeqB3LFhLP1e0V/GG2PwBDrrx5gsSyra2H6quh/F2/0ns5M6vDp6guQ9OHr+i/6k6+SOt2t3urA88qdoXBOg32gWuEIRV0NM62C2DSrEN4pbaGwo2FcP5CYHFBsA36oTHef+xwcHf+N5qAixx9c0uckcPkcoPWlbtw1I7P5+TNbowxfuFVq+yRsy1a2LbNt+ptvzsi2HsNy3JnRKhkSipuVW+f51qFwcpBrR9NHFYSS1CLOuZ6cnb7q28zo6GWzbK3AzbLN2Czbvnrdi37M01F0kKaRTX6kB3AC8q5A8m5/Lu9q+Fj5OW4os+cBCG7lbYBfbLxebCxNFO8W6y9yMIlYE2hyvlagKTrYu0jTTIgDuQ75AWZX+IZC3Z2zCHWzCXWzGeo6vgHq1pcj6joM1HX0TktMmnurhycwqFkLrF5p11n9i6iV+Zy4tn/Tc25y0u+q0yf+6DeA/i0JoT+qQQ+gq9LRr4T+mv6cxfrRCWM7cvkX+WJeB1yKeG7k8zN8fcyeF7mMiYW/eY+JhYJZLMSbN7HRA2fPbbhbZ6YPN5xkGKWcyhmH3DGOjviThhymGFKQH3CbQF8BPx5sqtV7iqud4prN8IwsTKz/LTz9ZgweOI3N2XYG+a3nFGmW6n1kLZh6GsWLSMkp7YP6U3hfBF41uTTHivvFc7i1vErGU3V6obhmEO4faygTySlBXG3vgw99tpXg0ecgwMCpLHE9qi1ye7APJr4KHXMGHrQ0JBJ9QzB8kAps8t48Zc92v6vUoc52nzwGU3AfnpUutBYcOBAR9oWO25UDoff7FBxQpzvk0BBlD7JP+8XIPSfaBJT4F8Ese0eTZl0IlZQQcd7rkfNGXFDJRnzZITZNKmRfjxtkZ5/3CZRlKRXu3k6aAzXchFAY+V0cM77kcgFtL456tltsKncXV+Qp1fsX3BChZK3TgOHmAZMXG+3WBvtgdXpe4BYBvlNudYPCp0zPo09axZV+XLqvjZ7t9L2m1g73n/D2HV29X1z1hO0/2Y4PlGbaCtBYDmrCXn0BzHZDfwCs1wEQsUvEYUTThsNu6gSBoFjaL654H703K/JGl7thPZ+kk0x+R+r3SZ/LJXcsOw1fqQ5Gr8PxTssVG93I4RT4UQGD31d/UKlsbXDmBMqgzM0SnSMaduKI96vlw2HG+hZXB8UVeMhHx3q56h1Jwy1FPKCA5M1NGe6xsXT6ItzuVG/LBaTgiGdpJxyzzEuejzjIRozhpC1Sq8BgYUCwgQMcm+x0Wwmu5tdOEGaMod9BQ6fzfryjmw+9CNYbDj4/0+APmwa/OnnwbLpp8KLtnAf/YUlvg59Agzemu8I9usKpSEFlJxv+rTT8w5mHn02EdxiH/+aXfPj2H9G4yYvzH6SSuAM/sMIgan+aCWix/g9fshs5MgI+vOSbzprWjbjK8yU7pZiOElWDvR/8C8+0hAcKyuxeF27+PTRv91mYv9gANqLITXQ0T8WR012sjE6R8CDEjgz9V19qDLKcM8iRvB6mRBhWvR8FfRgULHGhcr9avR/ZO/dOe/5HrLcxZHOLnH+GQqAFEBH877BwaGtgghV/vo5hgs2kXnvwaj4hMJmq/a0PXQlpDUymar9jP22ByTb8uY79tAcm2/Gnn/3sE5jcB3/Wsp9ZgclZ+PNH7Gd2YHI2/pyBfDkExAn9+PoUV7YvaiiobCfFGnTtYVJ7cSto9bU2ZfoczeJWgFGvmsXNEGkEy1fZ2kiyYaY2sbFPBuOaLulAN5pwta65gFT1SN+TiOMgslzE8SKH4AvijTloHC4lHN9SQ7qQMrYwsqv76ypfalR+4gzNPBJ05GpGBbioI1d10zPyNtzvI5dAvWESNYp++rMdAvTgC2JsBm907916o/u7mRWaifxlhSjtl6GIzwR8AfeBprLrSdbHLaFsBDzaqC6+R29fvXIfVrkfPGaxyv3hMVtudoByEHn3C6ZlgJg69eTXQfhtA8JhZ3p3o7JgteluxdOpANAVjt121xD8M84qqOyv1SE32xRPDNWT6bm4PEahWHz/cAEPoOR2q3y/Sxh84uSb8kd2+f5cYfCRk4fkDxzy/fmCev7gvScPyO+jVru+WWhVPTEhhnPUJuxpsF+oVuSijxIs6xK78pq8E9ezHQuphK3vPuy32FSSBb+y+K/Gkmz4la0+hiIHs0bNRvTLp/t6c7hgIq6ZxQ60QX9bjW4AuBNX5AamCAqbqhInTtWi3MAtVtiYaU/3flsth1E6kMlgVZtW1U3iBtUuswM7Z/zQn40+AfoGISEttVMgOl7mgRdaoKK/1nt1agoScwR3TzlVA821VjjnfeCdG7/pPgAtVNFZ9g2fAT+7L4b0sx+9QpB+pjsEz361cj/dEcEOYP79Q7ZdlRVGWGw9CMv1KLttx60DONtrnycS23AUayO/JXXdrbVW4TAd5DxjtENX/1SAWBPbbXdY0HkLar69e5zNDnwAqAyozdbHQlRny+J/s7lcySYZZmO2Qz7V1+vik7z0JpjgiLDkOw32QZxsbYFSK0pznMPnfMryiXwb1LAIeqPSFZpFeyMDuzT4o81qxUR1+jizE+S4ZK/TfyKeZ3tRpr6dvLyYJ2QFeUJGKlA5OBDZctrkz52Da5OFAOCtieiC6D/oc7/IrULKHpNdaAFGd3won0nA1kOO233Fx4L+xOKD9UHf63Kiz9K9zAGz+JUG5nGpOsmG4b2f7s/1TSnaW/w0VvDeHHDfITbZ16M7pkJFykrmf2lfj/6XysqH+K9x9Gst/0Xul+UPKNRBZCZLAYNiPI3+EgzkC0V//VIWm/o78azIfkcxgwJ2nQRPUP/V8TotpblJMVQ8oopHW2GiHEtgRSGGsJbOU0qrlNKJRUF+2UopY1qlbBWVui3L8A9beKUs7KqUhV2VsrCr0lHszxj6syJ4CQsYbFmxC57QBlWddP/PFAawg+C9o5pD/BmZLH8xiLcG0LD2oAKsB9fSA+rtY6CK0CbH8xbtEhsrnZrP4r9gh7tCch1qF0pHYY3SMUXB6B+N87UpcicuF/8RbieUd7mhUc2eSt7C/2Zuwu1q1UgA5XxTUMoB9H64Jd8UlnIAQGMhKdG/1xj3x5mnoATb/PxEicO61htVqvJwMISq6p3GfFFdbfSfw9K68TxfDP7cP8ZSDbprUnwUNJfDWh3YskzD77az1ADv1DRejt87tiH2Dfz2U2lC5FOi11V0RD6V4x0QancF7Dacg9tLop+rT+yB98Pg8d8p+eb1y0hZlI0/4e0PrDJbXZjbi/V1Sh50qWEVOfH+S0yOtAyRB5P8aL2vqJNGom02j2XdoKv41En52iyb4oLy2OU09SRL2ZRsjOSpoEieCoovqaBIngqK5KmgSJ4KiuSB/awsD3WGsnylIh9bq6BIngqK5KnASJ7A07QmKkYCYBrYFCYKK/OdkajzTVSlzuK3Aw1Yb8F1gZU7LqG0+VA62hNedKkSKnh7eQhfBmALQyfdiWp5VUFbwC7AMiMHhE7+Cx5jMO48bZDqtJE0TgcGUXJnmh+PZLfKYEMji4LK9NzIoz36Hd+RHjL1dyYFTTF31nt7TPwR719W3mTmcnVGLiBPnTISpYvRiMFfDoX5XAQ7xbD7XOotQ4tfF2Vy4Z1SqLxR8FZxj7jieZbp1DZlpDqWZXh35xewO/32jEgkCnpYEIwSt5UVjgY4ygrF+v9BDlOLMURFB6FsYVbAnq2UDUd23GqKsQESocG3lDFeUkacBZ0+YkrZUB2iFZT6xheDKVKnOfnxfsE+iqiRRqCP3NCig7wN6CX6OH5/kgPsNQN80Qg0LhmA+m9HBsy+jJANqJJ6maxF7RR8Tr28dz3vRVlYCD1ERjC+zcgUGESzmVBLaS5uy6P9G6i1bCQoE2jEO9ujJR4zr68cWlkOY/M64rtou7Z5mbCF+MQl5z2mTnKAvFEj39zP+xN1iktpCw/qYYaxJ2jZDC0+tXAYpuMoH4nIEk4zXCFJXYgDKR+qlMPEtJRTWs7oY7ZJI3ny/oJTmrzzcRFgasnwaBv0IvrnJXoXbN+ayuz+Ji+wXVCEtrrE6PIc0Y9ZcSMYlrgdibMl61IL94Iw3e/HUEDxmTj+V3H8ppulU8b/SycQ7RG1P3KMsguAq93cX6y/7gJkLs6iBKBE7a/4MQASmcN67BojdALjycg3RpEO43A9W/ASl8AMLAxQ1GS4j+LPw47Xo7FGCczBwpsvFVfdi3WyEvn+Z+dmg+qK7K2/Km0BUVVuFxTrifKBVu91YqNnS0DqCN27BcTmyi2a/32DB7PI2hsqP1TLMb9B+OQM1FtzMEQfUyth/+wmnC3sCoQqdvZd/226WAhhlv+CZaDhEbBioxWDPulDh0IVYPeTtsgvY8mQ2pfVcuCR3iy8grXKTrBJCBADTOJ/PfS3Ab2rKrc0SB8C5A2ejzTn/4bKf7M4MIJY0iC2fTXEPvt/ArEIEBNKXQgdXS2LmFVKnRpeDZh1pEodAYnh1aPh9ZnpHEq7AZsBLLRlF/1/xrMDQk+2Fm6e1Ud7W0+XPNDcq5NKlPVz4aF4X22WEphLqbfm8mH+2qI1Mp0kfWW9G954J6hVbrUkp2CfSvUVf47+ldA6mn7VOtQA/i04oPrxG7pLgMhSaKWDBRiG99pEggZ+OfuWIVS7nouP9YVpNFbWU0GAkE3tFEwqUadhWKc/jOkYykvYGLPYGB1i/c/PN8/YTsrZsJHFJmxkXYmNdhdMiCxtFBRpHcxLrjoBo5AvUMtLRpfmLTwPJmJdg1tAE1x5iQpVguJ6P67nZS/jvxZYGwRRceXGBf+DQxH9X2KvlRvNkPLKov97ZkCzGaAusX7NQDOgFxOgmxigm1IA3QSArmWA5uuADiVA15oAXYuASs8vq3veBOKmBc8TtofozaageryHobpyUxL00Ijor0dpJcvBLNEndsNAH7FrtOEKne4rHxOUquFc4u6Nf/57KjbSn2xnOai9Kegypo+ckgP+R4tK2jIGVA1A5Vtu3Ftz3sCwsKxvkR2G5WMyetlu+U+ZjQRsdEtLVr+k1QbrN3Q850oL/EBjxJbQ3Vtylh/Dn6FjDqHVJm3hC5QNmczsoJZf2DuW7puUjCX55TwCc9V4tKSuJ2bvH6/zcmWKk61kxaYSVMotLrVyizLFTmF4Q5VJo0BKdsk3D16Up65HRl88xQWUQ4+woTafYBvqGDwRrzw87Ba7cItD9dPbwEziEI5hZS6hzC2U52JYdav3Wpj0q5kbe31kAJJEDslzZc5hUqt2FeDp2/QBLLEL6oXMslNiKx8jn4Y9bO0APB8dJNbXDUDVWT49QKxfAI/CHpSepNb+fuzb24+dqB2JA5AJ0X8I/r5K1tO9cTPp0OF/IGlStXmVCVfaxJqm9LzaV2FK5b/g8wC5fUgfPIBTyueoxIT7hcJ9oJBW1FxWZJfbRTloX75kzqVUc6a4yu3C4Mm5sHH2c+nhiS1ZA4lv3jO6fGZgnSXvbtCD/U5ilHbac73w74KbInLSlnL5fzAEKwzB76UadqpBg7HJVGYVm1xiE0Fuk9uza5Rx0+ar67Fe8bSZynoCaNo9i/6uBvBRPnX+oisC6/oitGKTVQ4JcrNVPjWopmVc+XyLxReFwQ1CeW4laQ7l85TyiYGVlAmnfGo2ixBzB8qnKpjDBd5ipo/y+Ujjg3iInUbfl11MsmKLWH8lW6133KWv1sUnuX+dgZd+Z88dL2Ltq2JTec5oaQvg9Tzq5CKjk0Fof0arvHeGytr5Pf4bb8m6GC0l72cfundL5JMTZvryd2vb07kwDavGNHg37cKB40q5XWmVI4LcbqNQAw+GQKwgOsKAgz/Qg22tWP8gPIWOW+WIFeQ3JrxFfnCCrGZZyrSSlqwB5B93/sAMIkBLlkgUSHGKS9B/hETD4uZaq9LMRqV4noSfNkV6UpWexGq/pWs+n2SoVkmm1LzVcHNouYpeFxCrEWikBdSoQBypYFpJ5KUvzSi77cx/NG+AMNzCTIKdWxOODMFOF44qO5hAZxLhVkxiwlEqTiLdOKPl81rKZ2RROvd8EjkoK255VaB8BlKu6h/KhBV213X5XOJr5XN4RrWAvZR426yLOAn7Vw0kS2tWS9Ygmo6Zp1HuRyuU/DKOuo+48mn4sfxlQhV5gNChXYCx8amG2HOLk23UmB0CcDBIXc+YuV0l6VwpH6VMG6Pk5uOEhG/ykAZA8j+oBF+lAvDZ5iQk+i/oAghXaiarSBaeQpVPVCdNZYUsy28hvGLK+vpCommM6CUeA7BdQQ8B+wqxaby1RqlsFBurYGotDf57aUk0FxPSF84ziEE69VXrhy0c1pWZKL5JX6Op/qJ1y16+lwlZ4/vimVEzgxYeoCd8KqB6KuOTNFLgjY2w0vmHQHRi/bp++C01vSlP9K+Fn5tKRP+T52G2c1EpH9+SdQGJQONRFsamvPcX0zwtLDcGOyP+FZRPo+MLgA2SiooJsEXbObRGTqErpC0CrAd6DdCyYbABwPpuybqQ7LFo0FInzeD2lapM86WsH2fGZOBnhB6GTGlbxllbc/KbzNq4r5219L60WYPFvG1TTPHPxwr172Qj+vcpgd6nDlDABn+CvoHJsfbHjzzbxCb/z0jpvggX3zGYrXEY9TppPF6YTVP1QDFBv3A8k5dQevnLiXPj60mTtS3zZI3LOFktWTm03U/luB1BPePKVsvHDePsWZSPwuZa0Dq6fLjSLK4sQY/MlWgHxS+uz6KN7HNjI5sQoytxUXrD67xasi5hqR6w9gSBO8n7vhe5WTALGi9++Z/sZUwALi7PZdl5AZAr5+qAhD7VrB2vklVu+Kcac8MOx1OHxKHKSxqok78QO1SokLHLSB1+Y96O2UbMe19UZgwg3vWfD0BsAhE97LoB9wTAd/1zcbSK5dxsIPXLT9DumLahoiX8VUqO+wvsfto96qQ5XIgKuIg88V9b+dxiLuqhLUiUlb64MKfyhTmRL8wHtIX5APHmZbhSGscLYlOVVWwMsYWo+PH0Y+E9xrgtXd9gOXqWpa3FB/haNHpgbWvEjM+LHq+RT4viSk8fdLw8DapUXRY9DRTrRRzDetYTX0tyKFsJ4AZSfKB2vAHhrC/OdTlRG1S+YBtOD1tRh8KMEoYFEDalWT62NBTOlpv7y5Fsto8VgSKyJbIkS4/302F4+/NzlzuGoByNa3EYES3XdYLe4cyns/6SbH3LZqpOQYjkInd+eFC5rtpNw43bf9B3ldIcOu4IhbkeKDRDMSmIoXYH/Qi15wTsVrQY1t/i0JgCUKFLX1EKQRP5cSf26IA2y1qy8JwqMr3TLGN98tl/JGPJx6ze85bXbRmiosgyK4sU+ZZyF78kOhvUeJQNTpQ7QED9mQ35a+UW5kgHwL+PjgVCSNlz8piyp6D1QFhoRle61lB7n4LW4hBokuTxswW1pbhD9M8DLoXaEysKjHcwhyf/Y5gS1zj4KO/V52bO90CAunuLhRKibBHSzHIM/Zi/xioH+ypZkeujoCWiUTbyvzEtvydD3+7jgLAp5JDzN3iMLIF/XsRTpkj9Z2gWXVa0N3I/IhXlT9A9kK+xTIyRnk/QZt6KBDCRdF20te8hcfDVm+G9y/gsB1kIS+cYceIzafORXx/X+GBBM3BCZf09hhIvPVu8B6TxymdV6dkCoocC2PWJ5FBiv4cWkaUBvZ5l+iXIxwXfR5woPc9CewFnP5BJqUD0X4ejQ6dMtbwQ5Pwp6qSh2OnIggMwc4F7GC8ubl60TGmN/CKRgeNF8j6hdPUkC8XE+l8Jpr05shF3r0kjC1pBXSdwolt0q1qKVenzUpqhyL+BcvkeTe2MQXYZmE+DbzC2UEWqh100ejMThnHx9f30XIgcOZ5UD+/HcD6C4olNagjYlycJI+OFhsrVmjwS4rKSn4CiZyahiKu8miji2cYb1cSRMSRUkeTS6FmtCyaRspO0mMcY2+Nvw1jfyYQClXhaAcFfo0wtn48mBrZnlN8T+fsp+nibYcC6O4wENBgfbw+bRXdOVVIY8VrZqARGcdRWPi6ETAj140V8iNOxBuP4+8fnilNqBfjA44jTQkLTKNpXlhuSOeJ0jUk419AqPZ4Jp5WPA151KQlwuAYqKgyH42irS9lyrPqWU25QR7Tz3IRt04azXaX9m+85Ku2DOjzIIr4kG+wWVg1YmJXZV6ygu4tNE6f9LFBlY9MqtBaz/X5FMzl81zCQWyjbHEvSepSufaD+mggZMr0UapRxk+ZjLMN6/KlQDd+byqR7In9COso6D+e4C5ZAzUlYou1i/Y8+IgrpMSikjJUcNWSYoo+YnaClfGL73Zgha2pfyp5VNYd+oc+ehWus/sc/pbHZuO0o8kSUWvMarX3wIZUMM0rmkryH+0XkB7Q6M26Nm4rRdyn+FedpNxNrAP19t9QxZLf0oaqnyTb0+b/djLAKmU46kK2UM+CCBnAjP8zEznYexxOub4n1F8DrGvmV+SwKq0AgWXaOsVi/7AACCYkr555CksLv7VDhuIHuwx2a6GSiTRunzVCtSRG89fh/QZtfIQxlh8I2udkmR2xmYei+s5rQnY4oJk4c+ULbgF6lGHbaepgt2bAiM+uxZkueYlcmjVLKx0R+8AEsds32F9hA+XnLJwbK5wcmzVP8dHlY+VROaMr6fGY9cnP7yrh8FxCFUy2fowSGJvgtJ+wSEEqPOSBLMwne8QlN52pjOu/+ALeaOS200CwWk5UV88gy4TuypIs++5Px2bUfpOZvlDsLUw5fM3p05JJHR5kdNKf+8v1jsslZt/Zt+cYhgdJ7FOkw86dSS8eoE8a0WIegstlOusoPR8nxbKV0jLiyHZ0E96qloxrGFcSgJizv0E9GOeSwg9VY1BFYcE8RsC+ebUnxHfaWtkht7MynTU6AjO4dSsk4MKo7dqPUCpihW6TqgazwLrAipnXKUpswurKt1l4f9P1DlQ4ro9SFdtWmTrjHf0LxHVWkdu+4ooR8yrboJlVql09BwyOzk9u9Um83m8Bm7WJeqaPUbIsSj9qLEkVB1XdYsJEzjjJAOVXwS7vtFod8/z125RYQ8prwWP6gutAt1qu6z5XmnMUzDyZlJGwpY0dF/xe+WLpvVyanrKIgAKgsdLdYabscAIBilIEFE9bYlJPihmCkEUPtWgQ5YcNfm/Qar2ONz7AMrwFD0esU1XgXvRtKYQa1+ZMOR5b2pNPbUFP+Vec3yL+q1HV63/MfERs6sNG2UNwOsoF85jpFii21yR+I/iNeR6AsDkS0aJtaMRJE9dzRs/O9F5mT3+a3VFB2cGhQlTr9IBvGlBn5SpXD6w+sYk4/85SKKqUCHeEq2PyUmzND6mn32fxkc0dU9ofNTwWbH81Jlc1PBZufCjY/FWx+Kpiv3Cp9Wlbphke8svXkEc3D5zL9pjpT/suhmA07JeVx0OdOT61YsxaTK/5brnOP8r3vP0E49r5DSo2eWvF2QQ+1KOOuV0nOWnpq4RbmqZXwPuk/oizJ5fgUGxK9TspVbFJqL6XLYrSJIChaypkaUEnxdjhlg3HK3BmnbBrGFSuz8/0HlQqH92/pjoulXz9f/698GyNq0nxl0dhYXsK/oqdWOctLyBKCkvNWBv8fllDQzvMLOllCQQdPKNi3hxIKGvd3TZuyvJMC1utcNS3SYYwSkN6kf9swgTj8fZt+HaV/36V/2+nfY/RvB/37Ef0bpn+P07+d9O8n9G+M/v0cJbQOVPIrnUUHKR63yT5ZbhZq5HHSYaH4tO9TVcoBKfvzFtpg6XTFUoOnoZtEf6WAlpK6mIW9pHMZ/yhW+AkvPI8Kr2CFnbzQSYUDWOFxXtifCk9ZqDDMC/tRYQcr/IgX9qXCN1hhBy90UOF2VniMF2ZT4e9ZYTsvzKLCtazwXV6IkqFvKRQc5QVISL6fQcHbvAA9Y3zVUNBm8U2EP29CI4Oz+Z22gSr77hJB2G0p2V0Kf0rsJWqlu6alBFX3oKOmpRTFBgFw2WJhLt/Ld21hF2NU72TNWxk8b7JbT7zXiU3Vb7KI+aZDBa2i8kO8TIY+2oZkyRL+1cInD/gOW2DH3i2M/ju24/u46Ah9F3BbKEeMIj0oNgULmheH4OfbAff5NXglApU8DyVHWclqVvIUlLzLStayEhVK2lnJI1QiNvhImJeOsdJ1vHQ2K+1gpRt46fdZ6Ues9HFeOoKVhlnpE7z0W6z0OCt9kpdms9JOVvo0L/2sh0o/YaXP8tIjrDTGSn9LpUqr2LATNY6g2HSgoFWOW8SHMDGJuGZwHzoMeRAWQiNeXVC9TUB0ba+xSQ/B3x3wdzX8fQX+roW/Qfj7CPxthr/r4O8u+LsB/u6Gv4/D3z3w9wn4uw/+Pgl/98Pfp+Hv6/D3WfjbCn9/C8tXkQ56K4qOcPudxwlL7vYaNLoBuGLTVGmr4h9H2mOu2LQP16KSO54fa5FSD8pz5VbM8X3GF+KirLQJJPdVNwGJFr+u+DaKK4awMDj0sV9ipRuRWsivgDi+J3e3H0PXgLBRskZ1SO3LTueZXr/bP4mOhgLzmMK68dDvySGCmiDVmgwplRsVT73y9yrS+HSRu3JLi7SZieFzE+x/YiOpBmLTjVdTvd3+pVi7wb+ESltGExwPDBLXFNtQxGPv55B8QAovrQkS0IaR4H/oI7TMKZ+ffDuQ+3fmUMr1i5NHmMxfEFOYr4i0WfEsQ1ViHunu7F1g6nIrwz+AtoRwemNDKWrE2HHDhB5VWia8LbAWmKoSgx34IIOGvD7liHDomN+z2Zt94Dj88Z1Cj6yfkA8TjZ5VhfmsPFxDaQ8KkAW8wZSk0XUb1b/PZXMJkvXKL+lals1X/B3xOpreiPUoTTMNyL/X11f1bFTYyegppuwwTAC6bfRQHGI0snAKGS3JDHKMKWFi07jKw6DcFDSrXMUPzHQIbFyBidLhpe7opWLTWKtwEKhKDlkLmv0HlzhlaYtQ/BT2tOgYNsktKwIRwbKXiULE+jY65MWiKWgvXYl3I3E2JWgMTq5De+o+uicUyWvOz0BbIVeNPHpazMkEOCkSm0GpjOzwc/V8cR0RJe9YWY/T6XUaXS9SoJ4Vat1KtW5lh6Ls5m8iXk+uTrmRsSzbmVK5EYMs38W8XtMRmSG2fOQQlETf5a14XayXWzGBxqohdPZHaQSImGBpBdwrVIEIksoDbiLJBqcLL7rCFxsbJlqB+btVh0p+tgV7QnFrjTKun1WW6q0qLCI6M1do4iOvd2v6bDFbNvWUZ7+yHucINmqxaczYyFbMN1GauELaLIBOszkSIG8RLwHHTHPOsVCxtIEoOvJ3SkKUA8rZ+YpnU6Q8nkiYBzUBfZcP9/CFFgmdoqhTls9kFdoD2DG+6L8fo9f34Fk/zeS787SZfHqeNpNkVS5C0YidKWCD12GDns1oWyLXSiIrsdG3kREkptX1FsNSvYKmZzTziiSy9l4OVKF8plZvbAgsoaoGq4GxsImQNrMZORSGFbyEnfrQCoD9mG3CDeOFwC2J1AXrHWhCoej/uc7jcE+vzAm1WwWrKm1UhKJg5JY4heRgvIbHEVhBl1WsoMsqKP2hsoIuq1hBl1WsYJdVtKzIg79DL3I4WlYMh6cx9DQKnqrgqaaFrspBWXOHdgvriq3whJJMTUs9dUEpkG9CtytfZ00RzAe+wP7ohRy/1PdJYRDLsF9eNsj3CbS9DiNGocXNetub9Kct+tOz/Kl6pzlfnbJ7CkVzyZ3jFM8esel263aUpGr8R3z2vz24xebfKzb0w+XedASUQ6W67aUEi4RmhxNH+T5A/Ltuj1p5WGyauCZLlo4KxZ6jYtOpGqXydaUuVte3uK5NrP8XRmNJR8UAStgvoXEtei8ltFu3gbDZCsy9aTXiSvG0qtPcfUNquaNGoRJYZDVi48oX6S4EFiK6ErGp/GvYavwrN1sP1bWCANsqh11CXL73qKBMc/OPFarqvUmV2lSqLTbtWLkEu2wriMOGuqaWSAEgqSdIhFew0qH2mr4r8XNszLcTZLbXgdG8RvGGbdsx6/I2m4EGGcRoYL3FgIP6t+gi+ZhS10ZJe5j+K7WhZrYLc29XAzLW0lJv2+Yiye+h1QhOi7TLRRhtZ2BicHFIXL2PjpvaACMIN6EqrqPqq5EEaAE0qBuwtQIPRlvtUhBDNqn9EOxJrxjYwUGKTRtegdYJJgZBixTEH3jspXg6xNUjKfvfKzvQlXKa+xuDoWpzxCatoDIIkAQBMgKlIwUUJSSfGiCu/h+B3dmBtWxiU7z33qAXrUPs7UUEGTrjlPEc/jsA+sAJJKKgvsT6GyjoJlYswXSg4oJTSPQP80jLAiYTpppPsOgvoFxd4/hWd7SfuKacMqVuaE5F2jYDaWFx9UKGtOC5Im2lhrTVDGnbAGnbCGNhGMahBOLpvCTMiavxaoz/M6SdB33o+IqcoZjtNroTy0z5EeEsCeNHZYLBSh0H9dUT2YmXujetRJoRNrCFxUakVRhAwvzK3f0MBG6ldSB1EiKHSZ24DD6klfLKrnNEY/IS2Ao43MqXQKdBd4DJvhoKf28xUNj/v0Vh3yQUoqlVrUM+8wouYx1HqtQuUO8RH0MWDbKuU2NESfgCUMU1dyTMOM8mSE04v/UMNRPsDedAOOKaw0nzZkudt/7Msdxs36Cb13Lz0V6FQfM+F6WgXU5JCR7GfAfqi4/T5XC5pcrnDe5s2Kb8RxR677u2Rq7/K0vctJzSXUE72Ai0gJkNlvO0lEpntdgY3LkW8MozkMrLcRsT4PPllB0B85CCGHi+2LiCZ0lYTlkSon/ElI1QOD/bEY0Y9xmNwd1kLTavVO5HyaTIZtDuOiOfdisRW8D9orZH3G9tkfbQSsZNYvV22ggvRtprO9clXCDtAcLbwzieED90pkZ52li2bH84OprlZZYfxjXsOaqupKxYTfYq0CTfVFc+TrkixrjIalP3JmySR8V6ieSrVYgqGIECGvG65Xa7tpDEplKrtqlIYb6YwjiY/7We82B630vCKeNRPTHVvb5kUbbDfxC3Dbo2BAP5Tr9KoMSHSR3D3IEgVGBwIkTPEERv/0foHUbrhGFXOYU7SgqCa1H/fxPo7KYEYyziqkuwv8a1SEKKpx3vhtgfcDcwePiujAQQNAigVfgvccZ2PcTZoTNCPBllUrs6xl+yGFAGesCnKOSvZqjsHOb2B6F8mwZIi7SDwFutCOeMsWR4dgA8OxQmMWlgHD10htEhB09cgcduNWtVT6tpi1vebMFbeVFkQiRtM5DUn3btVhJWHqdK/xlstNn1gqvKNtSQlJVb6W6pMbQhi01WEzsNc3a64KxmpoX3KWJdRCFem1Z8H+VnC4Wzee5XJaRI7ZF3iFk2m/ro4H38lvBD71hTWkMFpIuBULoC8ZDazXfS7l+bgqn1X6KNV1z9AMGsUldT3Jj2hBAmE8Ju0RAm/5mqqzLR/xR3TYvMdA057lgyCT+8xSE2URlm4rjFoTWhIdz0SYusqSd3VO9cK9MvG2sZWlv6N39wySG1jLX4KLXI4rHK3NGXatZq+WWdmBGIbYCwx6yuhVX2Ep3FfhWVfiNZ5AxtpIwom/pcXpvteNUgSLwMEdhKDEQuWNyr19PS6JNXizGeQIltwP7+e7YSM9gKCAwuLjDQdSnyqWxxzSakfUaVwf4Fe9A5bM0pC8fES8L/HSY416zsNKEksITGXB0+dw5Kveh6lCaWG6OV4/pYv0eJQrOXXKmWA1o3bONNESXUhJ7D3w4GpgMd3ggZKFLLu5x8mdKkwHRQaLjAmFyyaOIS/X+hez6gh5VaD0C9yagBSIv24vhbVnL6XanRb2QR3bXBHISYcKOtumYtvzXmrJnk4ENg8HO4tWFwwip3R4ai4M/a4a0mQQzzID60AuocujsMY0J7t2B+z+kpDuMKZRhXRjaYaVTPof+MKZ/DdFVyT4PlNkWtc5qW3Eiig7b/0wWnDcEhrv4bI2FC3kqNsaRNDXJy+K8c46ddGQbDKMPBzGegtrvUWQ5lz8kDNZTB6GJBbJRcNaGIA4pPtkKBFZpqmGi1qZUuzPo6ze3f670K5rDoCLdniI0XoVGzRdDJcXS1CybP9xHRHejeq39KToFp044zzEy4wTRyseuntpo8ubxzByLAqpBre4u0OUGuzGTIKnWomCGpZWWVWxvlVHi6yUrOH2TyWnJr0cHocJVq7K6/fgZWVDybEYx1K2digs1mYTT5TSpUxztEfYrsx/KYRy2+lpqWcY9aTZV87wMevh0ZC4hU6jfMpEAoqt5i7yfARKIpSNhdX0j9sF7luLD0ykCVULQXs2xuFpQNWLo0qEoIRcDpZwf+m6PPcbunZ7NSZVdfwVpKPBQeIsQPxDFxxw5x9RC6AmiHWr1DfWg19q5UBxVyeYRSYW/xKXHNMfJdpiKCLGBfoUiPRxcEJgtqPfvGs0t90gS7Qn53ylNjaE7cK1jsdE2x+/EFP/FWquvxLUMKyMaPqp7Ha4qtC5Z4Z6v0nQoQ1D+NrQXsfYtbxIc8NhT8g0qo+I2lD2pdUtXoC6wxsbF+BCLoRjYfi54k/kD9qyDjPkV1V6lPsUFk+qJeZYP2BOV7dwjKQzQa0f9+jzZq5uCqPnUPw4BKkxd4khpRqjcq0iZu4Vw9ByGvSKhPvkLUEBcYHbRI+8mZCGSip9BwqTyNFcXVRIwvYxcv0lngmGeUuiejNTVrA2MFdR0Nlr3mpyRPEpExlIpNYx6rKR7z+AKPt3Qtw6ha9yQitaY4e8Hd3olq3X5GM8o6gibg7lvcKj6ECX1BlVIOFO9Z+jjvJPpqKk6eY2cSytvRjQyfMzMg7il1PZlhpf1q5TYGAl8HKi0ddQPhY4yqPLRyBuIjbFUrNyn0LpD7KK8rNmXX2Gw1eO4KYuNDRO3QE3UxKiSuwAvrER+ejQ1WsYkOiGqUW+DxKfY426q+TGkxpK2E5FewU0bxckIQV+/DTLeI3uhCbOZJRkPSFnWdCZuMTpT1jGztj/N1W2x/dMGPvJPWptPtJqTbBd47NLrdmky3ZHiu3Ep0q6TQrTY41qhOtxrNbuE0q6rVGzWCtWm11rITMtWzFdMCyNImu0wj1ch2yXVo6qU6kXthtwSmEGnGnadyf2QS/d2K8xndBosqYkdFxTRTLJRPfYr+fXkOP0WkCtq8jnWol6hL7bAnjOlPxv3xDqX6ITVHqWtQF9vVEpcSoKCR6nqlbhketrasvJkqwkOJ9lCqPYzTHsq1h/HawwTtYaL2MEl7qNIebtMepmoP0xhQ1Q/B8wyt8Hb+QMxXfYWG8zK5PbYIyxNj8MCvrlVc823SferR9x/za7CDt6Ij7CADazHPW3aQQomnLi86GLADIQ4Un28WViK3hk1s9FN0IDKDH0i2qXUPAaXRQnA+hpqP2DRuFaaQLJb21PVjsdBA+ntqlLHWYk/DAztq5PpyRK5QvB5RufQJtW7ZMHpU3Y9FV7OFWVDZqla3Bl5CuFiMtT/ovQeaodMzypyxnm2L9dOwsRoKsj8umH57Y3h1S+Ue+S8Ujg3dTsOpstYorAprtkbePImg8QeXbsYE4jfictxwI1ao3owmCiGIFo4aW6mdntrgKYue3oYnBz0dhad+9PQuPDnpqR2eBtDTMXhy0VMHPJ1PTx/Bk5uewvB0IT0dh6cceuqEp4vp6RN4yqWnGDxdKgT9R+D588Xz1crNFA9FftkTTYt33Es9OPhxYlOs6Aj89B1WPheb9qAErEgbuDyi7JHbhb5tByKAskCuxfcpiIUbDkT59qzARzXKzO3dQECjX8bGfb9ZvmuHdpCqxe/hoUw9XhynHJKjgvIUzQoe1BhTcBhEPbpf71PYT4lLF0sND1yjeh4KOFcgsYyW9ngvgY/IQcJEaAAPUQw07D/iCwKz0MQDcY01jqexm4XAYkEh5iCuvpLyQhYdLDqisG7YtgKCxpA0QQNw0s9asBJPpKL/w6iYnRGyNTA1aQ20SM+y+KbxFMfwLFL7Q4za3QHC5CFb9UOKBzTsMkb5ILwUe0yU74FxTLEWVzY88AMkQUb5xET4QSX8b+n5qrRsGBWqzgaFPI3FJpttPcWJVa5Vq+vF51uFDQwzUwdb2Rsqw3HI0rOCSoejxXXPinRCzSAukFpBxw9sx6FF6PJKJke5mRx1CM9s98EMavrxOLx/hVJw4h0IAYyOEouC25cGE1/IvxhuFetddhj5Y3jgqMTDK7/E3EmBx/DMMfwL+BFYhfuCuiaXdqA2sanE2iIdziY8ttrp7C4o1v+U3JXa/HuBZT2YBcNo+D0RMizeYNGJooMtUieJrZV7olfXCOtWoTEaD/1+iK8OP8haQxM/ehv59nh/gvfA71Er2/CmVA+Q3My/ZolNry1xFAN9foTeKJ7WpY2UhQZ/wOpa6+2L6WvpNK1GXkXGf+jB+zR+sQOdPw6ytpOh920IUMpbdc1QGmAHG2A7q3JUH+BTGNLl6TANcGPKAGNsgPuTB3gnvmpnAzyqD3C/98doP4ABdtAA25MHOIoGeJQN8AIaYKy38T2DH4jG+PYnA+97LPBYIZvaP3+RSLxyPjmDvbqdub99yH6twF81rwyEkkOspJGVuKAkxEpWshIRSp5nJX9jJQOg5ClW8iArOQ9KVFbyHCtxWnx18Gs1+9Xf4vs5/PoT+9XP4rsTfj3CfvW1+KbArz+wXw6LT4JfG9ivbIvvu/Drt+xXlsVXAL+eYL/6WHyXwK+n2S+7xXce/MIjTmHwCXm3TV2F6yzgrlXX0OIKDhRa5VC/QFW/0HFbKGIr3qdQDVFuodziLjloB8lzFR2+YnpJsT5Ij27V41Ir8aISuiCAp3MIvxdDt+ialvpVGc7WmT6HLzOcr69KPl+HHmpaVvEj9lX6Efsq7YjdH2xZpR+yr9IO2b0V6ipdX15F1564KUnxKk1fvhX15VVmfXk6dsS15FWalqydNtbIO9hIRD/6shF0Q5aKB46faBZ8x9jPJZ8BirdhJd9IeNpBT1fD0x56ytuGzrHRAYgK9NwQ69+wI03whr3/Zledjx0eWYqXvJ7uJ67pb8MKq+gQKfLOGcpQGDl+Bm//gFWbZXCJyD+1Tz60mj5RiRvGIo93s0/as4x1F5HxJb+Apg8wESsluBbr34GH4gNi/T9RLFmjGzXWkJ+bGxAp77SLTUeYaWMNN21UOGqUNZppIxm3ummDtfW8ZtoAfCvPkL1pt6CuInbq28U6VJuQ+aBKLoXhrXyqv7j6WtQid0L3y6OU5OK/hKD/oTOsLxMc2M1niIZPBEwu7QuKTaDL/p/34hRXNyJuq3chMqP/NTKdZmSq0i60tGDuwqIT0bli48qcRdkORPF0t9j05CrmdPHfTd1o3y6jQ+/1OpEsfdjoDiQk6kumpWRDqzstLvjW97paGQ48Q+pVXHk70IRcQI4I4eNHURIIKp8Dc34XnpXPlLfh8YUPQBF6/gzKsat2EV0fjJt+/OEUOcSY9szICowIS9plIlVQS9kXuR4XkUHUT1sMorb+nxL1i8/WZju25y3IdsAIPjsGI/j4NIVsrd5whqWdRnb0mMkIVuGO/BJfVbqKTsihPgCs/zQdD7s5DuWglR8PEyajTya9s5vfRTZ1M7df9rpPzTWCQO/Z2HktJPg1Ih7QlCeA5nnd9HqwEpBq10xgx9W7WEW7HE7uczndlBi58QzLqOzZ9tAvYPQfVmv5d7d5UE0z/aYwvA+HSY5q1e7Puz/bsTMlPgO99+FtpLK9J8HyA7vE53lZ3/d7eOJmzZ+fpLt8dWr+KHVi/hi1dLH6BKaNLm5TS0eqtz/wgC0Utd4S+sDVdyeeoK8g/5/bvcU7H7AqO5WZ+TnqglF0qP6TeYEx1yoP5Ocp8ZNtcjve7+pWS9m1wAX/WGot+hjahsJcYTcmNhWbhsDXLpBYshPw4FTvL1Hd+dGLLzsgNjlvLY6IK9vRU/M47mBiw2EmnQ9IFLf53lExUqHJ7hg9Lt/le0Nxa+fxecLr8Mq9HQNYAjuyMTNqYGsW/lHtF46wX+Rzq+MutI8Yd5Hdh1n2fZHofXKz/X9Q0PZlAVWGwq7hgnzQErBfhK0VxG/CBL91Ewk3M/Nzi9uWDoKuHAgqQuzOZ/laAQk4LmXC/OK2umsQGG2IMDaorPDKGEqDbbVAZboJYsJ8rWm1FDC61Kq0ybvyaec05ofL3w9gMEbzlQhs6LhLrnMJiqeBshBfRFsMy0aN3qJ3USp6lyiuvBOelte5nr8AHV//gj/udW3BFKV1zhaJ4tZq1oqN2WLjdMGGPukuBY/Hp1ttnl2owTVOt9k8exTPfniy2zz7FU8rPPWxeVoVkKUbp2fZPIfpbs3p2TZPGx7rN0532DxH6YaL6X3VynbhADz0C+QOhD/9AyMHwR+n4lkmfI6n643Tz1OYcu/psNGDTWqwSbvQ96hx+gCbtMcm7bdJrQrTdTxhm3TYJrXZgDVJ7UzNEQC6TgEhEG3wELNJHXILHuzbQO73xEA4u7cedsMG0X8BWhrvW5a9TGk9+b4qNSyXnIiJ0HHxxwc/S+DBbezk+/irmX5BBY63VXvQGOqhbPrjSXZrCLW7+ksxedcDTOcFznPQv9f7LZDn6IZXTAUgSDG8iVBqGO1xKZVO3wfL62KxBDb3GGtjO8Jy8hi2poPQmtKwxynf60IxUWy0io236XP0kNg4GeaIdMvGyTBHaxXPOniCOVqneB6HJ5ijxxXPk/AEc/Sk4nkWnmCOnlU8G+EJ5mij4tkET31tnk2KZzM89bN5NiueLfDU3+bZQhMB7W+F306bZ6tNWmuToO1t8Ps8m2ebTXrcJkG7O+D3AJtnB6i/NgnaDMJvUQ65bJ6gTdpkkzbbJGgLPocvoFIQb5aodKI3awNR6CrKTyrhZQxDKMIHsdecCYEfwS+aP5q93qdNn57ITJw3xJ2gVgLeHMtP4wQsul6tbAjY+91EPwZD3b6tGsKX3xvDViLV8OU1n1FaEHgbbYcvlh/H39p3tXui7601/FFZPJzqoTwZWE+/qM2eT+mIteBW1YfBhuF/vtuToPkXm86Eoi4lJD7/BulxJ48psdAnLlrkgSdHYFPDqmPGYA8E1mVj/2woAXv/2oEMMD62EYFay03vJwRLbZ9rjsEfBmwfGota3QXDUX3xvq1aMmPaNVgD0T1p40kbDBtFc+j0EG1c2ohgHGGLNqj/ckRi0oiK1v7H49H457Y59yftp0VBzlFxZeENHHWUSeYvFBkRQya6rC4GCstG3HbblLeT8ogqb5tSiIY+yPEnArk5Jw/5CiKv25k/lNg4ELh4SAiFc0IfOIpaR+T65zwIst2noCP8CeqcCNl8R+TEkMB93eLKMO4Cb4+YZleAs+6DT2BHn7Mh2zHCHsCPxMbXgdcvP4aWoBHlVLoaX66f8wjeaSk27gHIVPd6+sTNP9kP29iV9MU0JxbiF24/ffENOnGdcyfuzJ3In+Z9VT8559xPrrw775zHk5XcjdjYqoTU3PWs3mFoPBTJYe3nBqgNeIfVc6kDmCZxFfIROWGrHcfoR95tV9pGZMmf2s+5MduiZn/CO6Ror9g4tcieiUqKT/k+UP518oCyT9mTnKlI2WMkKgq9nwOcSN7lYifECaC/b0emWTX6Q/ZZBHtiMBSlvu/n1Ic+0Eh978CwlNfFlVHa/4H8LjQj8n6GyJWpE2bH0hUMk0uSJ+x+NmErUyaMClew2VqSPFu9deI8505cmTvh1NdbP+5z7ifn3AdDBJvUj04xKzNRzP2MYlYwilmSQn6SZp9vA9ID+tttP+fWGP3lKp+zrF/pNOL7CIhKabvjZCsFb97XHanA68Nfj+5M8qel+N9cZF3r20k4cir+DvJJd8inLYq/DQ3/64+id/RDe9HosPowhVbhde158raP+aVCgZexQJm6CuO2hYNyfIjv85foXpi/06H0uGe6Ke7mksB6vImNj3+T4LWNmNANgvuBsO9zZeLT3eg+ceYy3xsvCOq4p9knOQEKFsT1kFr/Ga3+Qeprrd6Nm3XTa/tvqjSwooNyu0BplgM4ZhD88pRYFDXJE4QEwWsd4TrwF3z0HVfWE14CR+lAHT8XN+8TDpxSApi3oO8BZX0Yy+ofw8ASBKdmrT6GQcrn0T41awGQTdhmPwDnCxP4b6l+/JYBM1KlvgksemJjaaFnjrW+6oTuIoKZja1TXY9AsGbEza3CgdNs0vo2sykU/W8T2DjHRWwg1N7yXTj3LJogbqk9Hrk8xb9nCojE7E4a5bXQmSFKpUOpdt5RHQmdZfctTEHbgV6l2gkV4O3vzmrxS7Q7T8TLPSsdoMviZVeD8aqEyXY8TKreKkf7CIfUyS6lepv6AyfGDbbSi46CnarUoVTvUKu3qN8fHljnShBVbgHBFHP93lGoVO5RF49SbxuqVO9X549BD46qiehmPb4KM9pWHlbHs4yAys5DwIjliKBUtqkTZoBmP2Ek5cA6SmWb5Z4Bi65Spa3KZ7K01RqY5ZB3u+huPNehY2rlVuE0sGHlX4faA2OsGAFT3XpZPADQX4v61r4TIZfofwezzIdKRP9PrTwUUWw6RHmhLosLdDTDEwM2go48w3ro04LX6w/6QrLUAfJsR8NgVdpWLG1d6FQ9wWJQplb8hJ2NKzGMRYOdw1bQHGq3FYQCpYJiA7Tgsatnm1LmrB0Ln6LHZrBPQatSZlelYLHUsbCMsmwPkzpQJAJclLmMTFWXxZXSUcqEMfKuiTTtwzzbtvUhG5DD1MSClwukjm28leg2tAtVtyuvyR+I3uHFX9QOAkwJAJxnq7wb+JX1ULvQovyLd1LwLhu41H7oU8CtuPIeHkRTfZhhLo9whe6RHFcHTbg6bEqiiIgSGx2AY+9++X2x+DOlclPtMOwb5gVn5TPoHvsu9m3SYapmMNmwXGys3KT1Mcy3Se8GL62ROg59OkzaUQxq98rLKKAqVrCzuHqPUh1eOBATUj1OOUGPiP6hFNS8HyXLmTSUMN61Kl+LQmWzinrtrmGe/cNQU91c7GkHNVZceR+y1APKzgJPu4r6cZkAa72hlDSiiOD7RK3uwCv0PO3Fnv2qtDmQOxhoXpRvJGem/crbys5evtkfIVsIk1/ez8NIxi0tFsq6shcdIb4RHdONPrgiq7e0jGVpnWyU0GflWXYFqGdLSwnLdWWl8p+dJdV+mCeGd2ICIA1lAt6IKTfbGsqs8k4bQt9obbDJ97bb5Lp266K3VKmd7htA942dAr0vFQIThAZ6L/qzTS/GQmnkBJnqd6mesI7K2muUA9Btr8gIA94KKtuVtmGgoFR3YMO1FcpOdGSv7AhUnd325z/96U8njx04HnDfFpg60IbNNIwFyMusDWNBDy+zySEbQF+8r0HwHcOe2gRPO7ZY2QFzg4EacwAqXKiBKlyrYmOJ0CCwAZR3U7oapZJG1iBEbiBfa+B0W1pKWQZZgSUK6+b+nkQt+uDElZR4sLcBRi7W72Uz2Y/w/rHwo7OAc++0O62WqJNneArv39eDKcCcdotx45WWCiwgF15JGmz4djov8u2T6xwWnyOszsUDTsoNIo+CKuHa13oSKj2a04kNZvpveNMb0Ae1xQ6G3Hfs3ZmWTyZHldx4aFEXtnqvgn/t3mL4F7a96PeR4jywVzhj4paBitStSt2K1Bn9rlFeI/7V9OJS0wfm8iyyinaqUmda/4Afe3hhNeKno5/Vosojr6QRF9CpFEkr0NajWCquC8oxoT4IkPXn2VF+TdF1dhjWWn7fFbV3BbW3Dttj9RYyCQkfGxLaJzV8fkaGv5iJ9edC/QDwYI8LzwRxe+TXGf0ejXqd9ojMMuRQnjbe2kf/25MA5oR5TnwXYRm8xszr8AqDmyN4MyZGtsCbAwUhZY+W2cWo1kAcKgazmiCzi9hoGZPvuywgu1ZRjjCt3hZWrwQqRk4TAFT1l74fwncIVR0rxLpVBFWXXNeVBtWPEao9VJVlc5e6tFvHjErrqK8u6ms1b1aKR4vCj7UAucH8xqFr8ZWgECRHJODWQbkdr51zsldjZsMcnZeQ4uwnS8MVHy3FfN9KG1eb1r4jepUOUzwdJgvBFGfUT42K/p/jtFZ3791ptp+4cEkjvXXRvwCDyyY5xxM1dilWbKPUjoRZCprE3ma7JUm+jl5CF3hCBSfmbLTijaBKlT0hORMoNTmpZ++Fcp3L4nVpVR1qiaO4ecE/6Mm+22Ix6DGa01t7emOpzbxuaoYPzCTfyZ354bLbkV63ZlvpNBs4QldAm0YX5VCCgQPKriGn3LhcF7f4+gbk8xHxNCesDhHwD2g55CNjqDXZ0xyByXZszKXsUY02KEuQxRItz1ClW67rNlW5Qp9Ep6m3Sxg7e4rxhUz8ANhltAIPTYhsBrC5BlJDNlKh/WplFbCYrSqpO4Hrx4UweB2c6yDmR0vOBX81ajeffBt2e9avzi/yw1/MoPWfZdWTMB6cjajrUj1dOBkWrZs4kbFryQ3shYJT11LCUmXR9OGO4ebFjB1jkiVYcqv0KqAoXGP6HEpwq0KqcCS1AV/S9WxVjBy0Snadnoqba/OT4GDX0UlulkZI+95FJSZYQB5iM478D8X9vPDn0xEBd/WxWu7+DRnywt3orYUpwtYFQVNFwYASnEtdNBrGQLpAJNfqx5lvkYopg8iLKWBfj3+EZlXOXYXCS5syrp9DlfP0H05Vztd/uKi59qTuC9Mabw+1W3n7eItQG2h+SiF8mdwnMCVTU/gxyAZCs+JJbh4kP1eCuOQgceW1sA6Sx65aRksO3+DkQjnoUKSOyJ+gKPkFSagxvF+Z6Jo+9pbTE0x4P3woweyJQ1WkPwfwIfhLmMEbzwgrSinHiFLqwh2OtRaL/hE/xhmPwewn9erC6x+Ty2DgWB3GZgV5VQ45UDICDWRX3h2z9u6MnpdBPgH69xD923D/w1XrNAskJefZ9LHe048JFhSe3RjUGUcSf3KHf0ftuW3In1yM9nQiJGp2s/tMnS1SnOhpjemFU45nIx+hN9HFnHNMPks5n4m/JYGnXZ1bCCABM8UPiey/xzcTLXkq1nWbpm0mH0r8TPJ32bxnWOlcYEqKt8P1MifcPBUHOMJKDLhB2qWxjWEnDSqq6sdWkK9WK5nIu7wMdlEoH2auqUhbk6qBmujZJjePRf3AFb04ueq2gDwUVw7olNbwlN242W/TauxC70B4gSzhyriN+O1A1OQRt47+gE1pBwhklUAYO1RpBxBY0pe4zgLSPljZKJxigjb8lcbI6QjVWGNsrLAymCxKV6LGaCU4KDUr9u8ISG9pWbAVZ37404tAqiJ5Lmu3dFKI3io2Sm9BAZX5RpDURLMdkNpMAOBcz7XTp6wmzFxQm7kgi+qRgg3SyWV1uyzeq1XUgCpPsqZcrCny+dKaA0gwI090GHXoVMe7xUZfhvqUv3dkfngGetvsmoOriewlxD//dhvSwxUWoAePg48X82rBh2wIcsEqngMcL/6GxgGH+15FMvhFX85UQXqWXC+SB6IUI+m3W62Lff6csudk63iSZrpwFc/em3SfMpoDCwEd4esIhGdB6gSkN/g7MBCfBChnRtlgMi0Xsd7POLkcF3xFCHUVDD9AH8sjGcguXSpzmaevismj6Prr/w49u4jcYL739dEQ+XfW0tzklszo7Ivy6AkGhD+4ZAaTRwFhGznCSCfC8x1/DNpC0B95BYTQJFDZq15BZckZYtD8D1WOErmj1+ZHUPO9Dia1L/NgxlBHJshUKad3sAZQNiycPCQmLo8wf4PwnVU4mwfPstmUtiyr22LxonxMG0GO1nFAHtTApGlOUx+9ynBT4vaT9ARPObh5X4U2CKYcnJyGj1uZaE0ldwZ7EqwEEJPTYCCGchtI7Vjn7A6jYe/dCMhiO/6LY1PH07/zYfuKoyUM1v8mBmSu8kB+DqY8Bgy5FC/SIl1yHJC/rcO9CZvveQn1WP41/P4kxLsD6L3zeu2ui3e3mXWXB93lQnc5dFeVF9dvuwnxAXm03utm0r2o1y6918XQKzuQ1ucDp6MwfHASTkdZt6Ah8ZhHY159Kb0mLN/7iYG4NR6Fl8EzBjWWK4Ah+X1iDIUac5Hnf0zgJNHQ+EHad9Byh8bYOjhj6wDGxkGYPZ1KTtKO3y7vKiQqStUXkD+5wucT/PIZJCcn5zFdGo/p0nhMGpfPnYZdBPG0a7ahL8P2X4nNjWTNMakYCIPRj8dEPw6LTnXvbO9JMMGWrwBWDqhItOqShKZ/OJnpAPar8fhNtzrebvoS1o72ma4+GONFfyoDKG2wYW2wYTbYQFUC3493Zm4XwJnN+Xtye66vac/1de1NCaMVafnOk6cEXRQJAp40ewTO1j+pi27V07282UG+zN3qMoeDBNtUeQTr/57Xh//WYrVtyNAKWjk+XWG/8Z6aUZptHlKSqLZefBN+Vnse/G6h3/gzg37mCt+gt8crEtvr3r2M7g5O3p+wfh+jf0sm+DHfFRsvScaoPJv1+fA/evTvS+wp8iaNP+n7UnuKPSDs178H8T1dXgX5dwLJvyAAaoLcbwHkcGWPpjDvBmUOTXDeb6meuNzsIGObnVmB+Hp3bu9JZJaH7eFHqX27qX0rBprw5++Ynn+iW6f0+9th/Ge18UHXXN1ztmSeH3KuCF9OHT56UmBQf1uuc1qWXAaf7sZUks7wBzgyvOHcWOsTX0T4XchEkuLFGf/7PvE/aC88g4CJhZfRX9SehKX9mTwK8l/0+7DD7mbKoWHq4mapyDZk6jG+hNq1JdTO+U8J1vk+GbRjKEqi1lKYKu8weEoJnhdOADx7uhk8se6M8EwgDdnJdgGHfgsLA+ie7V8P0LbudIBM9En088J4BCf/BG4PzPDUZcJseUIjowz0geMpCS+gBj74krb73sCxSeb5wggRzcZ3V0C+50L9PlF0Hg7/lSR/7/eAUnO4WdjN1S+29/yZ8Wldl0pvYhKoVmEli0Jq0ITbpeGg5I7ZZvvJuPALFTR+Bj6JCKL/YoGpdLSx3kWtkJlU9Ectpje/YsPQf++l3/GAvCwFmnYry1hOQUl1cTLzxBGyvgG5n0KTjbjAYgA0bBSHWdso7shuhcl4ZUj/zTD0oRw3+Qw3eGVmXkAerBBuclUpDH9yAvK3WAHJ8wH5ciUVdanADrJz/KFZADSCZjc3ZiKnyOJBGpw/5zH4kECcuNvFtVMBkgqMCb81zLlYfLTU7dsH3KxXff6KcrJ/f8H2Z6OJPX9DVVE35pE1KHpBskGwoQ/X37iRKN1ePzK8U6L9H9oPyAsVTaSiz3/BiJ1maACSfBAWRDhyAcqf8pLkupVJdZGxuhRPOBIhlD6cXPeypLqVcTmUo1SGIy9T3SeT637ZkwoDHnBEHqa6f0yuu9dUtz/BkAswRO8JyI8bc0oHNrMtX7OitqaRRWoTID/qm/5Wi4HnkXck2yPvGof4PfwZmz+A8lFiQih9a4IIyMW+fkzuwvT56P7Rng3wq7c5i1uX9tWMfxNSNPCTZgXkXti7QYIVUYoEkRPkFFw4F2kqLIpPxc3i00H2wqCI2hR7SGH4b2Wk/xoAHwPlJ3w2zqCmhe2iH6SkSHHUTTtNGsggyinbidcyJKvnfJYejRFzJ0G6i8x78NA5DFd6ZwBEf4CuslP1kQJfBY2GqZmJMFQvW3PnfwTw3HQSI1TdRPskUEd/kNzNA+THYby+Mfx2p2YdYqI4CKd42OLULmlJ/v7oxxjE0cHMsB2aSJ6crwnnVy5FdHV9CtvXL6ADEvfF+g9N1inK8G8yv3pnoYSQBzTUNp7oJqmiJ6y4Ur/0DcczCnE9zR5J5jsYfabAPBRgjt4bwDPAeFIbDg2ZukUQ+9euMQp1IC71DlIAIpCm5jvTu3sRxhve+qV26JB2Xgq0iH6ux3LgwUk+wMn7f7hsLOAutO0T4D3L115AElCyPOgO51GV9Z/QdhQKM78sIhmH5lRGO2fMXuvk5xWR5cxGEGq3Kc2B5aiUE5mxxWYHzdQ42vgBK7Mh9XWry1vXJhLAkRfp74uBNQcenm9Hj8E+6jiXPRRnnY6Wurx6rUFQC95jb1gVzdPGwUQKvUwpQXrZ9THIj9wsOhZgCDyq9WF3pSM6TyDTH3J31o2sdROOXoBHczICXizFH9iaei6QLL+7w63fQ3xKH6fgE0987LX6gFBxUOtDiDrtbEeD/9HvkfzLGkDgpvQk9ANKfbWNhLWtkp12Nj+/btii71fevjCQEuRP2Qa4mkCSb/DP8BUE7OOdApriGG4VK5sl3F2diitJfpsG8EUl/Zgpwc+LUdt+JaYfHCUY45pJxUHlc4yL1wBzwG4EW1H0WnbctLCffnr1P6xEfASWSMqRVSVnp7PS9SEHWXy6l9V1l4jPNMOf24EFX9bKGTWoMHl0HBaPZouv4EEXkihfSPr+fzPt/1Em/vu+q63NzZw3eN3mEhzZ+bcBa8H9gG8ckY0mZqR95stP/eynVZoZpFoTJ36W/BXW8kymfeZGZCXw8ztV9HNYamOrJ/MT3o6kJjwdBnOjAhepQBxQY1cyn//fROM/rtObLZsZMmiTS9KvmP43hvS/4yZ7hmklncjiVhCTOJR83vECfZ8P32sO+wF5zgU9Gbhtv9s0684Izbotr81Ys32yyQ6UfDQBZBAngDL6c7g1HrEABUu0cMTTjscCdkFTyEdLrgUSM7YAYZxPQmjouIuVFDf7CpjaDe/6syegaJ8bH6uc/Jyyk6AjpoLiv2u0FF8kc7ZAfCA5viEAVIvy7Fm+8/m+DZot32ZMl99waRlvRtMtbYzTQO9x3BrxOKhB6586SpeH5c5RvL/3ur9Rf3hBkd7fUZ3ZMrHgKI20iDxmOtHmKNEhBUomcbWymwkeunxF6R9xczyqSkfN9jP5Rtr//436YhfpIxpseCTGDox/x2zipBlEmJU+ztQYTiCj/0ynSHNBMEBtISxexze5GIOVLcfZeI5IYpV5kI9ep61bN5fAxhrnw9pRiHEEfTHb8TjHE/33Ud6j5E3DvP5+V0znf/8WDD3v/WtJUm7hnkh2w97l0GwfN5/Bq47S6JlOxS2M/mjgGxJUj/WHL10ELPkNZtJXQLwkeOo/EiycBR06bZpkNugJrKXKOD8u0SZxcaXJ0suqDkGbQmWc045+nnWGz7YhKWv60qOjaP/7iPOXMNFMJ1FRjJ/+MNLR5rYMLxqRztCZiHcAvEM1CvntWFr9Z5jKoNPTCGp/44coH/BV5yJScOteMFze5u2j/Qcnn0vrXSWGu0B2polN4Xc7v0v634e4xzrTDzd4J7MS/JDYbfLPkjtztPV/ynSzVbK/3F3U/uEObN+VvkT93+MM2d2LfnoFfb+ug9sjnLAgvFzLDnMfC9Ab5LxLyHlLe+jixJF1s2nG6frB6E18R8BZghrjrjEtH/rm4PcQg6yyC5kBumrAWm4T+O2FNGE6PYuNJY56dAZgmBqnb2v2/MRBFFMcDVVGPYSjW5ucbr4DdDPzd6q9P3zFd0j++YCP3a7WL4+dpQVTa6wn7PQNPPaosmu9UnOZ+KdW/xmqn7xL8c+S+LsJ7m/xTylLXJVT+wbtkCUOiyEfLryB/P+OGfLtT0kQ0JWKQidZoVS8FMq8lRW0gngA4i+sku+Y9jnnenbJRLjAk9JEu+ppx0y/rQjWeWUWS4J4mq12DSf2DP5WI8OHRiJ8444RTmFs/WBsE1Q5hjIlMHe5ix7aVTlODx2q3L2WmZ5ky8P40KnKdnqIqbLjYabLyk56iEfHq7LrYd6S+2HeUs7DvKXch3lLeVpL+VpLQ7WWhj/MLYwOsakE/h/kFjVk2e26/99Rss/clEbc2alkmhRPgPNzaASN/33OzwHbJcQt2SZKa/LO75nZJBHrNWh6iQvGXpTLyWH9WN1/8omeNKaZSf+h/ne1U/+pFJBCJnjRAZPgcI9MmPxUjP3XRu15e2uvI7m9DmhPO6P/AW/4mCYl+Mbh3uhiR+1mH4VlN5OUq2NjODssN7BxCW9qVQlSIRmua3+T5qKVkT+WXU/+f+/1wh/vvrF3/sjsNVZqYCE2ACIULiw304+BuN1yO05jf1UOk83taLQvkDp7BDmGSCsGI5YLH2aWNOyyWTvtFP1Pc/NulUuTP2OqRT/hhAHvLtYk21re0vWmlhbr56Yz8K2D+UGp80kMYBfm8g2amXZg+IlWTa5jzd1gaq7AYhKj2zUm2s6ZaDuhqdB8/k7nJ8cKET9T3j3H89LOUWnnpeiPiptxNx7BiOvxNLNBE1X0+VxI3XW8I8DXcsmVSDi64ee68ILfkn4AmsJ3H045m6fK2POSp6COPAZ+qfQvO+4uudJilhgrR5npQpfX3OEvriP95x2BGzONYZHai8ZbPrldXLiA0p8bpe/y0jSE/Nmq19lO8N74cJK7gqotI9H/hNHyh0ZpPX01Jvkrj7747iEbFVmqxtu5QqWRGoiVyMvD2TaNAi4waJa31L+H21XNw/3Dd7+Z5sXnNycZBkcKDDUIg2zFOfUNRr/ZkjwTgh48q9kXe9vgGzP5/15L6/+IcYS8luvQDxouv96xTGgBuikx0c1Ak2K/kX+V92uUf3Q2uinVpriJqfLQQtKXxjC+uMGsIqedrz56Dcm/R3T5e+FIxiPQlRx0TJ0nLtDaf4hLRPDWOzrZKPBQqlGggcNirkC4gDWR2p4j5bNks7a2Hj4YjvBOfVuwfDV94UlO+I8WNrcBuSqZuJ5jnoU/TqO69Wc0+q386vbvxvYrLBrtwIaeb2pmUi+ei5nMA8nyjI3G5/0X2oecJgvcNBYWqGK6ZUZDI7h0DzSUp1kpXMbEw8xozLdvqgIBYIRpa2c2upG6PuQOy8NI/23rhd/8vltf//fRudHtKev/tP5+sqBzjdkGPxot9MKPLjE4y0XUcsrMnDmlvz9p8CNTf+9bMnz1D+OrkOYB9tU8aSHpX0gz1clN4RV6MKd1aX3cqfXhuzPjyN4XdHejtG+v1L+9Mo3ZvXj9N2N2pviakeGdBaT/vWXwn1F8zfXr1o/TxPp+PGSD6Ge2iQflmXjQDP7lkxuQB+mrfGbqKqcCixy3LtJNJO+Y3Xkt3APV3C6mpAnbTH6qvdey4gGH3cLcwnncz7/WGQyEd4+tJX0MMO62u25Mrlby9QMxM9MZycz0D4XETJMOB83+BiPDZUOJ//9TsGiWBCeJb07mY54XkH+WTAFXnORidntkCUuHiDLVsicFfbcQ6z/WSZcdE8KcxS5jax4RAqT7I2aF4iseTVUkR0WGCcwTDQ+x/phpm994QiPAxV+9OLCH8DSdPU7Aei5mugBxZhljQez86SqNbq8MyL9I7u4GvbuMLnQMEdHFAfmXyd+d/VL77hbt7CtDzz+6sveeX/rS1HMv7JB565nsNyD/XUXy3yH9+HTEpyb7FNM85hD/z9VPHeBf66Jx0csycoNHT/P57ooOzVjBekKvkM17IP9id+r+nWRV0+x7O6+k9X+I/JnoZPu2z5miZTaw1xr7P9W3H2L8Xopzq+dTwzVMztf9hTiQJCW8o8t5V3CPGq27EZ9/LZ5J5aVurrJ8pUdlmn4I+38+7f8HaT4aSLHGhj6+hjFFHU1QP6N97Hf0vfugNl4yn+K19uHTH5ttYvr8U/2OA+n1J3ySXh/WP9XfatSHPduK/KKUwk9KHcgNSp1k0tJMh4XDNCz4MiJ7/lnTJhFXq4ZyiySSfNfHJnS3aRhs4xhs09Gt9bW1x1T/sFb/MK9/mAZklgcWXkHjb00f/5+wZzZ40/lWGdXfmlS/KoccMN0p5ttfFGl2CZ3OWchUFUvalmT20fQ1tBnyiDamhyXtf/nhnZcT/bdq9kXNp0bniM8yXko+ZlENF3WcHv9QoM3ET9l2DBBpmL5an6XLdScymp6Hi0xE/HUUP/JrKV5jQ5njdz64jOj/jVT6vzqd/tn5F9XPf8OEDzoy8V7A5f2dRcz6X+I0ApHZfGbkL3dRe4dfJ/6CwTvhzz/uhb+gvdFjtrs00GYU/Ir1CfIvte99nZs/wpr5I6aSdNCVbAgJyPO/i7JJu2EIQeQpKB0ByROevxWQ/fpWQHOwhcR2sf7RJHNIidPw6qJqLw7VpuregLwquYl79WmcjLCx0D8Hj5Dg8ZW6o7FuBbkyDZQrvwED1PYjbv8YQvaP/z1X+8e30+wflK8Gj23Dq6nNxH7BogsqIrsFnpbMWJjn8B1WzXlAnV+o1nXKLTkY4kYXoWjHRN+Fpap483OUB/Ld7E4UI8pGMQmZc1ES8dO1EABa9UPM1o/WwXYCAAP5uD3ffZWuOjxLAdth5q7n4N9z0jrv23q1MlYtIG942HD6uoqvel59kmH8cGvVHzOZplYbykiXhb//lam56uTmEoZ+8w9Lhua+ZzT3e0sG6CYnN7dFVxjuT2uqS98LZmmCEA/bWFZkCEKzcrUWRjFHSbu2Wtcd176/FKcP5Q0NF8Aj6WIfosJ+7JkRop/dTB40nbN0Cqav5pm+mmd8NY9/xW5Ton+X79rMLkXIbM93h23fovW/z9BfkGOqJYXouLoCT0I5rb12BQnISbU8caWqMPzOas0o92sTzeWYNJKRXLH5QOlJhD+/nET8r6kuB3Pwi78qht4x0kjcUGvI/7m0/+1l4SiG+DnvYm2zc/L1HVmmSfVYhxR75nVzMQ9V0eTBbi4PdkQnU2aBNO4XNrhfWOU2dibKO1LYEQMGeA+FPqTo/8QEC7Vg5kKN/Zv1G3f4rkuI/+9J2X/uzU/ff2C70P1lRhubdXJ7g6i9+j3or1r1XTZxGcXiI98yWUgNe/uhi+n8Y0+SfOLGD67uyCTP/Y7quzPUvz9D/XHhhVS/o8WozxkkTGMrTWPUYmht65gjah5JPW7Tkq7s4JPYGnmJKPXrpcKLL9NW2C/NvpOw0p8tNla6N0dXeVinJtmw7YNzkw1HmTejjLIhwK9KrcxDOvP6LRtM9L87hT4qL+9FPhlE9et3p8/HhA80+dJs3/ggh+Sf3UnyAXr1a7JNpnOSNPEgtqwubEHJ4Gl9OyZhqPFrJQOq9kyeSTJ4NrmJhWbJoIutQtWhaj4tsV4lg98ltzPsG0oGxnpi8kHzRRT//I9zlA/2DzHLB4Y8v5Ca69ilzU+4TIfrUmOuXmn/OqWvN/vzIGq/HtuXqyi/jH68Usol1IF90tw8rkUkNdOoMAVNlTkFTX/+2ek+uudEZv9olv/nQtJ/d6XT30/a0/nB3PBdVP/wzkz8YAvxg0rDilPi4pEV3pGa+aZT99hlYQR27iMElKHRAsxMpxzvW6u3eAbf0yBR+qKNQhOTjrKegK45bWinlIzB7CcG00oM5jAxmDaKwdiBR85SUFsUu7SFsicg7efM4Ne6CPEzlUKtgVHsoPPV/mkcZ7/GcWreM9HBNo0OtnE62KZzHK2T75iJfKtWfyuvv5U4zhZV2iLvmpvRnwT4v5v4f3MKv3nnW73wm99RfXdz+ny//W4Kv4H9i1LOYNacG4G8ElKSw4crUemU65wJ31F+MERhH6nxRyOov40h7C9H5WFBgncg/rvge/Cv1Tsw8jRNHMu38CtzAqAM+6Bs4SbIePQ+/QTAdXMmP8UZxM3QcTCnxWJlfRDoo6hE+JqeBhs9JWVe0PKTaPGgTMcnDQhpk3Rz79V09t6bAxKgiksgndi24Y6Y7N9sxJtico+0aO1kcB9k/gpmfybz986v+35C6veM/51P/O9Vw//lzkCS9v+oK4073UrbkQu9MYtoD3Ca/NF4b4/Xk4vgQPISiCtWjW0OSkjx5XVxzLqxZMPX+Hst75yLmlnrQARx7KukkmPUVPjWHJO/IWhym85yTe6wkSgmOkj1dAXkQtBNlPr1W6BGQupaXtdFPXcE5LX4wj8S04XKrfQcP4uuhbqTe4wiokLtVgH/qg/Jrhjpe86AH1tjooqrhIsqzvxwpK++2JlrT9/aF+Hfft7r0C8rhuFVdpTwLdrb49wBshCh1gcRPZ8HbbtYGZExPS3fhfhIsX+4yP7xiubvKHVpQ8ATMjQ42Veg1zWZnnA0GFuA8no/A443dVfJqy5KcpV0G24gmrxYRv1tfRnphSSn3dIZFunpI4aDogq3tRCV5JMQ3oU2NZRN4CGHuHoXBRS10UMu6d1deDyNkwoPw0F2DEiHGTNtQ8jG6CLJearnMDL5Kid0LTCXxIzyGrHlZPuOOyyLdP63o1d7kS0v3V6k4xvGT99vhe9x4DRkshlgSywXW18EK/IbXWr26/IWk6G3WfToSe8SProlpgOQtgw76LUMndoOWqFKR5knVDv8KQYlB/5cr7JsZSsG8sNlWpKsPS3q9MIhGhbtycgjfoezeK0+/S0ldvaHJZNi+GgpcfHAsxZLbPDn75rpg+UjuXwAxf++ZI4n7dDksw5zeKviNhBxvh6uS2ajCQ9gdKyWdMTgd+i/aTgcAWIaYXWEXRbN7pbuv/XoeST/vKSf97JEh8RL5n768Zfh936hBXokDGcAcqwAbdvFkwgJaZKW7n+RAk82wLMswTltBnhsBI93u5CUNdFipPX7eV0GeERydjXYaMZ4Geb/7KT9f7vJ//l/FyMy0/2fGf+n+h0v8mwf4WWYf1FX4VdaMKTfnA1xqlkU1U/v7wxoTqo0fe/pRvjByISN+NMTuof7JSQ9bbeYmtUac6NngNdBrqxOnIJYUrBNsn79Qn/ifwS/E3NyIT893/BEuVDz9VBYcj7AoSzF7XqKpVR9/S5q7/A2g59GB2u+8Jw4hfN5sAgzZ7yfwjCT+c0gaq+etcfhWzvQgO883BbY10lgafTl4Pt72M5CiDgiz/Zojuip5z/9aP63meQ//Bb1bbpzQ/s1ZmAavJT/ZXj4TmrhYJNZwTqqLeCj+gImtmcSL25h2YMYC9QSkwyhEACnWtmptChvdn+xkcSBGNJxO6PjdnnXcDKXrU3zN5w+jSKUXVz/nW+nrcGOoUyNcU337FLTgyHJNfgyjNNYH2zIEhuzSM3Jm5WWvwj9ERf0pfj3RmTo7wl80ikGQWoPSO8B6WlxeiwkKCY3w1LsDLXbKUqvS3PqDiMsPGsTTdHt2SSdXqyiJYJUdqb29dU2nrA2KpZUrwuDZNuZvLtlvHH6DaJF4k1YStcAt34PGrwSP5jv0ASvLnW8IzkcIPFmg/ReQurE+mwVDqDzhdFQtIq5pUrvmbwPG83nTzk8OIeicMifwJp0nlrmoP3v7yTv85lh0ENlQIrQCqJoiyVBxJb6KoA2Ixcmwkx/Q7lgM75xBeRgFeDDShvUj9nMJ3u9avMO6Pm+hpiYyZeI4vvGa+3CJGLTe1BodmXskfgETSh/AWjgioEpfo/yJ1yfjQj53VZTAISTpLCYhaegkY6iNkriYt6EHnME+B9ZilYeIIFEc6VhaW/CtnydvOqTcVhe5Q4SNTDdKbkmoH8DUuZDlJigi1Jtxm6jgIKk/nGlkvRFjNRFpNdJSORwlUwwLG7nMw8mddkOZuy7TPV0suTooZgYUmegY2dlK17QRMYyzGjq6eThWMlGNVU6jBkbZpnPt21ZtP+9oPPXuME+caYGk8JKQ/YvxH2LhLL7F/YkMvHr/PALfYj/s/Zg+ijoH/MY8MyY9PkdC3u0CEwKCqd7h9C/g6VDxCJN2uktFMXgj2Opx7/9TbBEdlrTsvJW1fawfBAdFt/43jNqUNIeSsWEGkWSaKIfAZD5LHKvlSK6YfMqaPUHl4zEqAM9pW/zN2sEJUNMUoq7KEvyW8w/1ALKQVF62ZSVLP17Ssh7iEiDmvil6L9QQBWiw0gATOLnrT4y2ctogDQhIHUH+eYImKcdi3UYeYyx4o1Gn9H7sM9Oua4TXU+xbmeJ8lZBixJXQrCEyolAO3iJjrOJ+U5KRENKawdp7dBf9DtJnTWbEMWiK6/niEr5DiiFcPQ8B0uKoQYW44G3AOR25kzp5NmTeZ5inncZXhyEp9FSh++Gc50azF88hnTG1CF+A6BjSVmNr8PTN74hp+lTenwwBf9ye7rYuGdZXfccFi58P4ULw9bSN5QaQ4yFe2hHZjaIlPOT68RnMFIZnopZ1ofLWI4t836dqs+huLtFwJCjK5+ncOPEkpHL6xyo4C8dRtEV/0iOrsB4d9DhhWYeYZjs90zmrXT54DbsYefO51A++ELQstCu4/qtx0H6tVjPDru6Air2kNozbjUuEALsrWGy3Ps8YmPlFzzD78i1lEU2DVZZg9WVklHCMKsbAvglAJzFMHCIq2cnvlk+iIUWkv//gsP7VOC7BhseJo9xUmICu5GQwCLHE6jqx1lg7k+prDfoNQmpCwUgbeyjxEbPp+Qwk+qFx+Tr5OEx/edSAM7CFgui/PziVnHFTBYJ+pX2b9D/Ej2o//3FsG/di9FaGadJHefAoHlkW73VmOqwpwe9bL7v621dD6ZuKOnxboa8G9stRS0seEXqjNZQKt/eVGmGYAT7RvwCkdrJNjYGXeIAgEZyOMiJyAex1TcLdiuxUNyqCNCTED1PljrtPGGw72EQD6NcXE7HZ1kP4nPrnw35L5cog7xYUEl1qO61WvZP+dkpKZ7bTk08zzBfoO/oZlgMW4mWGim4MWfpmbRo7GIKvDPle9bqy+FCRrKaDfvvlKGN5sYI2c5kb7/rLI7v8J94fCmORrdCPzu199FkiHdiYXBJ+RFGhm3UvvdPJv9ZG1fUuPUMEBlpZVnwcZ+4HEUVeprpvYA9MYQAWAlMzbCE+EjMnOSfH8yTgHjIrpl8bgrI/d7UzuDoXYvu5HCZljlId/2iChvsplN9kukiip6gPxa5ygBzyJIB/Gmp6B9glPfzVX81fCN0+HIDsjMZvm8Lad33M3X/R4vWTTBux1lvF8XGetupf2IE83EdV0nF0a+G5vc2E7bEZGh+ZUnClpXE6+OmCvfYTKZyAjc6i8Oa4Ks0Lq7Ip8CfGGZkueqrgcmxaXF8mQ+3pcMkYSf7T/32NBLYoE3neD662Zop36Y7PIWa2/VH9F+YP+Mr/BcuOWs6TqxJ2t+TNu7U/IensP25f+TrIZ7MXbn8LlpNMT46vwy/gN+GhuK3yzsok2qqfmAPP0rt2/9IBj80SoQH3N2j5TnMcB/IXVT/8B/0/B1v/CilerK9bQTV32iqX/OV9W1U32vUf2buV9SH5RvH+uP+QPC7hqC/s5GOzGc6MMb8YU5m5wL9B7SZIaT+cPOtZvv6Kvsh6Te54Tupx4O/16K4hSCLz6S8Q87RUqzWyWweNu76H+NmrRcpsw5J4YYF6PsUiengVjjdDMR+OkBbK25GGxg3Vf6hh12LAxWt9DcG6qXZVpR7B9+W+H7p0u4tsHnYo724ufbypEAhyt+W4tE+QgMAr0CwW8lE5TLBZrSoVDngI0FzUnfNmp0cvzjiJM3/RnO8Vmr6vCpzNgKDPo2bGnrNH2EPHzpB87+R68sMaAvDm8iKCHPz+G1M9GM2+2G2+GrzOya8nFr8/HdGRLWTZxuJIE8DMsvFZRLtNux5eoV/88yK/EoATC3YUpLDtmwkg684OYAKNfDCyuygDjKkIbhWwncORo6jr/GPmKYeq1GqsrB1bkniAeVyXbvFWwP/Ct4+tPtovmoWJwvRSfgKkTcP5HZ1K9OWyDPwOz9EJbEt6QtPmxEcQwVknXRFXuM3I2XxdgRTO5/cyUEk0zR1KtY/oaOAXlEuKYeLH+DgwMK4zAE8b0B2v8n8Qn//I7LLq/NzmFdPfzJrUpA/JW3Cp76gX/GkBsjxvflu5QGmMpNCQJklh2vt3UkpRRkJNMyhHxr+GJy+S/g5EOY74bK+lmmGHTGQafYoI/ej8q4x5nzUjJ+z/H99udIUPZ/IIcesUZEipfnfTsQDmgFdSHJLfyOww4QXMQgr8PIcgKz7iz8rlR1KXdj8Am8epBedSl0syg1FzaHjfRjttw8R/1y/fk5CI/jUN/h5eCggw7j1wRKoErSkiQF5BtvXXQE/ViXZzj8nkaxjky/qXeR7jUS39ILwm4hRwKJdrMdUuZGBepbRZvnYEHoKhfuIv1tHrYqPBFGhRjk1/OQcMywlbsW/H89BXsZ/Ld4Z7AEp+hFWhVORk1l2MWm3gwjKzQmK6fUllBGPKYUwpd/9IREY8y5Cl7Dx3MLlZDxut6Uffx4vaLYv1ZLUEifVytnJLeH4fRcSt2LZJ/2tPdwf9rpwcLaOlanspiuoZdXcy3Lolh72AY2fnpbvmihwJ9mU8yt3+IPPkFSmPmO2D/JMk1bM8xZn5P0/1T0Gu5sfT2J3bpM8VBh+hBq0PcMT4DAW4iAWcl70woA8502SkKIXBeS7+aN+/MVyH/VmwhovB23sGAS9NzBf78mkIxCmmY/jGY3w1pUJ7CIVzvs071UeEaPbgK+Z1ZMwzknMKnym/L8xHF7+04JFz+ZDh1Q7Tuou2foNJ3ZS6R1qZVKYyt/i2mHdj/WExQTHYD12s4rvFD689MfIMfqTNw2/7XnxDAFTlJDW+vJX+s7puYb6c8itp+iE4kyavZ3Ff32K4x35lOl8874TiYznm6n2Dpa5Om277TXeLPV7zf5LEPztSX7C1kZkdVSV2ugwEyhMQQttm+o5qrQWHeSFYUqxSJ7l797Rk+ClbYrnKK+6W3lLOfkK4xF060GTXu2zviGlsk2J921l/UD19EMz/fz3E4TO/aSRf+58DSkZ5cuFVL/j1yRfOijepSuDfDmBS+K+dsO9HiVOO1uRnHNc9L4mabl5/X926em6MI9zPEN632R4PviY1v+vU+L1zuqOd07ueNUFAtDXOGNmypcnU/tdT5jPR5n4ur09oR03DOnSXOXS7YGl1MALT+gO8AF56wXM3d4hpvnAv2zcjHe7kXjSO4udOvEgT/Oes1W7mgbNOSx+IYfsxsOAf/DssrgCs2kFzjOtwNNXpCZWG+oyDtW/i1ZtnqjWkXrxw5rzTIprh5aZJ9V4mNEfekQnyb+/4toCBRFUXUQQ59IWkMeDRzmJ1A/RdNqvyhxg+DcdipL8+yvjPJ6dAqPXnkZklkaaOXJHZXT7EQrrQXJ7vEJERGlTdIPITBxoT2pP2zUy5f+h/nc9buxH0es5BeqMcvjMzPa/C5Ny1/n2pLm7ZcgX98Fxov/HNe0rY4cv3fFVHbp67zAl3+dQ7sNEB9jd0TE8K6OTZV6ssht3itBtEinWt4vRhYgla9Tu4HsFGXfK9XpJ6ycvbKUBLnyM78exyINcxnYYh2iJdzPkaK1VfV1MvDWiTmotFJBlVrZGvGfS9tiXY7i210V7r4PfxRhDTBlNDbOY8sTPS7Ge5xkH5Un5aTWjnZFFnbuHXsjtjWTZgU2Tcuwmu4Jmzvf1QZjmfwNHT5d2QVHSsJeya2OMgp+hgNJsygHJkfGds7oUsEHzyHOYvvtOakNXag0hU0xu63Y9MmsSTpfTdOb5TtKOwVJ73Ub+O2HEdCfdehnD2+aQI5AlosrBTRKlDuZNagLiWYNTin4LTUVyljDGH6bR/SgO022bcX6SD8uGsxvJgmmKrcruk+/SawdHAX+NMyAEC3Zre4qxleHwWLJdliqX6euYUvcxllLXORrUssdIRKZJ7iXfyaB/43zWrxOMKxBxWqOXJJj/R8ko08D/eNag+/fSMs6hRdsUL3QkoR80OznSIxjsl+SGwKJxpM60llhusQR3vCw0AXH5WV2KxcsD+emkk2xJpMlHr+PJ9c0GS4Kp5bQplyiDaAUnO9wHaNbxOZ/bqeBxKBXb01DxZLeJBkYzL92f9OgRhW6ehXmcdpwZzp7Rw0xHHXiZIT6ElVLXV+WXQ35UFV7wIU7QB4/gAdhLuA291CBtj/zKzjG4I7LcjjgNMpzuIM+dXaq0C03K3jfRpPwafPTajdL2JYPZw0vi6hvstKO91iC9FClAA3fdrixxVZMNm9gF9KjW5zwA3wptiXZcS8ONtWR/G8e9X67bT9NKoQKRIQTNDnS48O2XdwMqW3GrNa3/M2mXqgx7W1uuN9BH+fTRUNNHxekfnfiXaQJZ378joFvFxipQKPc3oM2nVa0CnXS/UpVLzxPpGVS9/eTnRJ8XU59DqU/ztP7jdFqfViOFzQbyddivSMGIyl0rcg3URNoQNYflusMm1NhtHDVtqu+wvNuN8nESaqak9+hKH+XL1HMbkelhGsxhhKKP1bi9kX98F0FxVK47aoJiCX2OISeRg/ym5hzjk0L6hOnR+ie3WDngHaqvnQDvSAb8iVNpgL9lKHU/FZimAD3OSe/xlbcSuhOG3uO/BN4jSIFh6rEzuceh6T3ebfR4Skt8Hox8wrfskUaPE99KMheyHn+k9dgFcif12JXcY2M8rceFb6VNDuaTpwZyuJe40YAvvYHr0xt4D71MZXkLCIGCxnViRL7wPJye8+h5JD0PpedCes4nF4mgXBe0eH+o+oLIAswbZtfJNAD++qZJAtnK/GPxM3RKCxKvC2IOUs2OCkXMNTVI2+SO5L1wHdkUdsh1O4AP+mDF9kjbgbNsJzZzO5nxtjIOt1XeVZXkz8f8sR9pJ/vHalLw0G8kfOc/k6aKKSqL+V3gLd2kdG7rSw5fSusXf+bRCKU5/FrM0lyeXuJf6MbarGGPit4caNFFdLMJ/vUTLAV+6i1IH32pk9dhTT4x56jb0Mt3NxtpsZ7UvssxfTerl++yTpvS9xn7Hn1zdS/fXK9bNkbyQAYTv/wy8zfXnjApwlQy8zBJlJqp1Z1m3WGe7mnn7YfeJf3nIZavm6VGui/DMXT4jvM1He6igPw4Nwmf+MRQv2fz7COlbkOD+g7XoN79ow4vV7gf+Nz48kp2DZmQrF3sovbc6enwk+4DGETw16tcn8F0uXPJxOmOyRaBlbHTb5bCkFaJYVJIHGBgXcUBlQRuIYXPhwopXvHRy02vkg4nL7Uk5bXK7H/B9JMfvoMAH3pQsBhnROycP23NPMZOBVAoCu/4wBDdLtPEXIee8CxGLeju8uQ6RAcIXfrd2Swat4sJQ0qIT1IzDcmF7pu+dqU1Jv51gOZ+73uNj24OD4hEvSZdazGfN6lm+xY7iMFpYPZSfrLkYOjjinGyP3t+uOwo+X8o2nxqMlo9IkOtdMghd1LAwEA9WODu6CI2psB4R1oVeD9GJ0tdkOdXjrPjw1TC0OKRjyUS0b7at9w6AMrxowYt9JLPdhpT4EizJt8RunWgVr//+UY9wXtSdoFwEZ+uQr7yMH99wJ3Fr4aIC/oNzin32TGHEnbzOgaWUJ8gEpvyyeCmajc21WyWq1XPN4+uIuQ46TzZdllrBn0+83DYKr6Hg/uIdiccRlgoB2IiXtSNGrvQyp360QMcvx4tdS/UPy8gfa5bCRUcUPalIyU3yRuLn/+AfK1FueipoOmY72YuQBSSwZqKjli0rUNpCfiC3dtIAwt98Xs6d62ic6gM56Mv/Ivs36v0/GUYn35TAqTCRQMC8lbOB/80AZSDSgeLGhYwaHisHYOGxzowaHgs0xdga3NRJQdUGptDtXKpVh7VyqfDjaGGlTmTv4+DViyQKVcK16bkz7MRvN6VAvOvy+E6u8m480NNz0ZG/hIfQOT7Pfr2MYCnKBls4ZnJeYqLVP0zdb3LnaO4pQI9/JH9TyQbbgYYnmO5Ya8gA1OaDt8FGpZ2IUUeT5jFN4XnqAe8JW4dP1g07p+A/vUzxy5+rIv+bWPpBIUsh436tZegaS8Ywvg75sVGiEdLXQudRJ8sPKOLBNihmsvBi6Sx5tPhSk6yiwoOqb+WZuQommEM0FLOU+56i/w/6gVaMMYJVNVQtnYr47gOeqOPOB/HJ4A/utPUC0QY5HN45XjyZ1dZeAEHy62dUALLWqMdefD7f/mBK7GgKor1DdER3lAmckBTvnjKlvAGUKbJ335c+NE3yf+lXj8PePQMS+GOYm2XWtklhwozcGOx/giLdknyNXdi0vsuuXmUSfXHQQzB+6bpBc/Wo11tjS8fOU0vNUbAatBno+hqOXxj38Yz1vyTF5WM5xGkLSVVWiwpdlClnzdRwIDb4r2OTL0zjOBB8otjC2gQNVDISI45ZIEg0bW7ZKTAbm1OTikb/q4mJjDHqnHJ50/muWB5v1Lvi+XxWtFLKILNmezJyo2mKmZXLhkJZW/T6upO9klM7g8gtZjvG8Ev9Vxk6edbwH9mmOPDR0WZsFSl2wZNC+I4y+Hr4tzktTMs47qXxVhqKPGyGPuL0M6LDEufgCgs1ehveLPafPOPPmUfXc6bjp0irx7Tx8/Bx5E7acswrcSM9uKDh5CAy5bDgryey98oG3HBaHyKYIRaH036UC5pI07Ga4LZqySqrOf5N0YS5eRo+oS+afyDr1ffOLQoJYlVeoqSTPIV+q/qeKC9qCJO6gFKRaNSbmCfGNdiRJPphzbT509x9oE5SGiUaeJ+N3xPtxrIwTnpb9+NZ7zPZlQyFfDZGptIu3boJ9rmzKs8x64BZpkP9EbMdDIG+blOz2xvyNfm/2Ta/HcnT72Wz3w5rBsY9qKLk9flp9ptRt3J3vqp8k9ORs/E3yQo4/G3Mr7s6Pm6LOjJ+0PZAZJ/l/B4UxcdUfJQNPPNXfOoU+/t5BRENPb2SbysL74QKOw9TmGDSpHCYqbt4J8nTbdNYsgqU9kchFo6tuiiTsMZLstJj9fI0RzEpG5+880Fp0yHXmn+16P41RqprOJ78SRW8exJxipKmJ6jB2Xr9X+efpGVmzEQrcZfYMFFH6a5T9G/jr2BCJ5SJ+Bt0fLuQo7Pmf3Q2MBRrV2t+SPTkWqVlqD1h0aiTcQbIbLKxV0b0IrRpcodOAGleQanSMJvIeYiy7DSU/hTeASCGtr0AO2tMWH5PVem5xsYRMOpZ3Vo69expPToCVlqTf4F77+OX9z2wNfF38aSbe9qIoP35RC62dSpVsbM8bedmeJv0/XhjPpiYVL+EHd4BEG78ZdkXkJg6X4SRnclbHXETf6J6YHSqfFF2n0/GfYDfiEXuwiIBDISWjQdBuU01GEoZxFIRoWpEhO66aApsitFaPqTvMuR8XwvRz8bJc73c66Lm/NjekujM+gMdKgczCN7M9/7WKFJeuxWMLEtIePVHqazshrsdvmhIAA2Gh0MT1+fsI+kSWq6GKD759Hbk29rSMHGESlJGWU1fdO1W0rw81+87IvL7njE1SChD04i9f48dl7sZPXn8s3mTiO7I5+/peySTpXxnPeNjLQnzCl5nGm7CJ0yk0MQfRhmfPiMcV+bgR9nBvxI3Jih48PB00gZkPXRPvt/cH7L8M/JYF6CX3yV/p7gn9iTYf83fT88/T3L/7uP/J8Wa/ZAEr0ajJ166qkM3jujWPYXcg3HRdC8bRm/RNjsevLP73J5J4OfOLeXjNPOFyw8WSqht1k+JiKjGddqRvUTjDmziJboz/HAfb7DdIBPlXw9hvmc50L5LSkJbSZphuWzxRw2mmqnhxpfSef4ZjPuFT2GdVs1ByKPm5UpP9rCveT/VKvrRy90JV3SffiszqRT51tTAjTjgSNT+4Oo/fpazv85RRY3+64xfrNrBs33FN0+uoffBn0O92uQ/ccs4nA3oMmkartZNhjzljFUpzHz/nPnHvL/91FEBt1YEKDL6VMEp6juWlDfaZDf73u0e+/x12O4FZChR7ukYf3JpLMHlrL6JS07jkNuF+mesbmwk5Yo9Edzqw8bZ/NVJxNJHtgMU+3azaOa3yx7qXv1s2Zi5HkQ00QAlyGfTSAxAL301KmtrGYhekzxjLz7HLwqxmJ3cCJM3UST5j88qAXlgwavYORUMnz+kWqWcyD4+iL/smO7Sf7x6gR5GzuP1xTIfHZZuTqu2aGJPgMMRUY6hXmuUAoQa99UZZRIbnIBQEu+o8pzEJuPYpGqzsR/X5jLLmky/Mm96M4W5tKpZwRGphSa4/dB/iXwti6k/R7dtcPPjexJ5zg/VOWZbA6pJ3YroZXMTWZBsdzCg1RytOxrwRxWKcX5pO4MVy8y8Sbt/iwKB9FEprgmMsV7jXlC+4O8y6XFO6Xby4bq+z95Rmn6cIpKP532b/SKL4JdAzlUZbcccrBPTIv6V91pAYy55GeVY4oldZ9Ezag3ewBuzw59F88UX/S7XeT/uQDzTSLqx/MZ0JxlC69PSwaky9/K7ink7OG9rOjImOt82dEhy05d5724TGx0jqjfK65vls9cJ24I1rf6/g1EURTcCf+S06yOv72we5ns1Y4k+Fl8kTqZoobGotFZOaC81Tek7Pb+suhI9JIy5bQSU/4l/qX10PEToTyvHf1nlQN9Q96ZmwTv+7g2K2NiU2mW+PzOUHtWYKoLFJBO29iq4tbanWolhaXhHW2VnZQKb6xLmUk4xYlPeDBphps4Gjz0x8YWONT7nVFF3pVbFLwjzb6sljhDxx0wCsveUNhR3MqwboxHvt9tUUIsMcaHXuveneptLmVPeBfu+1gxVZ72B6HaYDk4VR1v9+/1ikBXFHyT5T8ori/JS9tfqP6FWL/K7j/odWr1bYmSXP28Bn7n6E0O0Kr0UbEKTlDyfqTsBAoh+ROALJbx4i5xPUtpjxBntB+Hd2oDStv/YD6xyuL5/oT3OnW+V82Cvq+CmRSh27LiM96LVfvTUDSI/NWArKKIZUYw+JQKHx31YFJhdfJQ4OyThxOTNZ9/4IGTWnKDab2WpL3fXXKTcZ61bE5Oj9l+lihxJNf/2v7c1EWNtj6WbcPQeItvjjpjrv+Id7g6/h5V8KOlvGRM0UFMIxeV6HvV/jBGVkExkNv1pcVv+z5WZ82nT8q9RUeICs+PDikrnjW/djAUqfbHob4YXseMFakLjPivWu1Qy1xq1Q1AD9k18uLRFp8DSJe2HfhZbPF+tmzUtV7g/k7B2zdc0E1NvaOWDVXvGA5dHwJtqMRFYDqj56tj8+WQG8BwAHRrfbHoVpbQ9Hmdn5I8gMyCWe3VqvnQcZ1a4i06WJTAEcDK/Zk6aS7QXpVafg8fVW60DOBhuRmvg/HNrR0BL9n4CoCHB0AZfYA4ImXgmIqL0ynHYUf37YN9VGmltQjKTkXxL+bXfqyOBdxsg28/UHZHHyk6GD2izw87T1v7OMn0mfXXZeylRi/y4onCXr6SM+W3QFHlSXaqS7aEy69BOcyb3VIyLkECfVK8pPIWYsjpP+gbWHRE3uVU2phTPs1/1XD/QcUT834Iql3RibXKTuC/bNjh7uuo1f8tH+2LBcrcvg8AX9GXM/mD2nHKYZhlbtLvcTHhOeh4h+0Wp3xa8Iryaas3vyhYdJCxcrXELset3mGLrh/vi4ivCL+K/ps3y998Z1HBeILPt09sFACbLeKrwq+w/1fkuN17qRx3+LaogjrZHv0LFPg+VbHSb8Um/PNrFRrckHRfhgEf2oP//wUfzKeSm48yDYIIgPpcQL9XIbA3M2CvxijWMqeSVRRUc/NVqKmzYRWLoRDeUHH4rasxiAsjm7YhKURfz8QPgRpIrJ/L5v5mdfE9ajZ0dIOys+hEVMQJhzVgb4Kiy4EiYDF7UMNBQSf8EdGaz0RIZqLi+gRyq2qzabSekYULxRSb6b60FluyW7uuD5u+HU/fbsfheO1iU5V9r9Kaao92KtVxxdcNnao+c9Z+J32rNIOmXDJUsamlwwFd1XHVx82yrP+WLMKlVp7hfnUzPNtgVog7ZQObEhurbkqGh26wBGHMtTey79s9iXT8FyWm0R7nVOcP95/wDlGrhhbt5dWKgvL9LjSAjJWb3UJL8We+jzXHPmVMfri4AJGvlBUybFSrZcOVX44EUCYXJYpOcAYY7Vsh73YX/3J47WjlM9stQ0HEgAmLgjRum1JYoQrwEmTcsXY8Kh1L1sexTnRGHYsny7IUw08X/QPXgpNzudT8F8ARXXIoj0uNTh5Gtfh4tiP8x6t6EuHbhiIRXmi+uCBJ/4PJUqudOF/zq0D6cQPVi8+/KT7/LvxwqTPGycHFpkg/KHSGv/iRaYJM9nQSfpZ30sEc+cODnKFUdym+uFLXPbrKrniWKVJ9i38xvw9jYT6KH5XLVHsDIJKKvQNV+qtWd6m+uFoHPaisKWDD3g/6NJiyX+L858MSU9djhYC0lsT10nE8igwxEd44jFbIn9QA+ef7vbxrtXqHuh5/oH/eL6pIm2ELX3l5Pl3NMZ9Hd4YnQxMoUor+/6VwRHpN32pfML3DGf72VWgNqVcn2Iv3iCtHQI2CPYoTE00iQuhulmY2GhzC1Z/BFC0G+i0R67OpS3zDAFVnLFbpA4BNDi1WKh/ChEGYWMZ/RKzHrBKBkUNapAYisW/xaU1IDcIZNYCfFVc2eCuEnuIe73wAiAu14WFzQL3ytanSQ0pOZB2LY0VFDgOEnVTJm+8A7G1G4vlJfk8i8nMKrn9IuRiHVbnMmLrRE+yiPBnfAsnaG9jkRUp6aGjO78DQ8PB2A5+tTZ9kY7vb4E/4kSt7+FD9R5QZi8V6vNU2+ozJnpCLWhvw3jo3bJPnJSrshridyFbawuvQLjylSmwan6XsDh3PQpn/5GfqNIc6yal42pTKo0plh1rZ1h8ePO2K1AlqCKWRqm/1bgWeOkbDV4WD1PL2cuWzoiOaDiFKzaJ0SJHa+rYqnqPwabGvU3wMvhXrcc5PSG2C7x+JCmd0p7Z+iMB3A4krIKa8pewLf4GO6LB5j+6zF0bs6yc2ldlrRlfYvd/6/9h7D7iojq5hfBcWWBRdVFRUNKtir1jBSluKsoIUOyJlQZQmuwtiRRfU67rGXhJrYqIm9t5FMKLRKGLD3lCXQCKW2CLu/5yZe7cBiXme5/2+9/v/ntXDvXf6nDlz5szMmTMnyXL3SWeuSzLvjAndB+okt3YpPKW19nv7BiYyp1xysEQgfCzPvfLgyiM1DJE5OlWhrruX0AVnOcBqRAek5ThaGgI+uvJAtPPi24K3hc29hM1D7JhymPpwnebUQ2uyqhPQyB33FB2gKCaF0Pg6EEpAmSMcyEVhjWUqXYl/SelLF1bav4b2wtoTRKinO1JlCxjOcLXPQVmLpg6jIqnkCAFqQZVrL+Lm8XR7BnjPKUbJ2RnSF6Tk0wtdZX49jLlO2DVydXbVMwprkEsGWBiqe2g8xZlRjp/yPe3JnH6UQ74nUZZDpuoFgjVjobBkggQar35MSD+mAfBdF2LBZKzB3oETuZk+yAUKr8oZB3xLpLpMxA207ENGaVFWDqvqMKht9jlRFp9qwqJiMIxCB937uuWKVDhfZgrQEhaa6yq3TGmr8eSjCp9nR+gLqBGm/b4lGULyRFl7cOHBJecw0WC6/+rHMzbEHEBXqiGHjCYAuFmD5uTAAtNMdMCzN+NjBzNbV8YHcvTsyfjAcOzZHe09+tiT8VBanunvihmqPUmZ+np2RLmKM4gRu0jbuwUnn4AjwSA9YF2gffiOiAiXqdxygY7CWpsWHN1S933kQQfs0s16pXeaHbEd3QJ1qECqZzzairJvYUffbjJ+UfsSQD+iAxIHdj1OPaXjPMn9bJ0oazdRwkAzLTq0bsWugLAja+witRTYRLlaKbQc2VYdIuRfz5x+n8coixQ1Y1VTYeCexyP68na4l3EVBKfM4pmqd9bpfjrnbB4wKHIA3Rsv0ngnJPKPKDsHIwCDHCtQ11Yrr6qHCdTWbrdSa6QDQ08TMGeZW8BWGD4zVEDkdYk9rpvBIA3E6xbUUTR3Alk2fcAZQWAKLL0Ebrny65jm9KuiAzaevkJrH7WXEN0L0n8vPaYOEYC8K8o6jvfAzV2Exos+8EVZB7AgUrIg4Q1DsiUOL0gPHvaskYpXhKEWA6NGHq493gxG+vFiVPh6QNqEtFLJKCyPF8yUIIezkLafKBs7g9oLBedFoqwkNJIz92f46wfNIsoSWmH97YGCyHKIJWY5yZ7eBWWUbcdS4OODMMs/vjDP8tknQ5ao/q96B9VphvdpvbMR4Z4mTz1aQPHx0e02c/PV93giaklu24ItmaKsrRgbEC8pAiakt1MggqxKFhKv4uw3onlbILnM6aVQ4AySm0AtvQpJknGYPZ56pylEGU199fJCD7KuoxVDoUvw/rHqSpKVI/oyDcezxrjd+gHIpBdpGKEoG7ePaW5kRsG3rjNMUPKqgpY6rEh00DqWb1HyqIJkTJAwleB4F8F+VjPLygheVBnBCkRwiRMgeFkzcwTPMUrbk6TdHVxo+62zqJz8aDb5kr5kk7UMF6PZ6EUk+lpatIMWdEvb0yjuCVNyw2JhUtohWLT3Tc2LNp5IC1ehj4iAgPkltz8akMW3LrmAn2FF4CI6aBHrxo8VDeHHMhYl+z4aajQKizRnPqIbu+d2QjhCyn9E2Rn8qvqn6MtYVNRbMAb+ls6AeOywIcpyZqOz39li0lCV4i9ojfG/dIK/JfU+6ocdUoLefJoE4Q8en6qMP/cpjGWi2XfgLwh+qiJ4YviS8+wKtDFKb5ii9BiH0j+B1rTfO5mjdBVasMNyWNFyiLJHEArEo0tohw9osC+Ugi+a/QcUPF3Y11o0G83wIL8sGY35SyjCHUUH64gO5okOvox1uyLyOQPViGWsS1z/5FITHWwkOtjAEMTrTCzDL3EEfz/2bmwzwvqeIyyvCq5d1RZufJEPH9r0wQcTNy90u/CBYg+vzYIRDHj+S9cr2GkO5EFu8yxKftRHEh1oLDpQBz0wDC3uPOuS+R+40qr5UNMlktKS138a4lj04RO3B3/SjMKuYn/sa0Ecz/9pTn1SQn29PnCBoS0tREMsACstDKVXIi1DWVxzRUNyoQg2VXpJ0avsvUlKUkypCNzM5KUwIWemVe3pwO4wcEr/nmTz8jFRxVpkEp73F+H36sNz8os9nkVyh8koSr9ZltgNcgXsRgvIL6WDkT5V7yxFWXN5pPfjDqp6erFbIXPvI3PZwArRbmA+SNm6L5gPti+VQ3QSLRnwpGVuUi3wa1bwUQqZU2p7VNR36kpsfBXDbBY6tPJrMrpdhNTTUwaJsiIhPM6OMbFFij0gdjDlzAdWHtF4smdUilHewdnbHOB+bPYlOK0hiaFykGguXo8xSLlXdMJSLS0G6TtfdIIPwVa3O9PoRglaz4pdRDg36qQC51YyMHbAYKu2JJ0XO+0O8EltDh12LhrEdru1KNVBNBd10t3OsvxGVRvzPO10AjskEX5HY3GxtKKDmC9UpZA5IzrIJ7ne4kaLb3nsaFGHTDCL1TVxpCHM4srMPtO2u51K7+F2ZdG0TaIvt0Ect1M0v9RlJWtxe/WkvkonDVWa/okWBenGxVAOCKnujsVQ0zIMI/uzRmU7QN0H0Ogub4zjWuJN75CP2kKfTYNPJvSKO45AdBJ7lubgL96YJTxX8iV0+srrp3T9R6/Az23b032kbUREJ3ttk4W2BUSp8uw55qzJ+pGd6j2Pm1fnwbxUyBRM6z+j18eTF2EqdRjHcebeq++V7TOnCviK7i458LRQNnPJQZFPgOtuuCoH0XDJNg8oPP0n/UIdcc4jAcmytfJU6ZMq7Hka1icH/8ouWOEyP1ZqdTnl1qjHTbofWQqEqm0HvLmwe+zaBw1Ml/205utj2J8zj1qTKbKAXangdGebfNKZ3q8wq2yaPTJfYfYbRaLGR6xZu+w5nblvFLcTkjSu/25DtTKQI5OuY6dtAoXQSJbhXM6wHiLUvm5I1kOc1XNQncNNUqxZgS8zWrrkzDqNGRntalEHgiriquiqnoEbN8/UabgdYQ3p1C69hbs21+iuzUXtuSd018YlB9dft6sl2r6eghlnXXJKN9L9EKiOmFZHNSOArxxMKvTuOdHocMC6XDGuC1dJrlI+9T/hoov2E6nFZMsz1lBIMSk14H18fdPpSXEV9nJJL8ZS9MP0swsgZ20WPbnQUb0fPzNnAGFNYPbfoe8WCrTcKVj6ggzX9mUgmAXV+6SbdZok8I5uPJB0AAHD1MvxLVY1xV6g8DeK1w/i0bl/vWoj16JvsarJ9gJlXn42FoDMrCxc3uRnX2W/8rOL9G8P9G/F+jet/q2MfSOXUBD55aBPx74kIdFCbGAQpbM+IAMnSVr6OFmSAjAkXTX5i6tOZ0gQ/FK58qm+tER9nPjqRNnLUaLVYP6qDGdeurUqQ+ye1gqTJiezl5O0jmO6llMEahu6JAJTOz7N/yuc9xz0ac8nZdCR0oF7dhBZCkMUiA56uLKl/nIQWSYrowVbeBhPWmeXs9V0AR9812hes/0DZ8p2zkhUWmOiwpW6irrQO7IxIHrnsKehPdhFRVFDYs0MuGfWKlIJRKrau6EQcp0nBheX26X1YP5JkO3lNgYqtMAWA2rQQSO4i+Wx9BYJ1EFoVQLYH4vZHnRYi4D03ZU5RvSh+52jj732uDymZXG/vMJQ4Rmt1GvR3eWNKo/OPy19VHmE/SyE6vTdj8GUv9JC4NrO5LrmpLactFMfbMWSnp84DLPt7yHm2h9DlfyJWS+nLeDZi86l1pKS3J7RkZZQHejoBm05mI96tsD+cu1KbZkrmmA7t5qKKPe+pNzK32kscjZLtLNI40UlF5IAlv1lvU+kqvaQCj+PIe46EpXdD/CiJiG96I1Hvo75eJ8IxLVUz7Q/9VzYd6pwpqdag3SmcaggmA8R4KIMuU6LuOP6ugVZUheUzMVqEXplqTJDWCKrwFarEHKs2IvMOkeSgjGnFBnqECHjJcgunPwF846bTLYr0IReFp56YElmnQ7O2p+h4ZipwpJJOtLQqnw7bW8R7hkhUaqXY4XcluO7KDsE8nPRldT/pC+KB2q6eIjphJ20ckkzdpmYpZA7egpZXBumrzcrTHzf6H3l6Hu0guvAwEzcRXOWfER5qASnSeb2yZgzGvdQ3LSNZcKeaoZNjkXbitT22LDJ6smoR5CMKk0egr5BAkWM2ieIuYILfFItWSYEMrvmz+O50wkK1TM69UwoOih9OusS9ku+veigpDiWGSxQ5Qw89c46lvGy3og8ANrPx52Zas94EV0WRxw+qUaUaoYfX9ECMx2K2eOpqQ4WLoVv04LUQ7xV73UaJ56ySanrIvolysqiN06JeSQMk6cR9NXfhWbnLNrpQ84QaBl7MvRNOEwGw1tMOeJv10soST9nbflTnc5d4Q3VU4eR02IWZF0u24G2gl3uS7qirTBd0W74HMaDHEA5ovUo2QvfQAafki5s82EGENAWA96w+6SjvigY6uX1MYzkggakLOlZtZ+AkdxB4m3BJwuOZyS3+WTXHMX4+hyGL7A6iux1y2hcRHpa7RkkOjjUGteOmcu4IA5yneR0tk49QqhOscPVbxjAdZKrDMxaYPISdpUJK2BemmrO9J1+lZEcYsKO4YK35JCywG36VVFWY+TRB6QF3Crz8lzgH7jKzLxnwrapw04zki22ReSY3zbbcsbTznQ5+sGVR2iqTnVGp7qhy5x+m6dQYHGH2gHVu3xwKbfNFWURK5ZhUI2zMFnumlMTismnajtoVOOqXnVHyNjjXtgYdi+MXRHUAHYODgKiCxYQjeAL2uYVVHJTXgEM8krOkDmzSZ6KRWh8g1WzqusLJEy38b4hSySnS5LI4ZQ7QHswNPdWS+/4qYcK8Qio3WymBnspY4k/BpJeOFIbWMKh9dDS2vHFOh1JqGQYSzm72L2QYSzldHhOCKI7EsQcIAjz8xR0t4y5iMvpkiLmBgjcasfs28r6sy5if2K6gjxrWK5nfmbeaVW3iQBjttAOkV+S8iD53BFl0UtR7kB4OQmvLPiUx57Zm2mn/iL7NhNepgjDaLe0LjTaKVHWQmTbB92tRQeuQCuIdubC5FfjzXe3HBTkdipNjmmXK+Qu51B/w2le9m2FxEP1XqR8pR7RTzO5H0lU+SMk6nJblTNONVlgkWaNC+kjiF7pe+iG2GBF2vKPmKHSR+1l73JO594TJpW0vuqGTI952FRBDi45JRY6vRFatbTo0D1A+REdIF9b/kjHdi28SI6+XSMLXkXssjKXvS1mj3vCD6AEGinay1OHPcAyJNAy5Kp9AeMUD+0eUzwohkCYzPM6tkyeIFuU0VIyjsxQBwav5MIiQlSg0JySUXSRhhawEAsYqC/gAGO/UvTrrvdrgZtyxvaGNNLXeMQF5yR4QoFcVW8JBcv5k52aOAHGoCTZb8649+cprFB12lp1WowdBGeHr0nob1AfNLf0qtl+Cj0KwR1C5DZqyWxXPd1OO+0mIJs17fyxBt2pUAzM9HPkswYImMkOGnd7YJ9kR4kO7Fofust/Rumu9sX9FkuFJTNCoPHtx0T0g1EUFaYwO+2Qm+R0h0uh1gHemHLjPShaTJD0XW5r99h+0pWeM9YvcmL54RokaNSbADGW7M+MR1YpyvoN4+ZzZOLrRHTrbXEnokyVEWChFJcwdP+gRvY5hTV3slvAkGHcCwMO75ddqHyg9u2IF9fDnJnqD6l92/qoBY6qPGIksDEEdEvvmF4CzvhdAyP6diW26IQgCsCg8laI2zVl9BISN8+YtGFqz/FqaTnZ71b4M/klYxHViCbFEsB0Cs4uXlqzBRBlTUVf00Lme5KVIEZIy/iwZDjhU2VqT2+iDlqA2/VQhAJf7CFl6kkpMG1siwpR5AYrEFxrqN1ZzbE6ENBL+z1VG3UbkZL+BPUgYUSvF0wHmiBv1QedojbZeu9D7rK2/kQzG0/uGhASnKo9xpD6C1k/Bdk7tEFFYLrThCpkQaKdHiMgCf3AjKRC8EPyKd2ot9+I+kFMkRZFJyZcSHSASnZAatx5P6BQ9XSWWmEy2kQ7CTzVXZk8xPjqFzqC+d0ohHU3Jin9+VaWzvMwHXdn5gZw2gAiwSFzflBGJvhitRealIG+5QQPR7WXI9mG8XIg0wovcgON9r3VJ9zpIEcR+pHYbX8jsSG8kIYX0NVSEvxnDG5UoDSeXh/TDhsNF1WOSHhm9xFo1n4EKW5WmbM9VQQ3nyGTibEDboXq58qYWVNoKP22B0yYw0n3VeAMW6CgK88DcACSCHCKgIlTe++zylClALdxlQTF0z+SVDLJ5on2rS2dF8GwsY8Mu5WWF3pSNpGvnMCZzoYnUdRGbRJu3dNwcUgOey8VIYe2NfTTruX68z/qsBzgDdLT2gHlhDuPR6NH7DzKBlBa6kiUFuBTRus1DOuVaEkXCvZbmm1vGwcmAjPE8McYfc1DGiU5BtpV2xgClM42co3GaAJ0XW583g3QXJXKrugAKuyigqaBv7vkkBU2VW6CehCGtkJlCp7p+R7cXIeObu1SiJpNyDiX3+FOmxA+NGwAJ7sob5fermo9SyJUhwOJJXD7+s76GArbMypUTuWjUOUAY0aV58NTjPTlcenECa87ni5UzQzgi7ILISChO026mJlWeQ1Hs/Y1Xd2xp0bTX9+n076pltj37bhVNQwu1u/R2WnHgDclZwWhmyrXuHpbUipHw+LY2iv5XCQoCBfxShURP1mQ6T8WhcXJNtIRsGaEZWmdLE3Xkh7r9VOY8zAC4XkVTzsmrDjTFSYgm1kzZz9r39+iw7IoqyEV4Gt62omy57L3u92nUyK1u50ab2xCVYIyxWh6gER74hYncuXpRa6wMipzaRR8EH61ln5Bbi9Ec75l126+xlWP22791ikGeKn+FC1SvtYM66dO68eElWe/YZRlyu+0YVDRI3Q7CdcjS2u6FOKKsYe9zq8nLr6zirNQ9g/a/qQAimn5gnX0DgYHqgSndpoD4ucZd9U7FOskWqAVY0kuSKj26YenRfk4FkBFntwhwsZKmCIeeWQFCCxHwTjwJisYl84Fj9gjl6yoe2/OvYToPUGcD/o4TfR+Qex8iVuf9cKlmIU4a/BDFTyh8os3Xo58ZXN1PZgwWiPj9STTeHskixQ+uQmSqD0DDydSj5qnXVuA244O6sH2TC58dr5D+EsHI6eaROVT6YtO+vCAQZ42Et5LlxALepQZZCKLePupQld60sg1AVlEc12FTrvAgpIq67EPg5+F4Fq5hV4tkTvPDL0V10en2ukUgeyJPTqUCGAoAVr1RqtjXnbuChfqDA3AqkS+pnantBY3iEkMuphB7Qn2QV2eOsjF95OtADFqVGHTE9NdG1Fxy8uOtM9t4/MXVF+5I85EpFeNLhMMOmot1N7uxyNz0wf5kjsYle7vqG1w+8dXgH3EF6215NuQSL40ri9r20fLHvNGiQ2vDXV5U9qM7Y0+Wv4Tol2ntcXtEaVWNIdellGmdtqFYVh75xP70PzLlWdAXNeElWtv3uamO/Nq8ellHbj+5sWZ1GLx8+gaueCCOpKkMtmqQERWmYeKtQLtG1eyvLHNcO8FFMxHm1xBSzY3Vke31dH2ErQ0vWY9DuoPjw7q4UKykgBzpBYge9XCb8FX1IGKX20wnQgByF7DifyZB0RRJcLCHqB3277sNRt0qUStvAry3WOoBE7oLYx96EG+s9RqArYOlFbjtJ9sbM3Bm5dhAlxG5VnCAdd9JEHSS0o60+s/yH3ruKV+xuQ8Lzsj0E8XoCrAxhipFmgWZw2FUAEmj+pj3VaEkOv3tLOeok1e27eZ0Y6f8r3o5GEqPWzjhUYlmRDSLvN7I5W2JzpLhrkD6kwVMKP6qXJwAmE6/QUaefInO3sqfVq1frUTjJTk+DGZNdClBge11MHlNjdHCLZT+9szYVpGWlyKymnII6cLLacIP6p7CFGd89yr70VLckQrc9vmik7kAk/w8lJJygV9YcYswdN/DqtUU+wsladBQoe47LkxoSUxJkCoTFCD2CriEzGM3V/BQVfPgsOJnrZUqA4RGEw5qi21c1FBlA7vl0ovmZ+3Gc7k0xMXo1xQ1VF6h61R5p86RQaqii6na13vtBFXueFlgfmMHkcXy0AYWtIUQEwpLrc5NJIeYs9dOiFYx8701NQcjy7sDl7s6Mod24AhSHlBPbZf6VyMOIZIxcbxTWJZGJb7aNu9iF3ErkeSERZmXjg41ta4U0lKlF1K1viRgfU4TwQgB/UcPI4EYz2KgHbMfWRPRVQEt9f4iLkrMgDvQz5U6FC7rgaEf/Wj2mcE4yVW+6QwXs7qYTB/VMjwtAmKaWP088bS9ot0IPY7OattDudsB2aH+kc4kwsrdxvGnU9ZhOdTmHz1cPvMPp0Vl9SePfFMfKxqSl8enraZ4sZTSnVeDqWH6PwRuknR4Xk4Jkx6RSa/eHwHi8jKs6WvDFepsoKjKEtIboKaLC7h45ymQDvnLFnsqanzcoJ8yYqxzsseXwNRC9pU/iPy2gVu/1CURUx2zsEFU81ab7pNYke3AhF5Xz4nyBOyZ6gd31foAI9VS19Gk41dGC4bT7uYTwfm/FlB1vbtCEslwl5N0+uRTj1n9V+mfoREJJtIE31kst3JAj3+dcmBFsNjUFRXAc89YUvNYPJcdKV25BgUHvVJYvKw2NOchb6Y/C+YLp5tf4csGc9MaKQXUH+9SEv2VCR3+JJ9QJJ8ySGQzPiSY9CL+ZIcNGmHpprL+ZKzaskFvmSTWlLAl2xRS67yJdtgkOFLdrnNSEmfx9ZGaFqbK1xttkPFMU+o0AJs71kv8AqbC9z+qlqyCmNtZYOrYSJlQPvGtxW6kotAbZx9FVr6IrJSJtRe/0isBHDzWUc0YiFFqw0a6TtUNk/ZCcT68E8MVHn/k5wHgwSlduoQe7zG13L0udKDJuctZ5UdI7ogQiZ7PDbp8hj8q8HLjjSC42gVU/WgvN1pjbdzE3jpO6Ujk43Xqorm3oXhKlsnWp6bVchcVwTAcFeXGO8kh2pFknIvt/tpvTDnbExR7bBaW/oz7oyMoQtGgq+UBflEuZ6nV7PXyF5TfGlIFA/7zMn9eaKsEJT3X2UBRfgjYXn0cHtHzxuIsl3RYTkWXDUFpidZ6fi9FmOr8siEfK1CR7fW8MYhtihogM9d3HfWPKI0NgCNMS0m9hFmLSB7SAQDHs7MULGaRD9ccNFayO1OCYw2qdj0glDsBClx9AdSM1IVUXYqnwugCSvTdrli7FdLr/+PRUP1NxCHuqDAEyK0RCuW9mq7XVh8ejSVKAO/f12h8+m7n9Q7azhJHFEJIpJ6qn22TvkYJEhL5VFORgyzVwv2kKEF5hteMDYRYjsNiZQeplxDTW60otiizYI33E0vwO0JyVkm/CwDMgbQIen/hB3YXwda+w4XF7MNhya4RtNI7zAaRBdZfle944nmzrJA0yu2MAj9ZmGeHz38wN7QS7c1DlF0MeH78ABT2DFGmgO4RYtC4adxMx5ypxYK9pF60YSk82DUPJWnL5OkDLgD4QXHkOkaaCN7FdkKJIdAPEgA3z+g580me2eULkpeG4KQfqAeKWDCtg1m1qI20uRv8yWZBHHL8bNDWCZ7IoMpOKX9gl9AD4lcfmcpyezrKaBHJOQinONryBEXwTxGMo8WSB0+DwqeL1lA+srB0dZqzyCYaEwSqjPsTmmt375iwrOYV7Z/kpMMTPYIbPPlOS7nsgoUUS45b3GLnifKHkxM+ZM0Smu9ycazWlDN9uTO9QWo9SM6IF3gcvvKr6Lt7/QnHdTSBQwJalvALA8gCee6aUgOeOpBedDlnCZ8FSPdpF+6G6O/bfQWituFonkfeVy7euj7H1YJt6RG0wMNUIW1oUgdI3SqP4FgfyRL+PNoFUtrDCaOeF6EuYlnuk33pbbwFfdOfYfRrdVh89TZ+CbamceQF423hbtGuoqRGEoYoC+h623UyeKJFmSjPbCFadieaxH7Xkx4plqS6UZO2Yg0bmhdrgB8T8myrNWSBaKdkizIShNg4V5SgWfMckq/1tq8AtmcUJWRhmYw6hWStvWjZ3xKt6g9nfsS1iHK3gu+JdZED3YTQRxgxYuIdvQ2OkJo2m9ec+RaEoAlDF/ABYfaetqXXjKsv4B8hBKtewrM8hkp0nY0NySOctGR9V3uZLA7ChzsScFF+WRy3wbZAMzVcVIUZkeMJYThtIPJZcq1H9Gq/jsdk6+wxjPG6QdQPKWaAzDUvlxkOO+SR0V/1dQAtPoLJQHBHzcnJGUwqylC4RxEdDzEgRtkZJMN5PRatAgtsFQQdjqamKJyPANlyIV44a/PlaS/5w5/sftYZucFUD68ghLvdBAsHbLZS/IU1nTOBEOoBsR4O2fmJstFTA8NGN/CXa7tQEceyQNFA0SKnbNW8qJCZ2Sbg0xQQOIMPkOKfuuNuyt0qNXsXDQMsmcsFFLOAi9ZW3tRQfZJGBu6daZWloFMvRGSp8sOfBCVRaXLuPPenpDqXLeXjPfSj8rykikcvxJl0cWQcgwvyoqCD2jZ2mTrYDW64HoImT5qf4dZW3hZejGgqaQ3GVu0Lue0HuV0JAmjyUAVS5rqmWErcHG5TYpiV9qES5Sdj65kE9SCO6uKXILmuXD9y+XckTsosjwZrpGUkXmH3jhrGYtdEHnKjZYJDDi30/b/RDeGFL2AAkDobgBlAHlasMqL3J/F5ltGphOUYR98XoHyMFPOCk1kzLnDSnYnTpPk8kVZRYSVlLncxmkCMuDSoxS/Ei1yhMcQwYu7LYjc/fQcG7nYeOnRhWwQssKYlr2br+j3SuEak3Bu+nBuxNYQDQelVweF4FpaUIhojiM5klisX4Sn1k+htsSech56avX8il1qqEl3Xc8AG9XvX0rtjlx24PEOheJpwRpAhyUniIomyw+YS9gOCYxkF84YcTfeTpXTjEpoguUorWnGOH9BvtWSXarH5ZoA+HyIR3KkWxT1cFpQKFouOQiTg2U5WZKDiq7a5lAdlzfs+bQezi5vtF2wgtO3ZesUVmrpNsZF9YnfKIcb5sH1grZTWQVMUkTMGTVPdOLyG+8gvoXSKvN9Z+Vu3I05WQ7t+K5rOgjTu7gD7bpcsra2WHRgOD+rUNFDXZuZvgEmsGrpHZhhiw4KPN6crqGsnfkhQmGb+aGLiI7Ikg2iA0EW7oxkQ1YhHrjYhWsizscRT7uYWYvoPfBGGx9kFtL1twpd5vSDINq151MjOr3UdRllERO2RnTCArLygaxEWZakrwgBJfkSFIF5ZyR5PNUpB0YJUk+BWrnG5ZzowDAsrBsrLymLaFF9jIvaWZSNtxqr3ncRZe0iO9BrRAdC+RYeUOJfUG18qFA9SaARNHCT2Itm46wSJ2ZziN6uoJ77PEG9T2dF2WnY5RzquZwrrSM64Ml3n+fJ90T3seDu4fZC+SvqwPvY4wF3N9U7a4VEh1OYY24SuzQ/vEFFWoRLzFfxQjNJgb6iiFNRtgsSFyofqWbY2SjPQDX5hJ5Kj2ZOz+Mp95e8ryD93Whi4457wH5lhLedgZFWlFVGlP7t9AeicW2K+ucyPm1FWblklgU83g688BAcSDsG5qvt9yttExyFhnVUhOZLTlNGcoFIL3V0ktOAerXktJtnR0Z6Aebb0k3q8At40ousgd4pwwnWJsZSLb2g9myrduJn31b+jCokkk1MUMeS/YQn7MIgNVSnxpHTy9JDyOJbt+LR+3fpQtAmkHFjGRDPCphBaPw939Oh8n3EMO2+dIrQaw+15FC+5Cy1bYHaSUIyUWdwurhJHXZWI9VSa21A6tomZElZMRnLHnZIdHAk7uC65YlUzuR41yEjlRK7r1idEgw7si3OdjOJXeNNanfchW6OYzuU1hcrq9+DXgFYhAhuGR3TH2NVPMlOdCa4lnhSmQPmTMhl3M2OTTf9laJvmrOe/eEpFTx7UEKSFB0Mw9NnqFQQywS5qYfaiw5K7WKZQX2Jp4cAcDYAAkCVVTkuaA5dqsUqu94lA0/2MoLcs1gCT9RPiFVlCHiKwYAGPFUv4KdZoxyM5vfLaddcg2IUHvrdwulr5NmrvT4CyiN0MCDnC3D+JnkABJ6uLUkmB1u0UKrDvwJ3t9Mxni6QuyYMxx5hH7ay1iztthMKtQVkKqZYisWEYkFJB8D4URKF3QwkxWncbSxk1VN1j7T1CLVXOYcdo8WkU1qCIRjEWDy4QDnnefbGeZUlfLqqvd7Bo7va6zU8eqotcSB2hT6HxzGJXhjUAwYrcKVKRlugOGq7r9Rh5V7aVU90ur7hD5QlJcGfoT/kA0Ux0x/S269Q2lNjJ+qxQvUQeybcXj22IxNupx4LEpyQM11Rcsj4fAqrD4Ijij3dhc84iKV1wqOIYaztRUfD3iMEmIy2A8/Ay0wIyRS5FGp9DhILWThoV7Y3hfsJIMFRnXZceNO+egLYdBSdsHnj7cW3EGX1tKTVFLNWFuRlOHaIRVlOlqiFNpzPvAcO3InoMxPm64XM1wGZrwiYr6JG5odOouzn0MEWiQ4MJVz3BqJvjXEPAJGuyTNcb1qLJ9/NBQHCX55W6Mz92P1Jbc5Tsi7GZC+i+sN2L5/TJjIJiLbsIOAhannzlJUzLpf5uEPT4ais7VAKGfgEaXxC8338CJf1CaCPULIrojPlQBqfcfk+4ypzJo1PQr5PQmV3UdafZEaPRdSsXfs5JwZKoCWMd1P9iyuIVj5NxCR6VXuqP9Dowk2sMjWeTcRkckuwot7uoiwlLmsUGrMjK9pDc4DED39Aua5c2+Yt6XvtTAMaiZOH+eUk4Kc3pEeL4fXxbXYHwOgIQ76PNz2tzjKF4WxKApYpvIQs79As95GUlAeAERirp7DMII1siypXsdlrwi9qv3hcgRYLcSGC3T5ORFxBZa8BVZ3xtvqFqDg8pWTB3lJJeEd2MaG6ShRH5EnuTuhxmNgYU9prTNNgJc4BxRVEcSYMZU2XnBIBTiLjwZFKbezBDf2Bbkxg0Uu9orA28FEFq2923kzfjJUnAxhU6jwLvdnvI50T5il6gqDXVw2OtzUpCaVWeOyjI463gq+45esLTdG8xNOj9J6Gs9oAvE7udABrjQZc8t0DrHj6+2VNJ2jEUhQTBkyxCdk5V3B2ONltuSwBWUO+wyp8naUKX6wGLA1URE+Mw8BAJ3VxMPnCUyq42TZaHVYEA+gU+1J7L+CvMBLhiRX08VBzKmwC7YqnKMEo77LyneSODkSpsAK3oJi0oaheFlZA1/xTyB3ONBvlajW1PKqhlwqecUIs5EHeBBHIMJ4DvmFEz372yQwhOI2X5OjI3QFukpy0ljg2eSrwBCHJpx7UvITYBgH3YJjy55QWknwVE9m6KWS4Y0GFJged5IJacsFNok0LVAvmgKcfkx+rmimwTHuCWzLcIBd2FqW1i+/JZCNP2R4I3aVQ7Wev9iXrqwob1fQcvmhZ7ryh/SGX0q3wx+V2SXdylq2spIN+l4FbLy4T41EaMWpTLHeCv5l9QPRtQw5O4CfVDtE4s4ctTFiPHa5OUHWqCQ9xFwFDEQVEROWzRxXsFA8PxoMnZr2cJGTYZCDLG00fk42G7EiLasgLxwscToof0R0JnLZmTq7XWfErLZkmpR6kf7+KIqJNHdRewbsqH1Rg/jSU3gbuw+IKtous00iyzLdAWj6hJXtNCGpZKx7k3B8VqkTZxKhE2D6cl+EKVS6y7YV7yYqzE9WSwVZDyfUW2eAKgOS2WNEdcy+KkPsEFS3psTSBNu0eZUMn8Am1ffOQZl6XnIdEF8VDFF60KKuQFtPafOTmnERkk2qzzykaQx8n8+cybnY+qwhn59r0MpaPNQVMzDpNGp5Ozsnyrje1iaMdeI+IJSVqlK40bCGFWEhct758lxayEYQiR8ZpqxPWS8/nEJbaHr1LySEULKiamO5hMTM7kwxuuOiW7xmAmi3M7Cwip2NzqXLEVY3GtvcruI36sfBa0k+nVwJgu27NRrjVn432e6HArhBf63y3gtsLD78BDPNQBVUw7AgIKPnwyfw8xayyETh6GqkoqmYGWChqGm9Zv9M+3km28H5Vh9vBrMUO07M/S0aZGxqytssJLDhZ1qw99ol2B+FdJD+sNKQx86NRsDNkVo174XewE5kkwbK28+CT/UZhD6Lavqvs+fRYmtSmq0bBcUCD8qyB4CWoylvFffb9qEaZerqj8ZTiEzn8j7ZT8i141XF5VCUVZeUQVg4ipQNzk3AlsrOFDa8JK9bWL2UpMnsg2QdRTdfyRXNm0lvcuAE3Zw9duisQZe0jPsVsfpQz67cQ7qAOP4zrNHu0SfNAlNUWYwiZXDxo8QW213kXXakX6kPQgaRc4cnlMzkX5VvK7wDBvtp0kDXcpt8RzXlMlTLUgiPYH3ENislTfdIpbhIGrdyjwb3iAm7OyxI1U0iH0zOKPeDp8qZK7RTvveaEmdqAEOZUSrF6/lgKAyxpROzOjXHOeILV9/TYThqDaayeroVxuxUGsNArAMMHKqGwK37f3aJ9G5kC8jOPO7jq1o9bdaN6Jx3RERpCsYzkXroZ140BR1AF8O22m8hiS6BFNdJi0qRkadmeLC3jruWGx1yjoo2UktafWDav3Xubk1oWlfTiXEsUrL4XtafLWhYKF6uVTlTjBFcW0NBQGa56oe1oB8aw1sb210Qyfy5mwh245WZSQ6Rdcik4a2fo+xKj8Qz3U5UfifLrO2rXRttgh85In6UOzoOKtPz3eFzIjmmG2ijUEBqivc8VThWlRK8vOKssgRw13fec3l61fNdzunLCLkyzerJM9hZw3zgEueTybWT3ews5OLaL8kaqRCu5tTGYsjUTRVoyiCILkNzbOKycCHo0+KONozBByVPRQaux8BbLSH7V5tzjBqxo9XKSiQYz1E7LRbYkyh5mgWtft3j52Yee060Ojr2suImrNrc4SzlrD5HjgEox9pzlWEHGQk0izTqdwAnimJL28jaqF4naYPpUFWex3ahOuAmzRnFg9E2ycV+VH5GDie2nXhgovIybU93AkcUrCFzU2QRtXnRm5RVAhmMvb6ZIlRNKdwxMp0skyXFV+oQEqUnTcEYYSJclLcTtrXQtqtBRG2+5TBEWNO6Fvgm0K3fh1g5W2Z01f4OlwwRd0IgZsbwG6Sy/gAmiDb/rbOKY8nXoddT03E9kf5dSxLbnrAF8Ni6G3HYDGP/gUCb7GAbxmqwJmcxockjboguz/DQ52XkWGwy4Xi8LKkbUIM2IeVuuPUvLtB+fpW2Bfi33o4ev23FMQZSFY64lCduX/BVlXSCbfTm0OMTC3Lk6KPyeUWswO6gp44Jk07IAuvRjXFRU3kJ5+ItbKJYsEmWRLXEjEmSK0Ds0l25edMaZpJ5aStLJxiyXcFdMuP1mxAcWmCGmiQ8HCYDacYdaleuuvXOPbrEfIoXdR6z+lZVMNGjJTL+FQ92sIrqsqRiOmeeRL4UXEQ5/16y9hYcoc+oRXHtXqYqs3XWdCjTjgRoxiUyShPI4vguKqCTWEdqn5Dwdszn6sMO5mOW1Cp12x3VKx4QPGlUZL/2g9QMCPey+y1qo+jUTCZ9vXLXsVhh28ke6lMXaTOryJ12IO4qanSQcObHWjS3CdFoET5Rx3EHgKan58e9N992Asqo1lIaYwZNh8MRdU7nRfkQV/PP6FmP+6cAuJRVpF76okoXmXavgWCiRp9AYL5Gn7OgoUKVYoT+kAJgOvlnBHVJwRCG5ski+6CZtcOVAE4EcBv1pJKAr1nXiFdqo8it6qbEtFM3knBIbPg2R+Gdhha70ojpsl1q6j062yPz9Kw8bsr96i4i+v75nz0Y1xQGIWMHGe+HofRAWMD1GzlO6iE13Aab7LaRbIqe2KDlxILo2qkkOV3OXLpUZGZBIp7tseYptkMIaZP73tBGFeiH20AVosY46bpJFMxqHGfXBjOrq9KIvHZ6dDVGnY9QXpvZBiP34198bt3B92ryiMiLQ1tKf7UVbvojQR1e4Bi6twj4DN16q8aoHsreIuyMWlvrrYPZiu9CLKvRbu1pOBp2g4yYzS/U3M+BKq9KmtFHsIir3kPnM7svcfIZsRRLNW/8rKCErvaG6mrX72BnJ5xy22VVIlL3QG1lx5FU9ytqf54ZCvTRFbolgpcEfH3FC0VCyW6h1OXfkA7toZLqBaqchjYyipPaPB1ysJkTNQouCXw8qBbroShAn7PoF1rcxnjbw64lMH9dMiAlwUdZx+urGo5YHM107E/th35MbEu35ijrYn7VNNlCB4B5hncW4U4yWvQuMLkfMlxSRImpwvOWE5pabKXciw2b2Jpb3iLK09DYLDYjFN7mVNrO6alfep3E3Ec52gN7EAi0YpaZXvXx7GZFd5us2XSua0xQnYNJijdNxLqmtdJYphIpj6HbfcwTxnGymCo8Mrs/jHXLCzdTjWwjKSorITlZZ6TZufN1FlzuFeO2kA509bdQaSqV0VpPaqsMfqDIC+Irp2ucFFWw9DXohpNQoeBcZC95FxoJ3x0tIhFdR8C5CAjwLyahJMjj6xWOL7t/0nBYSbbzRHjm7gBOYS1aQERHLopHeAayyV2BC7/MoMJRXUZeVhtyJNFQSRWYRBJnDCnA58jQrZFbZsJJjGsk+/e7cWaNNOkqPd5iwfUz4oXxJDtcEOYXWhBOtrYnrCTkwVGhIMdzVkrPEnrvkghqtardkCgApdvjpsAq+68HsHdFS/yKi5Wz6U/AhffUSMCY3YsmQWOrHPPF+bjtEMqZ4g0vxMnMlP3sbS25EPthAFyRyf0HGQKRq8tdNcjZtI8YiUofaYR5EXsZcKT1fxf04ekV3GNXoiTGoo7uRwXeXSxWsEc8v2auq5PaMpeigz4BYxksAT7d8Lyriewk1Pi5oE9vLTuPloDozzmyXkdU2yRKSHUpc95pO1MG8BG75Ck+1DzzkgzR+OrWPkBkigGIzDofyyU1OPGr8IfYiRxtY68nwZXKkzYXVrGH0J9z+cndJ+wsdArtCOqUHYhdx+0OESa+hfVk7fC0uCzrkS5ZxzPo8UR+1g4l7fr9SN7XUzujEsHpoP8bPAabh9gpLPKJjCXzTRy2FGdoyxrOf2tLtIjNZIMqil1Mtgwkke9pA4zRbm3GR4NlSuU07A0qmdoUQ0Pq9XN645LD61fYQTl3P7Misuq4PY093jWMhXl/Iqlx5RdsHa4e3F2pPr+FOIs9fg/x6Dc948ZxuYrNHP9i9Se6ePx5u4Eq2qN2DVLkD0RLxZdZ47wuXQkaySHRAuoha8DWYTAjbhEOFZINKskGnCtukU+U6qAcJmLBVqLxygOi450vWUPa9xi3MgR3kRHPmUJOgbB/U2C1mpBdKG+hw49mhg2SNSnJBAGQtyvKwYLWORFkaXNt4z1pjYD5Rewy+xCCDJJMJyyIDZKZammWLthsu2A7Ce6XQ/oJtOeNhT+0vlJ96aq3xbuBOtng3qSUbug+y6+4ptD2lzGKLVkKUGSEFR2pCwBlH6lva2l8TIwMNUA2UtRTyoxU5SrOEmGUtY6uJCy7zoA6ckWYXHZpafkM0J+ZR4xWl1qR9fZn3zEumyFQ10G36IqpZyRAlTNRZJJ/Ky32nwwzDwcIIBYZmUEvXMFTjNGwe1XOmBiyICi6xYYHrUw6olKn2QIS8Y9CqrQcgJB+NUXgL3TFMGEHIULvuHkLbXIUSCqyTrIG0sSK5blIHajc6G5fOSzqR9TE7c1sVW7TKI1RSn0rNeyC+7OioM1VA8BVFlsFOkqmsJJM+sgjmiUnPsFXESIUoqwClJOkqv+wc9UjUK9DYqdR1mHr5fDr6kqOHTWgb1aVtNGE1GeCzsoleDEgPTNi8kl56RbEGdLtgFQ5Ozy1JWa6TRWI8zKG2xZY7xEhxM0JqB7xlpB3d684l5snJkFxqjZvQo+wy++qY8GOibDesyu2+0x/IrdWSYrVTV1qOR6uooPENUsZgunGdoy07RhGDZtd9VWcEbtMPKXepqQi85hyRuYBaUUUBDTJIHfh+PYl8tIrrzkdXcd2ZMx8uWQMS0rdENWLLEQ+02tH2FXC6PRvoUhEk7AUJl3xN9AuK1Y5o8lfrzZZumUnphpDSKburph/ii7JkBGl2pJHUI+xKPn7S6zHDGHhkJJ5p7ItZ+RqyKjprXIeS1mg2VHKHE6JmWJA1PxlOscaR9XuYLXRVSx9AbJc3jHQXI9nnUthXuQtQKd2ndtiNOnarV9IGnQ7l8HH7pLyHDc5ad5TkQF1GbOCOAaHpATPDHjl6wx6iOQNZ3UitKKsvUT9kJAvU0gVEVVDZz+WN2/QHaaQNexzCNnypbUazzm5NyPiYLwZGg6F2Omg3RrCaGeYgykLbF+Sg0D6iPtcPMCw5hltjxBCCJIcVNCrZ6jiNWp0OzmrpMaLik6PNOURpYze17MKSW75kG8G4B6qclNp7ANGo3osY6Ta6He5yW19qjvLGr6ClLiEYOqYOsYeCb1PzMn8mxQbuCJMs4ANhmUyIg3JHyXRqd8ku6BUdN72s6Li5g666jcGp464zFSZhhpiGycIwC8zCRFaRzng2zF+N0d5m6bhWkY4YwjCnVKf6MdJjJXs/mVZgchURnv9UoePsObY1nnyrw4Vol5sotoYI+tZD6yNCpt8ijScfTXtQ4aKAU9vNLoQpHHaIQyjlKP2MjqNW5NMpOD2FfgbGbIPaaLsCjcOKUw8s2LMO2kk/kfkUHoyTCxnL0gUaQV23XEZSLp+tEVwjXOY7rNGXbI26sWia+8qwctEUaxTmco5oyGQXipadIuskMGM7o/aeJ8y3Jv12zCL2kjNmzEIho1ikV5PJM7nfyI6edFQ3y76trFvakyk49e4L1QOBeoylEOa/rfA07jR6KwS1JKYbJsRFPOV1NHJ82o7ul522424QM7OHjubtnXD7iOh3A75c3qDlBqafM7lZsFx7jTOw0goX2rnZP80pDI/iNcT7Y5R11KNxd+kEsbHK5unE3BvNlJNcDffxAgsC8deeTO3IjZHE3JCQOzFN75/FkyBF2lH05phivHmnmvskHY3ta/gJmBuqww9g6BjAXFQMVM/CVybX/dQjAUPeNQ518i2IVDlFkO9JJ4TUwokpMR1gp4haiKNNOU2Ix0ugqM/sKsZBb7AgP/MBOY8DxLAaZC+5oPQEdz+iPbWd2Q7kZ0SkehVGQSIckYfb8kyRsozB6uIdACXeebj5Qa4DIOelXG6rynCJxB4l/bd5ZG2wL5Onv5kRZHpkJF52XOGu5HGFczKUKT+zmH1jivQrIS63tddzQbIuM7/vjuyvuWJHm4cLWNLiKte8mOnlnP0v6VV2tsbdnB3EysNCHKo97YgGPpKjLyGSYCE9q3GJ7JiiUoO06JT2C2Z6kTr8jnraXCHaICsEd5E3HvgpYMKuYmGIpShfPLNopXLlKyapBvKVIOwUgbC9HB4qN75SA7Neoi9hB3KW27TVQnID+wNR1ixycwkmuewUDCUXZz3V0dnCsjy191dCYMQRZFAuAAHPe7WQOasNJMbCQVC7yngvFpZ0xfFhOBLqPFUfvlKVb0PkIIpdst9I7Qfgphuup0mFaj71xbWnfqwkD/IiDDbLcrUviNlrcmjae76wpJDKZig99KaWw/IVYlQ2gYn5tNlCYq4N/LWNyVIBniS2UK6hi1jfmK9f0d6rVtqpIwTADpzp+Ss7YjNbsBp4EmeG/vBJ4GujgWUo76htwBH9976iJzC1a05W6O3nmNMH0eoD/pMiyH6jbF8apLZWDxO0y+W2Al6cJMvPLdVjMSttag6h8nuKtiqQiq+orcleNjguKr2LWdZ/TdjkWRROep0AeswnF47SiSl75aMdd58UjgfUOAy570M93UHdgNw06IPmAUXZuMIA2SgS1BJH/abVNIPlF3Jsl71wVmrHrW/h0miH02TZFrVRnFjjKkQG/vY4u1xY2T4UUOJYJq+0KU2Jz6W08SQ3H1ezI4Gd0WxdRX1zFe2hzKid3Bjkfo2gJjMMbUbQ1Wh9RrSJs2mRHr9ii2QPRfJVDMHI7L0cM04QxlBAA57lAj47xulZDaTn7U2SOaf3bc7qTeSf4FxErPJn+9d0TGvN1uQKHdPKsbH8T5BRujL9Gd2/h23dajG166FOQTaoVM/wBkFyHNQzUAhdV6oZzl2qW4q3JWcXKvvo0JzAA7fhwrQuzC21TxC39eUO02vuULiPq9FVmdqHfNIcJ9UDs3XK74H67OmpcBt1Wg8gUrXhtHcV+gQBtL8gj5mAM1YFXTq3MT1bOwRQoQ3LIbuCZPCmh9G1108TI/ucUyg4WeZRJY0Oi3QsJbyiJwNQYnzDKpbOOIRWzlCvh0SFoVR7Pld/X8Sw14aOag8NpQm7wJ4f/8jcePUjo7xAdp4LMD9yEvILGyFdY/j+HdkOq+54sHYJdnuiMQb9+A76JhrltekoOYBEfcmONmPkO+co3YwgvUhLD9eX07DEOEeBUdhRR5GDBBjZc2ZRpM3aDxT2/pOhmPamxeyPmC49YRTd/D7W6UJNhKBvuJ18DLFHXurMrb8gYbNaDTaIjIwlePBW4BZul+aCk0PFS+ZlVqHyGq7ssESF5iewmvo4T1bj+p9d+iXzW1ZN7Iu7mNrNHgOEcW51FfLIZCb8nSZ8E6P8yJzhblEhZrydnDntS+3zI4BWa27iVf8NMhuT6+cM9viofRYUKZCvs4qPSxeQpQ4RUrnYoPaM3Heemlz6ZalN1rH7MmQH9PJ8EqM9yg5yVya8nJG8xp5FR4FdLdhRYFAuMdVCrFvPP4JrezX1FomWGc7j4elY4MfItEixWJWfj2q2WG9Mdq3UTTA/oIOy+Vg2kIAl5doCbtuoC/rkzic3bDGnoHyefQe7M6GqUCYkKG0/JDXYHdKCBHFB9B3uaJSjWTrKXTWC7FDOmlfjI5QNKyZxZGauYz35MPQrL+98L2+CramujJcf0rNXP3bHTtwYCDGNaOcyXgGKtvREZLnaAmNffMMt7Q9i2ec8SI8M1WShPHZR6a+V71/H+wBdWXv2PDRnT4zTo+21E+uqum+KM77o5Ups/jEEo8nqkH75Xj3olQx2jKPGqwe5XsqV7hq8NrqHfnwBK6x3Q0s7Xsg0CQ7coYnVXgHkPvvXGIQ0qgg1W4hBnnEMaXmqRU8X/plDHAGUPuHmI2S24AD9qis5AdrCeFclpxk9KFcf0qesqfQ1RVTEoQpddfK7q7HyGmcfBe+jrE1sIu/S6fQnLY3uiz91hyWfvi5vDKEH60Mz5dohVDzjzvZ1Qb0Io6OiebF4SRbQF13dz9zLsu7spTy9OR4YlojsINDOeswqry5hzYpQ1jEqn4uVjrnZIBqCgIioJi4KHUT6sXxFFw/wiAU5K0Ei32X0Zm+C59JlFDSjoa1zkJ6HQ8yThEoas7sA9kZyRYeDrBbBHU4z313IjBUwPqg9isT8oCEQ81aSM2OtGIYHKZR4AlBQ7ogaOmUabjeX1H/XPK4m2z9xZwUF4xw5+xwkzAJ9GAYXiW58ItrGLm+0Mw9Q/cshBg1HWsVfd+u4vfFQssDqwLYw4F0fqP4ebtT0+cSuWxrf34r2t5CILkLu2owKQlHc1F27ep5Ob2prkYm8SIwJqsPFuC6N90IR5eU2mN/yeRTZGnStDUJS9jkQ0clasDCX2wtwzLdk5Uc89kuHPHvOaAbLhvthYfJBuOmAU3OFo3b4fqBz15qKdKITu527qsz00j1CEYtRyeudmb1IuqdSdz+3p1K6BRexfXZR5bux6+g+HTnGbU2tQZDzAmidK79Eycl0n8xSpqke26ffxUvUGfQnuPmq2scbpCdBKUy61Y7EPt0+lOKV5Rof73wfyi99/NQ+hIE4vKBq5vP2kbkrNexldJ9iADK7MMLnrqo9g9ThV92BUesteYCTJsC5OyfJ2P1BBkfVQyJYwPRPa78X1ymFas9+aA9cp3B1uV1q7eU2QpDWGedZitWhIFc+BxEEmRs5afvta8p6ru/hYkLo9EKYzEFHqMEJ6kLsWCBuF+AVNwIVkTDdPIPkv6kHeWefY6RFoqweFvpJrenWi9nhgfAiHczWBqPtUI1Aw+lthRd5knXNB5pQeztceQp70O4UX0oOWN9hedg9naRYdYZTNlCPEOBq5AL2fjmhi07tHwRSsoTa9raF4QIqHpTak154IdBJtL44cQzGo4CPyGSVRcEBRAGQy5XdKLIJIZL8PFnsFUDDSrHS0iJiTkioExxVh5e7jQQ0BaX5aRRzcOyAUtGyZKUR+oKZKqa6+TXlALginwEpl4wgh1ZN0LobCLZ0Hd77xJ6KyL5L7+VyuY3Dg52psHcEU8QrET7sQ83wArVgtb4Z819z9mmuEv3j3aQ13UYFya+b5dl/P6klmbDfUY/A+1SdwMORLFkVe516bCHaGV4GCYvV7u54Yy2iiiW4rn/YCDmJ1o6eJVq3q4I9PIr4cQesBfFHivl43BDv6+QPdeB7CHGxQqLlj3TmezgCGYWV8Yc6cYeSP4NmSn7VMzZz+9swGcFxjbN/ajgR5OOKQyOgIvJ7o8MTjA2dkthxEyNiki8IRizoZ3MJazr12my00+tLtUV2pt9i7qp2F6i954SS8YCe1qB9PLOUHWAbEzSXMYKlJjNVIn8j01DUVA/zU3sK+3oKUqVozn6YOztEuRUwV0ReRe6inXnQ/e04OS11F64OU+2dc4ptEJtuGDEjBcwQP6YGpMr8DOkO1ngK1YOEqHzrEwQJCMh9Dqc0/SxQpSPCjvElV8iy5e36G5l02uX7EiG/ZChZQSnXWVC1+1pCYv8Meh2+lG6n89dDx3S4vxxukPfRXlHm0bO1MK8DqnPwVLSZmBPjck6zzHE8bsegboUgc5zNTPDGYKpTfFWuwO3szCejw6u6352sddbFCz4PZJ7H8A/4uEZlEe6Sk6f3t6P+mB71Mdh3NfY/V4W/hNjVWHSsFi48hVeSr4j9JakdW1i3szM6ig4sxXQ0AkYjyOQXqLNU44luJhbS/tRDAZPVqKMd2cAKzxt9CAeMcBP7sG3R+BNOAewoCYkOuKGdl1yNwF3tfcqhlQ4GplMPrC09hNm3NbuQsSmkboMdlA6ig/ViZ33Q8RSdY2c90/Fi3T4ocBy3c3pLlxzKLSifmPoHWXJ4Bw/t9e0VOtFBL4tYNOFmHdvXx0J5QXSArxkmYBbjYEYzdWxXIDrYwK1g5li3AsI3mVkC8EztgrepvwECDbPXzMLgqPfmAPi0wj7gCNQMJE0NgpSFozzoIdxr0WExxrVaQJIRYqTFdvC3dG/sIoamDnRN0pdvKP2livVogh+8j1yVYS9XT3JQBqlHOuZ72FPVCg8LkBRaqz2cGC8n/OuIPHvgdlTHRAMkSlIU7v7AgznqoU7xObszeq87pXVklp0R1IaSnEWs1WGx1tTSBGv73gDWNmyr0JnuH4Q7kC0Ex1l/4jKoopPowBxCD3kiTT4h9TmUJjKRJorUWXPGs/q6WynTRk1obfx20nGxf0HHjQB+Gcs0imUyLJhJDqj5ILGHWsoRb8ArJU6Mh118Plt0Nt/umjVneFAFtJrKDHVUeGg8HBlPJ6YmMxLm+GKXHBjsgbeJGSHObHEREHCxjEaBOZ8HXd4DrAlJREHpz/j0EpQeJ/IMRCEES+Ol8SrLg6ID0+1Rclm3AzAUZKPKacVaqrDTjHFuqXpcTrhqKN2pYbVvs5EQ+/+Iqi39+I1yWvGErOaMN7m7OgWEcu3YrRWG9UJsQYO9DGIvcRrbezNPEtbCSBYpfJGtvNGscUVUs/pzlhxzUUsWnXogUGe5YldE2ieDwIitaPRiLmE7Z/i4zFE+87x6bk4t2la7MImV9g3IQWc79VwHJN7Z+Jd9t38zF1kQX5T9kDT6SkwpPjeHx+d1wj8gu5ARYO7pWlTVnxMxI7bSuYZoIbFVSnLUhG8gsuBWego31Pi4M4ihHX8gZ0rJgGvBrk0IfyQLxTPIgRV6jQpbneycGR4wJTilWT8OseEldCmE9lPlskvqqhyB2+WZ5cZ1j3Ern1E7O2fmFe5r5ktcSPhjK4qk0wgFsMHjczL5FrxO+IfYpEE1VWzSn4EGyCV/5pqBWNTwH8hBNmYMjaDGCKsxwmDqsB0d5qFDH53OyJ4u8OPwEgF7TIvoE7tasPbN7fUbm6pPjWZaqXT8tLqEXE0IB8e2ta/1sxy7fX/Qfn6aCi3U1ggkqf1xC1GWOiN5RZoqkzsFjT01eXMFmTK02VxhMlu68QN3EKPNxmOuQiExyNNNnUloJkfRtu8qbHnl74dwolkSQ6v6M1Z1LfT9Q3iWlszxiGHhBoa56HosS7aWnJ3Dv5RHFIqympMjdOjEfFA9gpFvFh0DP9kWzCOvTPm8WdhIogNhDsxZZjXmb4X9fd5i7C8uhXoaYNwFqhzhrA9ApzxlSbZO493rk9Ja46MT7TwTn4Pky2b08tQjvHxceAA4I7+AEPQsTJbYr/gemzWjOdeCZ7ahBiRGI/s/tIYJn6qgCVxbBOzR+rmcIyaXZmM/UJx0uyhan41X8uKCckdom4mXY2iimmUW2LtdcjKPoz9PlI0nGFQ5fLqDBIKD6l0j5XOUId43UqJNnIUHyQkFjNz1HHMWfFD7R2DJzHYFnObP7mHHbvDNRs5AtikAL1o+M7srcopce7cXSlTQorhAHrJMSGJa0Ps/AYd8YJxnZv0MRbeYKHGIyc9GyypkFFsjHE8vFSOmVBw0x2aRbzRxPWrjJSRAC0ihFervZl4QUHW6IPdMP5tMZhE5IFlPTQ5KMh4Oak93xsOeKVA3hJGUDy6OnJeYeDkxBayHs4oUANmZ6pSjKj/GbT9+K+dRLJyx0J3x5OvU9ZFeadFg7FiMFKuoxZy1sjcwOUqAMLXLxE8M/y3+2ZjjSqy62xH5X+B89Q92P6TRdyj0O9JEVVYYjI8jT8lE9toqt1OKljDS4QSqCdN4Vh4SGeCPNpsoS4K2osun3aSNWfrklMxBoJY6sOVYxq8C72ydZhPsk2UdGhooxpxWFGK38ulOUATHSlkr75ScQ7UQmq/W5Dw9nX8rhW/mUFaftdOSKNBiMTJPnCOCbdbXlviBheApm7OD/5k5+M0nJNMVi24otOQC3u6LBtC1uF2iLHeBYWgFRnL7IMo6TW5rsnZ7p2igESxh3qMI8Y4VIebVxvvhw0CCF3LH64MdGclpJqwYooD0pnE4o/a07+vpIMpK0RfKQtHMpFAWZCwkhcrnEXxKy1Etx0MvbWqy7JG6NH52jPSs6KCfncbD65TWuj9PgINtgejLxUShH7yCLEQHc/UilZrKIzBpzb6ttC8hioKjHYnpV3jtK3dQlosOWsb2h+awAWnM7Z3yQWzfEAvlLXWIUDVVwEMbyAUgJUFgt59FC35FXn+WGSzM97KnGpVnGckdaDSNwMJNUiwHUby43WU0OoVXiN9h1fLJOes1G4EYBwvdpHdEC3ZiMbzsMDZMU0UHLYxuAREd9LRgT8ehAKJbgZI/wUeB5VAHZqiDWnqaWUx6Y1gBP+wqLnT1IJqcD6BQRDobLJw1/SoiDu9zFi3E4zT4psrnqyTljn2nXxBlo567eoYAGdo1MkJdAJws/JmoNLGa10TzjLl55Vn2DIEoaz0Zy334bkWKhmzbzRvLt5TksITA+Niht+jgsrEXiKTpzoSVYeMPcppVgmVhznbwFFuiFuAMR7WPnTqTcAtPMUw9253SCOrAUD+Aefe2oLmPIDY/iyRCNpjw/gd7llPbWbFHFJGfsUv66EWRpMqD+uU06hsO9cPtUehpeKV79hyenu6oBquLjnmVeYIIaopxajWyXFyRUS8lBKjiWDBOBZVd0MCSCnmvwpkhT/ORQ61CTo3jx83vUHwjgjfiOs/e7d3MDZTCeYdqkn3vAFZwIYEYyYWSYaiVsK7IAbUZgEDJIiolUH94rZpAVVMtdMqbLIXmS4pukzuYkVCzhyPboLRZ8hVyKeid7u7Q/VDbNHsG3kf+R4VenlGHOALrH4SX0niSq2nI7QZLNoDUc4QmNAoTakCGi9PqsDuWIYIO0jt07oRbbPSeG23OOojRgVwj76SWFjFZF8k8Zjs2mZCdx4w0ncc8w9G5aD1BmBl34hgB1bUowfVOs/3CjjAIiA7MRhz2lTiKFhYQ+ndkrogOLDHMfTUO9uqspdxEZxs8Z013wAUB0Zfr8VL4A158t7OKWuplJMy8wXwmhOzeuJPbpsOKD01EwpliwxMxRJlPigvVqlNep0qsGWkZRif8La8KEhctPMWecFFVInPRwu94tLgFkB50mMFI624F061wHbxAHYYTzFgmayg6M5eJuZ9TjwRXHth6CZgwR/4t9RFCsdB1H6EsMd9UcCAGHrPPEjPGAjciNYiy8DAplSAqUe9sjnqbfAsSoD2h0o6ESnH/BMuC1VDaaxygrpfVQCfBzhxXzn6jWeCYSSayMN8O08aiTrfECR61RQux283KQ1JRnbKHLhdeXiqEbtF3ur0iCdctvT8I2oEM4sRnzriFa+U11UotOLe7qHFyUQs+4MKdgpoX0UauAenzJp6uOokqEi/V3u8Flg7v29FjT7g2Fl6OhOu2hqq/QsqQUbtyyEpj56hcArgmVzCXaQT+GkGeZZATE+SEKrNB7mS5QJSNF6CckjkCz3a0lApVh4nspUglZOaJRMmHdimzXIRIZshfaBEQVQGFaQHqxaQFZpnwjV7IN2YRvtGBmVUl5mdxmN+4EZetS7KIMZeOZIc6PI/MHEpS8O45IqzHsmqW7dj+9IPpakoxrgvMAwSY2Wsn64F2dHecnuyWvMOdorCPuEZLV0nJJVSolWfY/V5CbIIb+ptSiEsM0+05seCWKAvvOGen/a2Nlhvw1k4QE8zXGX43WmfgrzVeZxgOxOMYyzRiMoTs8gLQjwWupLOrDmShQeJoutIw1XSlQZS1EmvNrja45DAjnTgy5jj9QLQOasdMLyeH/B3x+igYMbhjlZwuET0WR07NLPxTx7Fzt6KZeYam+asVC/MGxMV2uoZBpluLzNcPwyvrr2hjOn3Szcq7dgt6TpmT9sdV0Kiq4jKY+UjK6Us7Sfmp6eUWRLlG0cFFb09CLbEHwuc2sfStqWtAdN3LlfepAlh4npH99qM9eEKhqkywkTzf6RR2qlKBrkBtibpTr1G3MDyPO5eJeYyeldcPSqYtAN49cvS5PN5f/HALi0/uCYK6ySPjZH3EreTifskpstRIRXxy0gBxv8jUOGWiLEkhh/fYhMg4+YAaPJ4Yfp06jZclpIjpL2R8crpYMT5eLiaOiTI5poabBWzYhHi5wjgs+U6OFUcmJIjlEBoyk9dgw4LbRFmGXB/WKIw4LTI1PjIqQSYXxyanmsXW55UcPVFeRV5cGsTfqGzxXC3MwvsHiRXJ+liJkSlGeSQpEhKrijMkNEAqjk6VxQDK4iMT5JVToPHlkWkyRXJsfIJMHAKvpCapMrkyQUGiRIrRi5TRg2sAcWSqTJycBJAqTkzG99g++raQx8eY1OEvcMa56+PGyBJkChmJ601fIUyKLDo+Nj7aENiAWzY8FxZyosmaRSF45uJFV1G+6OSk2Pi4vygezytZmRCT1EYhZrOEWmKigEm5QpYqBirh8QKTEjIoWmJJK3QUs/TTURyf0lGMDdWRNnlHNpmOmA51Y9NNjMwQR8m4GshiOkPmyiQsFDYGNGckBFLIElNIs0AfAX9ap+jIpKRkBUZWymUx4vR4xXiuAjHKxBQSTl5NOFp/Nhivi1Ke2iUqPqmLIlE+ntJTdCKUOC0+mjQ7dCGo5DRxXKosRdxGLkuI7cR6KlKVsjbgI4senyxu08UrOTExOalLm3GR6RPFbaampMYnKcTO3ftOb0OsCXrpcxXHRkJtYrCK8UlpyRNl4lBpiB8UKzExMok4Q8VjxJgVV46kyERZZx6vRg2jVJTy+KS4SqGQk/D+MpS/N4apYdLOcplCTz5yBcE6dIaYxPgkQH8qPMAphsdjg3ROjYyJV8o7JwA5dI6MjlZ01geKiI4ERPPM04ZAyUromUlxnfRBO5GgVWZUif70PdlAf4nREXJZaposNSImXh4BbZoki4bMlNHRMuACMbxAjpnKxcAeKaFCv/VBXlp1l2a5a3wMMJEa+j4apYyrYZRZ5YwUiYmdOcS0krdvr8cSFDMmyviL1zklUi5PT06N4Tl7DXbmtdf/eMD+W8UQAqdvPP+ktMgEIGDK4Li6oLetLQYjudJuCbnyjGgfU4hUKFLjo5SkHZPFCTCYyKBvpUfxCE1gfEMn4HXp3LWLcSUgAVIP6M8m2bQ3q6r+VZYUwyNtGGHUhqZh9fXhmtLfW5ySmpwWb47B9jwoS0oX/MSqdxpBfjx85+EYx2O5DC8+hYc8hkdYDA/KyAO+wDMwF56B1fNom/JIY/IiUwy5xadAhsYOOISAExpJeiIQbnsqEL4EsH4mEDYGQLfGRu934dmlhJidJD8UlnBU/3WgjfC4u43wIgBKcyKAOqRPIIvgJcoSoyOjx8s6R5tiqXP3bnLEVasEJW9IYGhESGhgsMSbJ27VXi5u2yqmHXH0lgRIQsEV330Cw4Z484Z5BIRJeBJ4q0XpQiGTK5BOO8NHK0AvfBIKho4tj4D02Xd8jUqIjJHxXLr17uwC/7rp37rr33ro33rq33rp33rr31z1b276N5euhlcXw6shGxdDPi6GjFwMObkYsnIx5OViyMzFkFs3Q27dDLl1M+TWzZBbN0Nu3Xoi0njy5FhFREJ8YryCx/Zx5B3kPQIoG7laYuRk7jVOppDzUoHQIqH1eFEZgGPgEEkK9jVVFp3GU8QnypKVEA57ZKwyKbqPuEUredt2LcQ4pAATjhdL5XF9xJLU1OTUPmL/JLkyFsbxeEhGHBOpiITRgY4EUeAuS63xmekEY5SUZBh9gFUmA89KjY/BMSA9NR74AeeBactTSNI1PiddYBps0jLymT4eR2QsHqYNIlQKYEsmjk1NThRz9B2DY8znl/kfJNxHnJRMcFTjc3FLuU+InvsQGe9z6k3LkwKjP8hLOJQqklNBxgYhIaazPj3gSITTRoFchT31b9sKRmhoGeCT4mGRqUT6h3GQSw2cqKxTdQnYQZEUQE7EjFhWpPiP1MksyX+EX/irlBF5MjoxJSJFySLjs9LwSkgmsoqh9yFO9E0ubgu9tM/n4HZ4amRKCqYUmQpCRwySumK8zEBK+u70eeUCShuTChJkLAoKY5J4nxvPLD/SFWMTktM/rx9DdIUyNQnqTSg/JTkh4e/wOCQZZoJQbU6ARFkOhkOZogbvX+iHbVvJ231uL/+stIckGxIA/iiLT+Mq98/5BUdv+gTJdE/BydAQvnN7+WeWiwb91/ON+6f5BnOVHxIWEEC7zL+TP8cO9EWIEbfBYrT5zPr76GcjIFolR6Pwj71WTEYy0peBu33+GBHPFpEsWhioOCrD0MydQd6Ohebq0wLL2eKfp02L9j+TdpwMxvuYz0z8c+n173HMkcHfpOfJ8hIlWfVIjUwCwV7sjcJCZEwMUAUKiintOlIGYOz0+WX1BXpOiU+RUc/hLAdAkjXhAVAXoDQYMZDTKeC9xr+UviQxRZGBokgEYKDGv1ZGr0icK8bGA68HKfhfLMcQb0ObR9LmGDjwc9PyjpdzwxbgyJSpGQ1cn5VWyD/E/+eWkRU56HIAzmX19AFJJSkTZanx0TDYKfQTzc9IE8cXTAXEYhAiUpXRgECZyfpGPC7HxU+R/UN5C2a8SaSkZAAzEQT6UNno89MyahnjdLCTKFIzwLlz5841/v30kPP+47LFxMsjoxIwqaTIuARc1YtLBjl9fCJhCgYaMghFbBb/IA9gWApTXCYlJ3WKwqkyOicmx8g+n4aUCTFIJEiRKNBQWqdTCyI3fD6fGU4ikdlIqjIFRWGuuElE2gDSNsFvZxg4/1l7cXmw9IgYjY2BVuoIKOyM/YFrxsi4yPik/xwOuCb67LHHuJidxZ64+EfaqrPYIyqZdNnPrC/I89jfaGGai+Xi/qS6idGdBsihExp9kvU48v2P6k0X9IDRkgkqNk/0Z8enS7EkNhWJoU2MKZzIL59PP1XxyWhjHqdfhaflRDGm87/Bg42mSwaJr/O/V16O1o1S/Pu+Db4S7DXIYnFeA8IA+HcW/13dDEIIoIlya9LJWBEvQpGRIvsH9GBagzjjGvxt+UNwjQMLz6FR/B+SpWr87bybJWLammTKa6j4P6h31SMywQKgtG23dp8ty3xWet3/aXoGao0zpdbPnGdEG8qRHiknixvy8cCL/q12gt6enJrxT+TdaurEjg1m2wPcjlbnf5guR8OGhRU6h05MTpMZNsb0yVN+TyZF/2obszlxKO78z/pc1Vwunts3o6wOlz2MVor+aVmr5Xb/Al7ln88bPqNPyGmf+Ow29kuWK8RhSTAjih5Pm4+Mujj2yTv/58rzeet+Q2S0SyhTYrBDSD1GRIRKpRFegWFDQv8R/yabUPCKc4vP4F0hrAxotMTIrTrCX3bq9e/ToMlI+5nyT8znoZdtsc8vZyVWH6cnnH+pzeP+yRjNphHVq0dEkiKZ2/L9h/3HiN9FyqOMOuG/1gej/rmMlRgdgVM4susZkZKcnIASZmSiDHcQ2pA9JNxzbkN3GZOT4v7RvCQaxgUyiUokKdHt/n84TzRLI0UJkyn5+Br/ThoKZBIRqbK4eNxs/vfKk5qc/h+pF6YTGy9LoE2HG3jQDnIopTwlAhNBF1zywUWUCByeIlCuQSnbxCcmHshZkZBBg+Acg3hHp0UAeWAU7hPm9MafdBwhLlz+6IybYBHp8Qkx0ZGpJHwE7tDKUul2eZI+CXznsbuyXHyWf0SwzAOKlxqhSI4AH9woN9ncZ7ld5U14HqFNeXwSSZCgOcIwUSaO42XRE83cTAkaXaLikxKSkycqUyLIzrL+k6unwZ+tEFY8ylBzEot1NnXlEAI+dMsQ/kSRtyg2QtXJ4LsRMkk4Fi/xSdHGvvCZCriNTmWRSuV6EgobBD65WrBO+BkLOJCPJxlxMxJ9NonKBEW8cbNUob/GFrJSUNMim/jII2NlVbgbsMk5wswgNcM8JHE0R0ilGCyZsohiK8k6GteTdapcU4OfmSv2B0wWnqTz0RElgt03M9A5aTgePI0KIDfDsrxKzHH4qdKX86guwl8ENcEcDgKmdEL6faTc0LXJDwTH2ASUT1w6d+vcE0bSlIzU+LjxCrGLm1vPTt26unQVD5JFJnVKSFamiH1haEvIEKPqkjQydaLYIyYBRgfeZ/2yrIQCnoAn5PF5izLw3YpnD1/jZuK7NU8M/+g7Xgthz3OXWwnx6jp0594z4R99F+PdInx8xzcLPk9A3y348G6P79AFklORBYrHA0uEUhL+wFMmTUxKTk/C4TEllVM1kinGJ8fwuF2B9PikmOR0MS6i6IOzadCNDmxzLtHUaHFivDwxUhE9Xp8AWW4T40xT74TUI+N8EmRJcYrxcr1ndHKMjHMkiesTilew7iCbpADP0/skxMN4FZnQpapYwEYVkUnRMlNX0xgkz0oxqnHFET8WBL6oSECgAa9kWYhi1eDIJU+cMSIIIRmcKwx5+kTlGYlRyQlmSOjUCbFJtoZhHOmUHEuXLv+KrL7aZyXc952VcPtGK2HEN1bC8wAlAL98ayVM22QlbA9+jb+3Eo4H+BqgfKuVcM5uK+HFH6yEVwF+22wlDN5iJeyyx0oYsA3eATrtsBLmARTttBLG7QI3CH8Ynj8DtIJwl/dbCf3ADfO359Xh1YWnkGfDswU6rgF0XRNo2I5nyavFs+DVxjPHf1F+eys+r6EVn1/Pqg6viRXfvo6VFa+RFV9Q38qD19SK725vZclztOJbOFg15zlZ8cV1rWx5ja34wgZWs3juVhjfAuLPgviNML5jHSsbjG9d3yoS44+ztxJgfEsHKxeM37WuVS2Mb9fA6hSJPw5NSQmDAOx5DkI5r67NF/CeAtCVx7PN4dnbgBwiHAcA/dx2A1YUAHofXiNs+wD8reF9BIAjfC/i1bPpC++TAVzhu4BXx6YOvI8HaAvfu+AJCQjnAfjBdznEF8B7KIADr77wMcTvAO8KgB7gfxbi14J34FhCZ/jeAk8MnwXgDd9aiI/pjQFwgu9VPAebEHifBtAPvougPg3hPQGgI3wfgqcdwAKAAPh+B/Et4T0YoC7k/y3k3xLeYSREk8e2pyH/mvAeBdACvjfB0wJgNoAnfBdDfECgcBRAY/heBvl7wfsUgD7wfRXyrwfvEwDaw/c+eCI+5wMMgu/XEB8aAa1QCxvw0MZVPZvu8J4G0Av8L0D+QD3CWIDW8L0NnojvOQA+8F0G8W3hfSxAM/heA/lHw/sMgAHwfQfybwLvSQCd4fsYPGsDLAQYAt8f2fYfClAH6q9i238SgAv457LtHwnQHL6/gScfYBaAB3w/Ytt/JEAj+F7Ctn8GgBt8F7LtHw/QDr73wBPLywD4w/dLtv3DAOrz7IUWfNr+SoCe4P8z2/4gTApbwfcP8ER8ZQNI4PtXtv3DAZrC91ds+08H6A/ft9j2TwToBN9H4InpaQCk8P2BbX+MUw/qn8e2vxwA2sH2DNv+iFNwt/0enhheBQDtbPuUbf/RAIBn2xVs+08FADzYXmfbH1iYEOplewCemJ4aYDB8v2HbfzhAQ6P2TwfoDf4X2faH2ZawDXzvgCfmNxfAF75/Z9s/AgDazXYd2/4zAQbC9z22/ZMBusD3CXhiel8CBML3p7/p/6fM+v9Gs/7/0Kz/Lzbr/5fN+v9us/7/4m/6/zmz/r/VrP+XmPX/1Wb9/6ZZ/z9s1v/f/03//8ms/39n1v+fmPX/5Wb9/5pZ/99v1v//+Jv+/4tZ/99u1v9/M+v/a836/12z/n/crP9X/E3/zzPr/9+a9f/HZv1/qVn/v2LW//ea9f9Xf9P/z5v1/x/N+n+pWf//2qz/3zbr/0fN+v+ff9P/8836/2az/v/MrP+vNOv/N8z6/0Gz/v/2b/r/JbP+v9Os/z836//rzfr/fbP+f9Ks/+t44vikv5P//1LUt2f/1SFyUF1ePfjnAP/qw78G8K8h/HOEf43gX2P41wT+OcG/pvDPHf7h2ShLHs4GUH6qBak04jXnufA8eJG8WbxTPD5/Fh+Eeku+gG/NF/Lt+PZ8R76Y35Xvzh9nnL9xObiycOXhysSVC//Z8/x5eeR8FuZtDbkLIf8aILvVAnmtDsRoCCX9gteS14HXndeX58UL4UXz5DwV71uI95hHbB4QRXALS4HAysoafjbwE7I/W/ZXw+xX0+xn9ze/Wn/zq/1v/kT/5g9aoE7duvXqOcCvPvwasL+G7M/R7NfI7Nf4b35N/ubn9G/+mv6bP9L+VtY22OLYulybcbi1Z3912F9d9leP/TmY/eqb/RqY/Rqa/Rz/5tfob37/Jv6d7KDfLAAIALgA0BFgG0ACQBmAE8AagDEAdwD6ARwDmAbwEcACYDaAJ0AuQAuAbwCiAB4B1AVYAhAMUAjQDWAPQCrAS4AaAPMBBgH8DNAe4AeACQC/AjQG+ApgFMAtgD4ARwCmAHwAsAaYA+ADcAagNcD3ALEATwEaAKwAGAZwHaAXwAGANIA3ALUBFgIMAbgI0BlgB0ASwO8AzQDWAYwFuAcwAOAEwAyAT2Q1RAh8Tgj8TgjcTgi8T8jbCBAJ8BCgDsBigKEAlwFcAHYDTAJ4QXiWkMcA+AOcA2gHsBUgHqAEoBHAaoCRADcB3AAOA2QAvAewAsgGkAD8BICmv74DkAE8AagPsBwgDOAaQE+A/QBKgD8AagFoAKQAvwB0AtgOkAjwG0BTgLUA4QB3AfoDHAeYDlABUA9qUI9vy1sKz6XwDIFnCDyvwPMKPLvDszs898JzLzzl8JTD8xU8X8GzJjxrwlMNTzU8B8NzMDzPw/M8PDvAswM8f4Tnj/CcCM+J8CyFZyk8m8CzCTy/hufX8BwNz9HwvA3P2/DsC8++8DwKz6PwnArPqfD8E55/whNHLRt4zoXnXHj6wtMXnvnwzIdnG3i2gedmeG6GZxw84+D5DJ7P4NkQng3huRKeK+E5HJ7D4XkDnjfg2RueveF5EJ4H4ZkOz3R4voXnW3iK4CmC55fw/BKegfAMhOcleF6CZxd4doHnTnjuhGcyPJPh+Ryez+H5BTy/gOd6eK6HZwQ8I+B5H5734TkQngPheRKeJ+E5E54z4amDpw6ePMCAO4AYYByAPUAQQFeAFDKq2vD8ANoCjAdwBBgB4AowGUAA4A3gDBAD4AAQCtADQAFgCSmoALwA8gBaAnwLEA3wmExGcB3RilCyIwCO5g4AdgBOABYAdQFwXaYxGemtoE+j+S0r6JtW0P+soI9ZQW2soK9YkX/1AWoBNAWwBKhH1nSsgFZQSrGCNrPCUQ9EMVvrGlY1BXaWtSxq80W8f+XHNwMLM7A0A4EZWJlBdXlYGMXHcNak5eh0Dnea8OxabSJP8Xh4sSYe6sdLIlHkg5kbtCcP2ozHw0s6YbbIQ+ErBY2DAGwAQHs5D/5Bfc3rZ14fa6MycuVEsGWhBgs1WbBjoRYLf1V/azYtO7a+jmw9u7L1G8fWK4eNnPmvJPAf+nHZIg6IiM5LQr2CmHiyyRWZmsGTK1JlkYm4YMojR6eJXqLelXyQpVr6Gm989Iwq6fDYUytcAFwbj1TEo/5EmiwVl8j/onxLMmyE3wDgndzb4XkI4CeAAoBigBes31/VcUVXm/SOkbV/PzLUdnWj04k2X76ekNLzu+iSb5fHrOs273btTYfuZDQrufZg3s3ClR0CDtgen7Z7hk2nQ88WNz25KMb+YNOX4l0T/CYdfnXP40TW9Ku3GpcW300cuv/q6/zsK6phqxLq5WyZGDPlfVRF2TnZ/MAxfIebCdbR0f1FH/6oJdScFSf1HWsfH1DsMe5a6qS4by4XW/bzvSoYXJFdq3Di/hrffdiyv2fCqj2e188dve3+/ti2xwlF3ZRj7ksu1bp+Z2T/yz9u63qzdR/evaGZQ2+cbRBZcHL/633NW57eO2z18iOXRN8dP7TukEVb4TyriD037c44l9TcPXdacpc6AeNH/Ng08lT/TrEHFnncSbOedJt/TFy4qr39tedM9u5JX+w/YP1d8cn13a8e0n5zzmZyj/c80cIttiscV9V+eLTWhJmd+icKVybELOaPiX76eujEiVGRCU5FXWXZQ3hRL39bbp0w9Tt+k1OvhbOHnxb9cebmLllQycG6vx46oZ427/DH+03vRvl3ulX/1bQrC2QBV/8cEblHenHo/j4K3rFvH3U9etXju/uDbiwv6p94+vKmP19fvzKhJN7r482kHj7z4rYXHBp3S95J4P2kqWX3iIAaP5ybVutuv0lWQT94WLSxt695Yo7Y7lyr/eOH781OFttejT28vjjyYu3398auOnezXYtVBbv2bbmR37D/3pGzau3r3HfM8YPbE47kiFWHfjuw9+RXdo8OWH5VuFvh5nvt153phWvrt74tUDW4I69bM/pxVt+YZQMmJNbaMmrClJqXahev1dkubbODV2P3Opvp3ktF5YXfCueOf8lv9inXOj58eNTb83GyzEm9Eho9s56YlNbk6qcHHa4wo6bcsr8w6G5c8v3D798/P7HQ68TBhtcW7hqn/fb69RlLL288nVvkGvzyfuCLuKOX44Yf+/6u9f6Bg3vt8bvVoVZRQJMaO98Msuw1borAI+/5uPth9+O2PF+Y5JJxIt5nwd7I841Vscc2FCa36vVofPDydLsLlr41jx5uYNGiS2ursBN9j/zUtubxPUtG7esgmLB3zGbdjVyXSwX71etudmy6497oXbkxX7d+GV225tsJyhpLEy22WtuuGdirdml2nE1qveE8q9mDTi53mHLo0Y4Ou6e6Njlg9/XCwiW1Tlx7cvD5nWnN79+uebXwyhzPR1dfvNt7d3yS6tYXvzQ4MWt068NvHqbvSk73Pej4dJRwXsoEke7nvtaxY2ry6+jWyb6M3xH17opuYqTkUkKDyY9qbPi9sNaNUJVgSO5eS7fI1nGb3zYYVyD1jfe/nZ40YNCEyzvujLp+M7bmfffyvkW9Q3Yc2/rTuqP3Zl7a41ui29/V6eXx4/Nzj/zcdenekO+/3eds1avgyFLrG7+0G34v9GTczZadp8TuPTQo8rRFk/Hhyzokt+99oua+jQvt8prctxqleW7RidjfcGnSaHZUr255IZ06CH5KiJG8Tp8+Z/OoYfkrPAKF82+e9T+ae3m+9vmH8zdfP7YL3L9NOmPH/oWdVOsuOa2aO7Ru7iD7ljdDrqS8nrzE43lk2I0dnR2e7u99Y/8qpxVZKquRq5rMdtzK+/r2h067vjrfa2t4ePpTp4QE3f2BHlfX1R71yzfOWcsf11+/QOyzZ3Nk+tYT3z/UvnhW8ErrrLqXJ9vz060fdoSHl6738W57YWJyfEVK2o6JLm7PR7UXd7S1qZno6lT3VS+f+3tsws9MCk35rats4uu3r9ofPZDr8o1ysRPTY4PNoj+PrW94RJNVO+Pe1lauz/f002W8kp/w006Y3uQnj37t742wCswo954RVTK3U2DuGafQ2/z59Ze5H62tUWlbfp970/VkrZ82uAa8Ptr8y80ralxcoalny7swxs/lhkQd9SHp55CH6aHhR4/UT9jw7fWBmnkra69YHLTqxr06Wy/kF354WLb0/Ic/xtyISm36NGPivf2h7uuzAkeOqFu7QaOW9UW3Ulydv/Zo2X/zxArZ01FPp7WyPT88xrVgyLc7FvMfrZ/v2PzC5u7jKo613/nQefvvBQP3dVLVXZ+wx3bOj85+536tH1LQzmfGn+PTZY/eZAzsctDPuZeiiW3Tnu3rCl4eCxm8V+MXnHJPluHyfMa4T6+ePjuZW/Fp2uKCa/03nL/wodd81VGbxV9NDj222022ecvgVaq+NbauanHuw37beed32AeGP4+onfDa55eBNxMX1M5VeNUd9cqipcevp1ISTmV6pBf53ui10vppp4U/7ed9l5XV5Fjj+R6TRh8dNX6VNt3r5s2EUc0CO9WPmNHLbk2nJm3uOvEG1OWtOhziotqwKGqH+nLI/iUNfnp9d/jr56eXbc59fm3FzTclx2x2bNE4HZx4z2VN++fts3/LmPjzNr+UK8lNwt91bu/z8GGve7EbbH6aGR2qDW0heyV98mqPxabcrU3iFmd1bb1hfbtDO34qfr/+XkWfC6+uT63QXjo2cWtmxag9qwfYrt8z0zXrx13OTh1f1Lfp2c2nfTN5uovNvocpfn8UTBzaS+UzJX1PePSQGx/Oi54+LLyw/8J7TdaNB4PqrthZs6XmwNmUDWsZj6NZPuEtLW0SXBufHljfJbt27baeqwLjLLeGzsj5kBE263xUwBc/uc4a+7rlqrWba++9s6L+D014oU9GuQR+XB0VdaMoJONiw8CH/sNmfAha3unG1KtOF6Lqzdd0Cj66osdi7dEvCm5usC57NWPs9lyZb9Jiv4QuG0KU2l51+2y1sW05IdRZ2EE2sE5xxuYV3/kd+zK2yeJNbdrPP/7g2PmXGzUFpVH3KnJaPn968/jDYw4fCzbXGqia33rGnsUDDzsXpLyrfz6+r89TzynpFaP3T5TdeT1qxk+9bUN+T3P1e7t7h+2h8vV1N3a/MHB+aoUzXkTD6z0hl590Ncty5AkfiztbbG1Kc89b75mmEWQ3CLQ6NLRe7S/7XhZdz15Z6+HzMLuY941tQ5YWCWt0Wlejv++YminftnbyPVfctFn6N1+0azqu2baaXZp8Hflb49z7Pzr+sT++0dmXPevqVr2t933r3XUWB8jtHUb1q9+y6yeHKQsPNZAWT2n4wEfqeqPjl24Ll5zre/hdzT79fvceWDNrzoDgPjn9ZEEW/Uc0HNsrefqa3r3ybvXkb3XskXVyuMvea8u7/jrxSre7/DrdFz2Z6Lz5y62tPrk8b3NudKfWAdKollPbbGjRYvVTcf1Xzs3b7pvc/ot7Rzr4jPvYblKNAW1fO03qlJe2t+NXZ//ovP2b3l1yNF+lvH02YtKOkc3kq7vfSXVqtTS9Q+DQtNQXDRWSr68pJ99hZgQeGDyzgbDW9OZRl6ZtUmRmLG3mOfnnDYIpFT+fmbqr87GEud4zEu99cE0uWfQhKWHO/omjy9InWAS7jO/p+ipeOHNn1MD6idGxP3aIHHqqZNzVG9/LHh+PiTli2SJWE/8gTnz+hl/DjfX9h3wRMjhDuXjQx+h7gedtnYYsOTgq4Lu7q6Srvjrts7Pc2vfNEHfJKefZ3t7dfvGQjxC5t3/q79l0gdoraPyL0DiL7mEDjimH214/OGxBzruQoz/0CX7kMC3o2owTQ7Vuj0bdDxGPnvNb7MjdczeN6LG4NNzyz3ZjRkmSxyZ22R6R2aTnw4OT3j74/dLuRze/kz8es7ff04k3Pz3rFnfoiVWtKcWug1o/F4mLfx+27puyyNfjfit+1EV7Zd5vJfN7/Vh6fEz8r+WH6lXkF17+uC5h5aet1mG6jvaNPzSZUvSn5+l175U7xrzzK+G9mqnKfdm6f1Z5neE+L5Z52L7+tsP5Pz4s17z9RRf4Zlz45JvDex8pqs18vOX2eMDtY39Muqdev/d+YfM/7j4Z3PtOkd3EG89jt14/UPT86qw9na4JNkUVdL+44fKElKdXwhs7F9p/GvtTm2VrTs9of+uMv7tj/oVhw3P/7Lc875vZV04t19bJ2bJTen79T19CS507+6JOzXMKG+8LXolzfml8JedSp8MWF91X7Fyc/jFxUWfPDksatS1ZumbA9yt+DI1Z+fLXFst/ynyw7F3+sfWXts9Yt6Ke65qNGR/WOifvX1XPKn31oKMuX0+//Oqrrj0ZjU3E4AVjH9ZaGK++9GXZ2sz5t996qmf7C5j9Lc/Mmxfzlepk7RGzn+5qlnn51p1ZoReWZkV/PzS7j2PDubVSr83ZUPBo68oj4i0XBbE/vE/a9OO0yaU7Btdtt7PutuTtrc5s3+Y468XmLqXdv08LU27yGHjwu9Pt3m145dVn4w8V075du/LENwXy0/ufNbLed2Kz+wHml9kH7W7/sqfvbtHeKJH/7jCZetf4FjeORvjVP2L9JuSQy5rFh/fNv3dM9cDp+K2xo07+1mPVCez/srhjh9RnbX/4fef+usNXRn3Zrfxe7zsRE1sddr2x9nnbfT/NDxROj3lwPJk/l3/j0Mnrg+4WTXjZPf3+g2H20SPWD28U9KHrd1qH9fYfJr3b5nk2Z+r97Zvz47yEqcrWyRd/SZm5fXl9xzqd/jy4aeC6Ase5bbSXGnt+Kf9mm/jMrnO+U4QDdnbbMPrsQsf9cX1rFPDm7ol3DepiF1G28lH5yOy5K5/0vzx3jmzfgz53RwV+eWlg2+7pc+yLf32cPiK4VtFv7uNPDn238V2H8tPrV/q179piVODwdY/eJPvPXCr8I3/6ZvdrjjkfE4cUrO/Z4WBLzU+OK9ZvmNm+TSPfiiPTxB4WS758bf9W67el/wiHr0cM3NLywKKmLlfebmQmXEpzEG35edtDm5knssblWRembBh7sKHT05GHtr7ud79+QPaz3MsPMmfE1+5yfupEv/S8b0S1zueP3y1vly+IDNhw6OYfq5K9F+mufJwRFPt7k963hknbHK7d1t3qwJnnuzZ9O8/OqfGu27Nm3ohzWzy5sMPrL5KWWr5t3Td20VeqeQO7LP5txNJ2oeO897nYvLO7v0Xa7MilF9+X3V/yiTnU2Seu4dehFiltyo76lU+61yXgXNfM97fDnkmi12wYOPF9vupKw/G9TqWK5mec7x1evCPo4Rh3XeiQVqu0b+Tz1DsaPO/d4J37bMHaNgOOOX9R0txjctjqnTceqH/eNaZ73wMjfxt7+UnYrhlBvtcalekSmveNsvWZe+tZSbezsxcuTLm67re2u98PXRQxrHh2H5cRfVS2X25+mtT9C+GpObUSv++zf9ND9+On5ny06tLOv+GgIX/sfJXWotuKOuvmTz7RYVXTmyvFg8+9ntx5h19ODr+i8LtYjwlOY1e8zXBrH7hyxfrwly9aPrFqNFE6bsaNPxZejnpWeuBeRPBC29zeJfun3PThjT/W/FjBry735305LLpr5PvrLQTrJnx1/PvjNkWn+Cd7Je3bHmIrrP/VkNSmunYXv6szZ+pBxcN80S837ZdsObGtvU+dRq4t077LVMaeKbLnTxn3acel1K/PyX9u8WLTcN8Vjs+3um2vuDC2jsT6d2laNPPioqa19x2tx7uYoRld3vdottTj1u7WISevf1Vacub93gUbJTWjapc3sokP2Hhi6Nf9bvdqk9Vz9ZIVQZ86d159OLT1x3vadXUnhS9Ib/Cwx8XOvbb+6D+/juTpQEvxLNXRtMUPHtd7M2Z0xcgS/1UDwl40t56d4B054OoPF9VnLm3tPcPVY+b18NZ5SXuZtGnXf//5dPL1piNr7N74sLiZw6tZGVsG34g/X29P7fQfx2zMPex2ZgY/89PWNU9W13eu2WtDr6ShTgs3N4idkzvp1oCO95I7+h++sqx8lsB2+dNDu6f61/q2WefdTfwGFHp1Gpn0Z96b2yXfL44b+sXWXRemXLRTLIs8HPvC2uoe9v90m64rfq8d2XG17dAjNomnG6VMeP1lSfR3PdfFLP+29u153TLuHNr04FpJs5WFN+fZHgjoMGP3tOPPDnWyWXSy6eKmB+1jJuwSv3x1eJJf1gmPe41vXZ2eeLe49PXV/UNVV7Lz6yWsGhYzcUtORdT7KfNl58oc+GMCo60Tbn4Q9Y/WCGv90TdJfDYg3n7stXEexd/ETUrtZ1l8ebDgqm9hreyK72rsn9hz/5YPnntWJdw+eu76tmPv3bsVJTyW3B+jvHO91qUfL/cf2fpm121D7/H6nL0xNPNkQWSD5vte7x+293TLS0eWrz50/DtRW4tD6yKs5gnP2N3cs7tmiXOX5GlzR4wPqHMqsumPB2I79U+747GIf3uS9apC8bHn1+zbT9qdzVgf2P/F+pPF32kPXe0+2ebcNyLe+x4rbLcsfFh7lePMCbWOChP7d1ock7DyafQY/sSJQ187JURGZcu6Fr2M4g1JsF7+WxP+d1NnC1+f+kN0erhs180zdQ+WBKlPHPr14+F506LuNr1f/1Yn/wVXpr3682qATLonckSf/UMvfnuMp7h6tOujQfe/8+hftPzGpsunE69cf/2nV3zJhB5JNz9uj5vnc2vcoQJvQSd5d8umT36oERBxt9a0c0FWk/q1sfD44URNe/tzduI5w8fvbyVOzt57OPaq7cXI4vVj772v3e7muVW7Cla1yL+xZd/Ivf0bdt5Xa9bB42P65hxJ2P7bIZX4q5N7D1geeGSn2F341a/XfN3WFqbvFNxuXV9+p4HqcXTNusti+mbVSpwwYMqEUVuKa1+qudRWt7YGb0eb6TbrdpeLlnrPFX5b2Iz/cny8de6nt1HDwzNlcecbJfSalDTR+tmnq03SmCsdHtjfmjIq7u6gC+8P309eeOL5+4YHT3iN27Xw2vXr32o3Xl46w7Uo93Tg/ZfBl4/Gvfj+2PC4gfut7/rt6TW4qFaHWztrNAnoZTnojYdgyrj7457nbYm7H+aStPC5T/yJjPORexcci1U1bpVcuCF4/KNeF+zSlx+t6WvZwqLB4TCr1l1+OtL3xJ7jNdt22DdqyZi9EwS5N3Sb9xdccul4c5169L0dTb+Oyd1VFv2ytXLCt2ssEpfWWGNrvbW0dq+BqTZx2Va84fWWnxw0+9GhKQ5Td3fYYXegieuSwoVfP7l2ota0O88P1rx9v/mcK4VXX1x95Dn+7t53X9xSJc060eCXN4dbj07elf7Q8aBv+jzhqKc60YSUWOu+P9fh1xzzpWyd7l3UjvjIiborDRIuSTbUeDT5Rq3C34cIVKFulntzN8e1jiwY1+Ctf7yvdEBS+u0dlycMunl91B33+zVjexf1Ld96bEfIvaPrfvLdc2lm1/26kuPHXzr9fCR3fsjepV2d9337/ZGCXla/3LBeGnpveLuWN+NO7o2d0vl05KBD4eObWLRP7rBsX80TvfPsFm4cZXW/SSeL5+RauUZNXDy69Yqa3aFTSF5Mwk+C6emvJcNGbZ4T6LEi/+zN+cLLuUf9PzzXzn/8+ub5bfsD7fbvmCFdp+q0cO4qp0uDcusODbnZ0n7y65Qrkc89lnTecSOs9/6nDk6r9t+wUmWtmN1k1civeVsdd3X6cHtrr/NfPU0PD9clJDhd9Rh4/5dRtdctz3L+ZsH6+o837/ERn9iaHvlC+/B77auCZ3n3VM63ftojCw/f8YO3z/rS5IkX2qalVMS7uUzcIW4/6nlNG9uOdZ1cE+/79Hp1Jtxmz28poZNeT5R1Pdr+1dtvXHIPME6LlYtsNvRouP7Yn7WzNEdabb2X0W/Pc1f5qwzdBK3fCY+fmkwfca99v/KMQKuSqBneuYGd5t4OdTqzrP58vqb2UffvW2pVJ11v5rpu+KlW86OvA2qs2PxlPc2Ki2Mu8GwlN1z8kj5EqdMfhvx85Gh46LcbEurP0wy8vnhF7ZX3bqwKyr+wtU7Zww+Ff3w4vzQ16saYiRlPm7qH7r83MjBrfYPadUeI6rds5Oyacqt/S4+vZRUTN097Ourp8PO2rYYUuMbwF+/41nH++kfdN19o3v5Yxbjtzg937htY8Pv6uqpOc2z3JJzzc/6xIKT+r3/O8Gn3SJY+vsvAjDe9nP0ONrVtohDUbd9zcMixl8F+mr0Zsnsp42Y8d3n29NWnTxW5J68VLJ524fyG/qr5vT58tdjm6O5joZO3bJa59VWtGtxi1dYatvs/nLPfcX5exPPwQJ/XCbUTbw78RZFbe8GrUXW9fvVoaXEqIeVUUbpH5speN3wXdnpq/R1v/0/HmmRlTfKY33j8qKOjvdK1q0Yl3LxZv1NgM7teMyLaNOm0ZgDP6e7hVby6G1QuIeodUYuW7A+5fPf1Tw1OP389/Hnu5mVvbq64tsPmWMlBJ82WNS73Jma3f97+54kZv11J8dv2LrxJ8kOf9p1j7/V6OPMnmw0w/Y+WvpK1sNjz6kmTrbmbumYtjmu3fkPr4p92HKq4t/799VcX+lzSVkzN3Drx2Oo9oyr2rLcd8GOW68yOTs67etrUf9GsvU83G5d0uV/Kw31DJxb8McVH1Ss6fE/6+Q83hhQ+fCp6f2H/hQc3sjQ7V9QddEDTsubaDSlns456MJYtw30auybYuNQfeLpt7drZcYGrPGeEbrUMy/iQExB1ftYs15++WNXy9di9tTev/aH+ijtPQnlNPga6jLoRFbX6YkZIkf/DwIZBH2YMm3qj0/KoC05XO2nm1+ux4mjwF0e1i6033CwYO+NVma8sd3uC3+IkZciGLn3q9tK2tLXZKnQOnVBnoKzDis0ZxV8e8/tu0+Imscfnt2/z8vyxB6UFmo05Ffeibj593tLh2MPjtTYXfGw9XzVw4OI9M1IKnA/Hn6//zvOpT9/RFelT7sgm7v9pxqjXv4fY9n7r55p2yHbH7o1115fPH3ih+1LnCnLkhJ87obdl1tUkC58TI21st9yxPp9bKtBM22MV2CC7dr2hh0SX+35Za2X2dbuw5w9tG7+PERYtDamxrlONmmN8+zu1/jalafE53y++SW/WbFzTdk261NzW+LfIrx1/vJ/bKH7/H3V7vjxb7+0qXZ3drb+3lwcsrt9vlIPDp64tGxxaOKXhlGKpq9TngduXHW/0PbdkYZ+a7w4P9P6934A5WTX75fQJ7m8RJOs1tuGI3mumJ/e8lderh+NWvsvwk1ldl1/b2+3KxF+71+HfdZ74ZFGrrV9ubvPc5VPrTqPPtYySBrTY0Gaq+OnqFs2dX9VvP3lf2w5H7n3R7uM4n7YDakzqNMnpdce9aXmd/zj7VZfe32xP+UqTM2nEs7fyZiN3pN7pvjp9aSuntKGBHRQNX6Qqr30tmcHcmTxz8IHA6bWEDaZdimqekanYNNmz2dIpgg0/Tz3zc0XCsc67Emd4z012/XAv6cOikon75yRMSC8bPd4l2CL+lWvPqJ0zhdGJ9QdGdvgxdlzJqaGy729cjYk5/ji2heWRuAfxGr8b58X+9Tc2HBzyxZBBi5UZgfeiPw5xsj0fMOrgEumqu9/5nP5qla91+U6J+5A33rOdT3n80s3bXTRC7un/tL2XekHT0Bfjg8K6W8QNVx4bMOzgdduQdzkLgvv8cDRomsOjoSdmXBv1yE07Whxyf2Tsb3NGbJq7O7x0cY8x7f60HJssGRWxvUviw55NMh+8nXTw0e5Lvz+Wf3fzab+9Y559ujnxyaG4bsVTalk9bz3I9fdisajsm3XDfhv3OlLb5VFxyW/zrpT+2Gv+r/FjjlfUO1T+8XJh/qeVCet0YdZbPzS27/hn0ZQm79ed9nw3ZofyFa/E72WuamZ5Vv/WL3yG13lt67Hsj/Mdvn2rWf7hTaDul5uTw8cVHek9/NZHpvbtAY/d7k3649j9vevVd/9oXnin9+AnNybaFV3fGvv86vOiA9c67ZlVELVJcHnDxe5XnqZMKHRuHP7T2E/2p9csa3PmVvsZ+Y7u/rnDh13IW97vz1NXZn+TU0e7/Lx055afv/xp/dlzU8+cq1nnxQVvG8UvcxK9LuVcaXzR4nCnxTtXuC9K/Ji+pINn56UlbRut+H7AmpUxoT8ub/Hry2UPMn9afyz/3boZ2y+tca23Yu2HjI2r9ic7r063qve1y9FBX726PF3D9Oy6YHCEzcJaD8d+eUkdPz9zbZna8+1tRuA/e96ZlvtVX8XMmz2i9snMZruezrpz63LW0guh2UO/j57b0LHPnGuptbY+KtiwRXxk5Q+xgos/bkp6v6N08rSd7eoO3p68re627WdabX4xy/H77qVdNinD0r47ONBjw7t2pzf28Xr17bSKH745sXLt/tPygn3WjZ4dcN984uDsX5g9v9y22yva3Xe3vyhql1oWdvRGi/FH6vtFHAp5Y3148RqXY/fm7zvu9EB1ctTYWydW9fgN+/+hY3GyH2zPquvu3/n7l1Erh/e+V96t1cSIO2tvuB7+aV/b59OFgfOTjz+IucGfyx90/eShlxOK7j64n959RLT9sKBGw9drv+v64YP9egfPbe8m3Z+aczYuf/N2ZarQ65eLya2Xb5+Z0qmOY/2Bmw7+OdexYF3jS9o238i/9Nx1RrxNOMX33IZuOwc4Ljw7ukbfuP175vIKugS5xq8si7DLHln+qP+TlXNlc+Zevtvnwb5LXwaOSu/eduCvxfZzgkekP3b/rajWu6Enx5d3eLfRb+X606NadG3/aN3wwJn+yW/y/xAuvea+eXrixxzHnusLhmhaHuywfoXjT23az9xwpMK3kYWHeJr96y+XbPHTvv3aYUT/llsGjnBpuugAs/HtFYe0SxO2/bxFdGKmzUPrvHFZYzekFD51anjw9dZDIwPq3+93OfdZdvyMzAdTz3epnZfuN/F8LdE38t3j8yMF+e1uHtoQ4J286o+PV3SLfo8NmjHsVu8mtQ+3kR6wcm+7adfzM052876ddXtXY7e4GzM7FE5evDTpi9d9W7+1VH21KHZxl4Hz2i0d8ds+73Ghdu9sXJpJt9z//sWlI5+W3C/z6XyICf26YVxZmxSLSeV+R88FdLl3+31m12jJs7CJAzesuaLKf3+q1/iGGfNFqcXhvc+PeRi0Y0iozv2NdlWrHep58ga9nzcQzHZ/d2xAm7XNS75wXh022UP94MbO7mN2/fzbyAN9w55cHusbNGOXrqzRtai+zRNuzfWxPdut5FnKwoWz2/627uqioe93zy4eFtFnhEufzV/aqr7onvS01pxTwv19vk887v5wk9XHOaca+rfrsvOPIYO6tUh7NX9dnRWrOpyYLF55s+nk1+cG5/jt6FxYwc+Z4BH73dsVY50C27tlhK9fsfJJyxcvpRMbWf1xY8a4Z1GXF0bcO1Caa7sweMr+kt7jeT43C441PzbvvsuvXaOHfdni+vvIryasE9gc//74Sf6pou37knrVF9qGNE0d8tV3F9vpDk6dU0eU/1CxxP7mL+23ndji2qiOT+Z3aS2LzsQqx03h26de2vHpZ/m5r4dvetHiueMK34rtblsldcZeSJP+bn3xBRN9x7u1Juadh/Z9l4yhHkub9QhpvftW6VfXT+59f6akpmTjgkbltaM2BsTb9Pt66ImsNr1ur1iyumfnzp+CWoceXr1Oe+/jgvBJdXs8bJC+tVfni3Xm+/9oOfCp5Khqlvjxg8Vpo8e8qedfMrLiRdiAVQmzrZtfHRDpfUZ98YcZvbdeuj7TwzUpr3X4tDRm7+mff78+sun15Icbd9d45dCsePCWjFn1zsff+DG99p7DuRvH8GeccVuz9VOmc/3VT2D6X3Oh09CkObENNg+4NSm3Y/K9jsuuHPa3Fcwq333o6fJva/lPbbK7czOvwgF+fyaN7FRy+03e0LjF31/YtfULhd3FKbGHI5fds7J+4czrxx6yG2CqFNCqq2vC5D5oMoAXJEvthObTo4m9MnFCcpw4FVWWZZOpXe6+YsX41GSFAo9Rd0bby8pEZQKETZNVDttcLA7VByY28tFCFjEXjYHlGD9YJlcmojfGTklNjpbRM2mRCnoBg6EsffEyBrQzxd3HwMbvJEtibX3FyZLw3B0mFQffVUVAG9y8VlHEKrhfn1bSPq1CiGlw/D+6VUw4Wm9Aawj9WnXtHjOgap8YxF6Y3p4+MZAXI4uNJLcdoBUMZ6hHTIRcGdWcF9uTLUznaB684Qlb34TkqMgEuU9yahAEC1FGhShSeVyMv06XHNwjxvYxvDJa0Z9kRQ6JQmS5DBzg2ZlkFQXx2bx4bdl2b4dNPZmHGWFEHjmEyPOIRqyjdXNZYoqCmu2SK8TKJLTEFZcUjyb+2WoYLKK0cU4jRgqa6zMbFpnKi8CPBFmaLMHoNYKtBS9CroiRpaaCB3lNVirIa1JyBEtUMh5JFPDbL5DaYmRt23AWU5MgPjnAP57QW2dCyF6BUmngEJ6nv69/EM8/ROoxhOfvNSQ0gCeRsn4RbBD2yyfI21v/3jMg0NfXf4gvhOaCwVuAvydxCPCXQEr0w9s/xCtwmCR4JH6EDPeX4tMjQBIcii8+/gESEkoyzN+LvAVLggKpn4e31J8kGxLqERpCSxphXGw0V8K+Sb2C2LcR3p7smyfnFDJEyr3CX29DFG8jV0+TD8N7kH+QhMvOQ8oFCgnUv40MCcU6+0m8BnNOYZ4evoCBEEMqUAWoFP0kleeie+krFhLCuQUN8+Be/TwgV88ArgSjfDiPAA9D8X0loRHegSEh/pJg1sXHJ8DDl8sumKu8b6ih/IhS7iPUK4CWXx/f24BjSDgoODBU4sUV3y80lEvQP0hfmpGS4B7sR3BYgISr1RAJF81bAmUK5SoS5AG5hWLzh+ozDQkJMODUyyNA/xUaZEBHgDSEqxgQGHwbcNxd34Je0p69RozgPiXDoC30FfeT6BMGPHNF9pB6eQAKOISEGKca4ufPkRlgwlMSERQQFoKgLxRXxTCpdCSXj0eIvtQjvAKH+PhzxSaY9pLoyYF6RuhpzgtSBqQYCGTkEC99q/sP0aNiuFdogL4BgyDvIEOCQzyC/PVfhvfg0JAgfdcJ8eNC+PtwVZEawg4P9MKKQic31F0aFIqEE6anHP8QCZCdnlZMwnt4eYEnFCY0OJAr6HCJp0dQUIC/l0coxArRY9/bX49Nb38PqcSYKAK5so0MGRrgp+8ZIV7B/kH6ZvX0CJFw78O8pHrUB3tyjTNqhI8epx7DgvWNAYyPc/b2kBjoPiDAW5+KR5DUw8uoDoZCAd+S+kpDDfgw7lf+QcDM9J3aS9+KQYOhx3mEGPWR4YHBgw08DduTqzQkDpgM0NOyF1efEJ+AwOFcqBBfT0OjeHh7BHHEFeRjVL+AEH1DDfYKcXExdJDgwLBQA/5GBBjiBEuGB/vru62/lx6HAYGGqgVCi47Uk5DU39sz2N/bV59gUJCeYwRJuK40PDgiLDjAwHa9h3sGGHAVZCiygSRJeON3qa++OPDtxWFmONfVfPxH8BiUO4YMHhI4fEgE+6xSx3Mmn//pr3RAZ1I13Uo/Ma9/C14LXqsY3mgeyDtmcpIYbwGJTBifLFfwXMS8TrxWPqGcX6spYt5on57uLt269e4Vzgs3fPD68vrzWiltW8nJf6UtqhR3BRdeR5qb0c9L4tOn6zTnqfRGnYg0GO2TU6cbHFihZ7pxEKIziy4gV4CYIY9IlMclJZs5EHNKffDCDvSQg0ySGq/ImD4tFeSlqWgxLAIvlZgujkmLxuqBIz4wEnGD76j4uPiUiMS4REVEfMp0sTwVHeXJylQoBHFIURgcUpJTFRCRJBQDmZIQMSn6T+oPtVEkgxOkS16jkxOmi6PlLuAUGZ0QkapMkEXQIoBjQGSULKG/iTs4d4OwaQmRSRikGw2Cn+JIlAwhFRSbp6PRanlyEmaempwSQb8gRq/IbqZ1QBeaCOvIGTIGj+7GVcFvGhCd8GIaNImiDy3HwNHJSQrZZIW+BmwEgwfa7ACPJKwv2tqURcQkJ4LgSdxoYGNnSKIHi5mU5IT46AwuAXkPA26MfMCjp2l4riQ9K4Un2DSqSmhqZJIcD2rGeNA6QUIKvVuEoUmrihKUTKjKPDxtc4rYv0nfmKzMwldO3ITkopO6mfqaI5ZtX0OCwRjAm8VwEjYc3qUQER+Dodk2Y13EPj0N8fxTgliaNc3QhJiNIwwDujQNSgnXp2dIajQXDBEJbYdkGRmhMDiybW0eNiiZZG8WFs1PsWF9ZdjBoLPCvCsZ3bzlCuoGnZO48f5j/CcmWR4BM6jI6ImU0linxHhFfBzbQWh/NOFAn81xKGOAEuC5A3O+YEzHlCuYd79uVXc/Wg0vpVyRnOgNreJCQ8TGxynpzVgRxtzRPLBJ5pEpKQkZJLgZ+6FkZYQeE+LSu7Ed3CgcIClJYdzDqTNablPiNQWTlDKCuegEPGARwTpEKFPjq2DQ0fJehqCAWGj8iAR2ZYH40jyMnZHPuVTREuDKcT9CBEZs8rM5KmFORnWNkSmoKbUItBtuxKZMPcTmIxbln0YJKVLkRhzUEDsSKI7cRUNYBEbA0SAFeQTFG172pkxSGHEJ8wD/4fG5ig7zL/QLc4SY055LVbTnUpn2elVDe72qor3/xPBf/ej9lwNoWnyqQhmZwPb1/7ExXE8lKZFoMZ1cvUVuVzGmjyq8jXo758WSkVGfr8IXeLPRUFRJJPDp6QODkL+30fhUhfz6Pys//i8SHelgYE4hLlVRyN9QWUySPAJ6d6pBnGLbyOBo3qUom9bH43LvYRyPzZtIYCxfYpPvadKfqKT2P0fFny1cEno3En26mYg+/6Wv/730ZT6MGA2dpj7/U4PBf5nw/w3++x8SEP5iEl4N+VeawZIeAPHxypWEhPg4WRJUTDEe7eaai99Grv+hftrdqPd1N+59n8/6/ufWAXpVZv9sD4pKAEe8fJZygP9fzL0J36puKqznX0bpsZ4sH6s0M9bzMdNJ9P/4JP9/aj4eROaJQ4D2q+gvxms01a5b/nf8/cfjrxyLRmzumg/AZj5VjsIYBk2my1KNKNjgyFKu3sF48DU4/le++3+evqqgom6fR0XdK1FR9yqoqEclKupRmYr+K+39H5b22CVbbp3272fgtP/49JwWKpV+Xh+pakm0MoEr5bJUcMIHbXTz/Q1uJdAYr8pUvSRHrm8jjmakHsR5DPnblVMv6swGJGTNmoIndMWRNXsRjD+3nGm+YMvSdRB1ZhVvKGlDgSPwOqe45NQMI7oOS03wYl1ZWsWAEFtB+1MvfTAf4gZOvbF06XER8ujxMpptb7Z06XEhxA2cXDGQPCEiKiMlUi6PQHPrGNKVDSlP8CQePuD+Hxl/xysUKRFyWbQSWzkiLT6ZigeVvaARo1PjUyoTRiVJPiWlPxuZE7RAqIiJ5xZ1q2SfVfFZSnH6tWGOpbIOn8dSTUkSKAVpNcE/pr959eTKFIzBks3/qUVpo8r9R7f5SN3YDmjUDWKVCQmcM+9/7U/AE5rZV23yN/ahbPQ2rv4TPyHPi2+cnoAYuTIuj9PflKfmf7Q8//397/7xiUE0Y/p9+Df08ZhnSl+PzOirMd80fLFJeD7vqRm9rvpfRW/m/dW8PpX7e6lJ+XU6J76x3bp/v32emOW38f+p/ing/fp/tLz/af6r0zXmve5iaE+drpHZd2uz7zYm35XT62wWvobJN9q/5L5p+a1Nvv+nfzqdrVn5HP+yPn+fXoe/wYedWX41zb5rmX3bmH0L/yb9dmb4dSDfhv5a/9+qn4DX0CQ9Aa+BWfpt/zJ9vC/JNHxtk/BCnqWJ///5/mtvVr5OZvhv/2/h77+//+3yAd+E/7gDx/zf3N46XSsz+nT+G/5Q1yx8PbPvOv+ovjpdx/+j+BHwvjAbL8Qm3xa85ib9lw/jobG/gNfSjH85maXX1Cy9Zmb8oIUZvkQm3848niQ42FviExIxWDISdbVZfeiIIR5SCc9MY7K6sKEjg0zCksvZzMPiwQpDqnqdVrNwqFnPo3NqU59grxB/X7/QCJ/AYKlHKC8yNVqOF2lExCanJkYqTMOGhnp4DWZLZdiMMgnDHkMIDAklReJWBqoIQ5TY/YN4JtPv6sNFDOtl4kmPE2EC+gl51f4Y0bAukFZNKhG+ksCIgEB6BIFX9TpCVTHJsSSj5Q0er6pQwZKhYZKQ0IiwYH9eZR078zjk6EdYMClKhLdHqCQi1B9wWY02oXncUMmIUEoPxutvVYYiLWm8B2sSypBz1Xl5Y40A/+wqR1V+iPsq3U2wzWqQVg5IkKtfGTLzx6NhePzEO8wLAxkvm1UVcphkiHdgMM9kwa3qcMHk7IrpsptpyCEhEdCewWxnNlWwqCYkQbWpCgfPrN29A0O4LuYtwaNV2PzSQG+IV512Y3XxyeEmnvlKfHWh/b15Jov71YWjtTXdHKgubGhQCM9Ul7JSSO/gwKAgiTfXOULoHeO86hUqq8CX1D/U35d2FJbHVakpXCkePWmmLwOvikX9auMES7wk/sPMInFbCKaxIHUI7hGC5TKcGDCrB/eOp8eGDI7wHBmEp4C4BX55SoIyaSK7tlxlPGmI75BAnsmGQHXhaBOab6eZhMYDREgRhv08Y1885oedLjTQKzAgwn+IN3toi1fd2nHl2Gxz84zXOyuHCpF4AbMMJYyAnOnSZ1LV6vZfxA8JC0I2glWqbvW4qjrq4w/zDwzwqCJ3/bK7SVz/IB//EdxYGp8SGz+5qoGUhgqVSIPI4UcaDk8Mo45BFSFpC9NgldvXP8gf2HlAgL+vZAiyRCM54y90A3h/lUaoH1BtaNVpGGnemCUBOIvwHww9mrKf+BRAVkT8RFkV3MffQEU8I+0OkzABIUOMRvkEeVKEkaZG1YO+SRRzicHIkwwsVadYaaTBaNxQZxalqpHPKDgWoOoY5mKIPlJVBat6AMQoFM8YvDKG0Z+eL5YrIquKO8Sbh5cvVCrGEGh4PLAoIQnHJEFb44atrJqQgWHBQDAB/iGhRuHpbghqJZn1LX28oGAJUrZpvJRUGZL4X8bDvhzsMcRXEoHnwA1RsSsDzuJkwP2T/j6ux4iq40ZOrjpuQKCvXjTQR8Rj+Ya7JirFCwnwBwmKnKKEAUTqwZVXjrcam+gaVRcXGinCw9s72DgeXluPO0d/F4cQVFURCUFVih0sCQkLoOFTZXI0MVAphHlFqlGcqhQxKBDGCsJLMBYqMVXmHnpEe3v4Iq/W4zgmMo5VK6nUlwOlMCSHsn0a5erqw4RCs4dwISHZv0qP4pFHsVYpFKJWEoJSgEeAlEVXZEJi5cqwAjwvhpXYTULgWBwC3ReHGB63L2sSIgi6rj8RbAjmTDfeTUMGhbLH2XkpKTBEUV7AqxwGT8/DqBOMxhlAqkRtEBh1UhO5/choc4mSxtKz4CrTpL4kaWg2lomSpM0ESRKcY6SVPEbgSOhtlFmVvL76eGz+lWNVWZTgQDQxwWLWSK/AJJQJvVdL4CEeLHEhlfOqUNirOjSZD1ShCmgamp6jx4oZVCRMQ/jTZpUE8wxqQFWHkBhCyCqFkEpC/QK92VKZKiKZhqXsHtpHr1VStT+Z+fGq8TOZ/bFnCqsKSkZDI3Us0zAjQ5Aps8fz5Rly5MYxkbJEs67GhgsK9vfx8OLCpaTGx0ZGVxUuxBuxTUPJzbCNp/CBPwX4e7IjpCIxERlUQnxUFWMkTp0hmBRoGabO4J9oiitKCFyP+BuxwiSwuWRj5ElQ9rfCA41gLIRVrW1bRSSTXvE5IwCNZiCcqlSE/ypC1ZU1ppCq9YiriDQswMOkzKiPZRKMBKjkGiSRcvxVlliFqBVEzN2QJRUSgl1RqRQmJMwT5zKekmDs0RgSLQ3BHCZKllrFGFcpCu2eleJV7qUkpoF3kBhV8w+TkEGmIVMqhWSnFkRow6DsdILIa5VSDZJGBAb7o+UPkmpKYkRyanxcfFKVIbky0G7FReCKUrlvcfHIbNWLbRmMQqat0ZXHPwkXFk1s+Ptw01aMRqMkwPQ6PraqWas+Ll1hCDFEoosLprNyarYkIixEEkyGl9TImHilPILTuDMrFxsaGbT/EF9SfbbR2HjIr+OT4ggKqmg/o/gwClYdHbvFX8b2l4b4cxHiE+XxVYeR+IcMM4SSxcvTqgoXGjickjcbUpGcTonbHKNDpRGeYcTcD0uhkxIjopS4mFJNaBSnAEW+wICCjOKgcAX4iQP+k1JNTANRQfiqaYkNFRZiHExp2rJoTIQwWf8hFM3gwDPTk6wcQU8IegqoHCQ4AFowVOIbGDySZ6y7WHVQ1jySQXexcrCQ4UBLXn4SyNagvWjOX2jIkAB2xSmCWIcy02PkdXXp1r1Hz169Xd08PL0gKm8Mb0wSb8xkSCvUK0gsT8YWEyenyJLEsZEgRgEXC6Fu5F4+MfDCJFywRENjyeJWMZ25/31axdSgdyHiL7SVXMwLwz81uOUpspFiYcHjrU78pEPYl/RJ1yf5ky4R4D7A0JRPOjZsHzFdHBcnJEfGcAUZn5qamJjIiwS88zxSlQN58kRo28hUWVIkGo+LkCeiaJgSGSfjpStiaTlCoNkhteSoCVBoeGkV01E8PjIpJkHGfqA5t8ikaO4TJqyyVBn3XYPXSt62VUy7PmJFIhKQWC6LS8QbC1vJu0DdIlNSZJGpckRElEwcE5kIWQO+uEDxcnFSskIcmSTGIUacpEwE/o6G22C0isL0leJWrfBvf/iDpgbZvJRJ7FKWLEYsj58iQ0szsQT1CcrEJPG4VvI2UGyxgtiaI1/E7p1cmSjG3aJ/Nx2YPvxn0omcbJpOUrJYLzhxkVNwnRX6HPfdpprEDBHpSnsrwJ8kwEdMrpoElBqXMTI1enw8rqorU0kf+auwRDO/LWkmKEKqjARqx+N5hvlyjQ4iF9BVcjSxtzgR4iQnQWBKRLRwqcnpcjGIS0hJMcS6YqosQQZ0Sgw7Et8oWSymznJ/s5RJGUmN5f1bKTuK0dRgBnkDsT0Sb80kH7hqh5qz5IPQEHmDyibEAM3CB9JrfBLM+qDGwJ5iiH9sqkxGXrAgld1rEPywBQIpJxUGwQhERQRLx3IOhxBfDNVCFMQoiR1GrkRiUg2qhIudlSIe43CGEyFwKkjyaTLEYmRCfAymhnaVaE+i5ilJfIpYWkdaAPIeE5+KOEEeg+l+Xh/j8dh6wZQ+Bq1U9qGhoSxxyoTIVNLavOZsIIwSES/HxW7ZZFlMW9IiFNPtEAefE4wNQ/Ah7zyelyJu3l/ctm1aMtS4fbuu7Xih0pAQ3kwgRx6peRe0uYm4ZSkBXNiqRbSKIT7IislLeiouX+BbrCJVmYRjCg8zNc9BkRgfMxmyjhf3E8NbpwHRJJKSdCF9kogNikkor/4jMTEyhYZG4o1FnXkkEzHdpQLmJiY/nhcm1kffVgnKzq26uiUoxXIeaSkIC6OdiXsNL5ZM+9SARFop+/BCkxWRCXL47JyAitG8aWJxh05iXmfKCWAaH5+GVexM8MvrTOha3wacvGxU/spexBFQgKtktHoTY5AceV0UiSkA0YqEziPIz5RO9PgxcTXPiKMp7luZhIImkQhg/kgdO0fzuqRFpnahXzzsgeTPFB7UUs4DKpITPgSTGJjER5MtWVJfEHySY2PlMoiDLJSXssdauBhgH0CDvdZCBgDdHsEzgi1Aoiw1TmZMpabUSAmX7amyiCSecbQI2gbmOIwgHaSSK7IH3l+yDIp32uWx72wttxG6sLKBJfs8A26otdvT6B7m8+CGTzf2G/0vs259jdyugxvqZfQ3upv4r34PILzQKH9LozIJjeI/AbfGbP6c21O2nCF63Tsej8N5NO6d6HGRinMI0o+NeYWJS1VtYRwd5BEZzHWNXFgkGrngiGDa2sQ1NTmlUkEMzUzZFkn9bxzZFtXTdYpBXYDylmijboXsQBpJDk3FpiYnilulELkwpQbxGQJpiVEiQ6PF6Eh6oTIJ2Ywpq6RMKpobD5ubomt8pDwiCdJqa8Cb3IzZRlSVbARhaCGGwWJIWEBADc6BFyyLjkcrG8iaxGRLmgyIUCNEbgzKZnRYxpEOamXmR0Z2gw8IcWJy+Lo/IEGeGt0HnFLAqSV7XlqODso+RNYTi9m8UaCCTMWeKPXAM3q8MmminMoV8Em4L8kHJS4MV4MXSmSjVvKOZgU3iAKQEYlER1GSuakogJOcRGhVNhZmiYUwFIYNidklpsQDsSWSFgI5nycfj4yzj9g/yCsiWIqLa0YOOOlCB5DHKeeDkQq4X2LnxBQSXc6LVSRP5EmD/KX4pzMaUZRzUmUNXmwqsE+5uF9/sUvXbj3wznc6srVrwQoNdHu5RbuO4ra4XSzubzL2tRNPmwbf6APDXnJiIvrjs524dWu9B0UIenXr2ZNGMffAr9TJOOK0M4mqiIxD766TY+FnHJX1GB+TSt7bwY9XddE76nOjpyYhlotLTwiuDw+cFEdQkLWSMDQ8SJ4YhDRGSnJCAnmJxokLfYUIaRHxyWnkQ447Q/jx399/f//9/ff3399/f//9/ff3/6fzHHQtmfuVNDa4P/+Nz9OxP6rbT59/9SvwsBHeAigG+B3gHYCFp43QDqABgBigA0AvAA+AAIDhAFEAiQCTAVQACwFWA2wC2AlwBOAngOry3eVoLfy/iceU/8v5/1/9NbIW2v+/Un93KCuAO4DYw1rYFWAcwCJ8esIToBzA3gv8vcENIAVgA0AOAG8wxAEYB5ATUEWdv7MRbtgGsNtGmLnVRui+00aYsw/o/jB8H4X3E+CXYyMcNwTKEAhpA3QdCvmGwfcweAIEDftrXKoKbIR4inU9PEVG/Xgn637eyB279m34bgTPP+BZy3jt5rKNsC48G8DTWn/eh8drepmm43aZpoNpWAH4w3dDeEbCsyYbHuMlXqZrPfMuG9aG8BTt4ss03x8vG/JF/8Pw7WTmbotrUfBdH55l8LRl3XEf7A18O8JTVAh8hHXH/J3gG437D4RnA9Yd/YcV0nImFRrKiflMg+9m8Py6kNYbcVYbeQd8t4TnVTYe/rDeZYU0X6srhnztAepeoe4djNzrALheoeUfcsVQfsxnBHzXg2cCPG1Yd/xWXKHlNnZ3AFgA32J4bjdyx3T3s+mfN0of41+7QvFfDs/arDvWQ3eF4r/RVQOesdxtrtLwnlcN4THcUNY9wcgdv6ey7iuM3JE+tsB3K3hevErzwR+2q/YqbV+razZCe9a9KZb1Gg3X9ZqhPNgeA65Reht1zUC3XwBMuEbzzb5myBfxsgy+W8PzKOuPv+YARfCNzw/XKJ7wh/Rhf91GiOl1vU7bAX/Y3t7XKZ5l8HRg3Z0BplyndLDkOqUfpBOs54brNP3c6zR97BdYjqLrtF4vrxvq1Qb/3KB4aHrDgIe2AJ1v0HJ43jC0L65JBMA35j/pBqUv/LUHmM9+f3vDQG8dkG5vUPxfv2HAf0ekAzad+kWGdDph/YsonYcWGegc7zdLYMNlF9H0sV54ZG9JEcXv9iKKf3TvCnCMjX+1iOIH3XH990ERbRebm7Q98dcNcXqTug82cu8OEHeT4ifrpqHdca1q2U2a/rabhv6La9uHbtJ6Ft401AuV6UrZdIzdeyOvuUXzc75loBNX5Be3aPrDbxn4Bq5TJ7HhmFsGfPZBvLPfx28Z0sc19Ou3WH51y9Af+yG/Yt3tbtsIrVh3XF+ve5u2e2t4cmvieLlY+9s0X8ltA50PxHa6TelTedtAn+7IH1j37UbuHgCnb9P21d42tK8n/rlD3Z3vGNy9sKx3aDrhdwzpeCNfYsOvMgovQXq7Q/tRwR1DP/IBKL5D6c32rgE/vtj37lL8usGT02fwwzzu0vaKvGugB3+A6XcpnlfeNfSjQTiksuFO3TXQyWCkv7uUn7+6a8BnAMC7u7Q8Te8Z3KVY/3s0vNc9w3iHt9sMgm/kT+PvGdoxECD1Hq2P+p5hXENl32Ws+3Yj96EAB+7Rdrx8z9COwdgv7lE8vL1nwAPugQjuU3w63zfwq1Ckufs0HeNxMAzHETb85PuG9IcBzL1Py2M8jgxHfnWf5Vf3De07AvkVm867+wY6H4n0+YAd1x4Y+Mwo7DOs+1Aj99EAYx/Q+JMfGOhhDNIn6/69kXs4wJEHFA+XHxjwMBbJk3V/ZeQeAfCJda//0OA+DseAh5Qe+j000EMktv1Diseohwa8RSFeHtLyG7vj3si8h1R++PGhAW+obLj3IaX78w8N/Ac33248pPV68ZDSJ/I9VI/Rse6NHhnc0aBZm0c0nYGPaPnRfTzS2yNK/3GPDOMCnnWd/IiWf+EjQzknYD98RNPf84jKLfibCPATm46xewLAo0cUP58eGdo9EWWOx5TOXR4b+B6ez/B7TPtF3GNDf08GmPmYpvP1Y0M6KcgH2PDG7pMALrHp/2aUPl4ILiim302KDe2FyhAdimn9+xXTfUGiG4C8rJjiYXixAQ+41xNZTMuXUWxoF1ybzy6m+X4LzzqsO+pEHCqm7Xu72FAe1M96WUz7V60nhn6UgbLLE+re28h9CvK4JxQPUU8M5Z+KdWPDa4zCTwNY84T2uxNPDP0aLRlefULb68UTQ7vPQPw8pfy27VMD/mcir39Kw4c/NYTPxDZ7Sssz/6mhPLMw36dUHsh9aujXs7F/PaX8kP/MwJ9VKNs9o/l1e2bAZxaOSc9o/BHPDHw4G2n9Gc139jNDvnNQTnhGy7nzmaGccwFynlH8P35mwP88lM/YctTTGvgJ3jsm1tJ8+2gN+c5H+tTScSpea8hXjW3Ghl+qNfDhBYgHLaWHI0bpawDytbT8j7UGfrIQ4HfWvUaJwf1LlJVLaL5uJYZ8eZZCoT2AGKArgDvAPIBVAHxWVuSz4yuf5Rt8lk75LN7xuZJ9bmafh9jnBfZ5n32Wc3M7Pn2eYp9F7PMJ+3zOPgdY0Kcf+xzGPsezz9fss6YlfTqxzw7ssx/7HMQ+h7NPGfucyj5HCegzjn2msc9M9rmBffa3oXOyHpcFpE2FbjbCPz7pksfPEhDZaNVWARmLHRcICO6bfEHndvbsnIebqwbVExLdhQ2WdI5Uh53jLPtFQPq8NzzrsuNzPXae+UmnS465IBDq4Il5lcNz31nBf3SdYkwdPenxoqCOqQCzAZYAfAOwByAXoBDgEcBLAItCKCtAC4BuAJ4AwQBRAKkAswGWAHwDsAcgF6AQ4BHASwCLKxAfoAVANwBPgGCAKIBUgNkASwC+AdgDkAtQCPAI4CWAxVWID9ACoBuAJ0AwQBRAKsBsgCUA3wDsAcgFKAR4BPASwOIaxAdoAdANwBMgGCAKIBVgNsASgG8A9gDkAhQCPAJ4CWBxHeIDtADoBuAJEAwQBZAKMBtgCcA3AHsAcgEKAR4BvASwuAHxAVoAdAPwBAgGiAJIBZgNsATgG4A9ALkAhQCPAF4CWBRBfIAWAN0APAGCAaIAUgFmAywp+tfoJNXdsEaJY1q60TfS4DSjb6T7LKNvpO+5Rt9I9wuMvrE/LXGn+jrcGssKo28MuM7oG8fOr4y+sX99Z5Qe9rNdRt/YTw8afdeqon6W7Jx92/Wq8VPgaRjLuWXlq6ybgGfQT7rPugmN3EpZNzsjt7esm72Rm4UX5fcORm42rJuTkZs96+Zs5NaEdeto5Naadeth5CZOtRG6pwPuAHnN+HQ9aEMauE2m+GnGrhGROVkGdavHtslf/VzX0rAD11KZQQJPXFcfzD6HrjXMWar6hbLxM1l8Csz8o4g/v1r/JOJvQfxtqijvTJq+YF418RmafrX+i2j61fqvJf6W1fr/QPwF1frvIf5W1fofJf7W1frnEX+bav1/If7Cav1vEH/bav0fEP8a1fqXUPzyq2ufNxS/xN+KBZPfOoLfauPXIP6W1fo7EH9Btf5Nib9Vtf5tib91teXrTvxtqo0/gPgLq/UfTPxtq/UfTvxrVOsvI/41q/VPIf52xN+aBePfFOJfq9r4GuJfu1r/tcRfVK3/NuJvXy3+DhP/OtXGzyX+dav1/4X416vWv4j4O1Rb/2fEvz5/UTXxXxD/BtWmX0H8G1brL1qP/o7V1r8J8W9UbfxWxL8xKV9V8bsS/ybVxu9P/J34u6rxDyT+TauNP4r4N6vWfyLx/4L4c/qxxr804i+uNv5M4t+8Wv8FxL9Fte23ivi3rDb+N8Tfudry7SL+rfhbqsHvaeLfutr0LxL/NtX63yH+bav1f0b821Xr/5r4t6/Wn78B/TtUS7+1iH/HauM7Ef9O1fq3I/6dq6XfnsS/S7X4HUj8u1brP4T4u/BXVdO+w4l/t2rrF0f8u1frP43496g2/2zi37Pa+i8m/r2q53/Evzd/QzX+PxJ/12rjHyX+btXi9zzx71Nt/FvEv2/19EX8+1Xr/5L496/W/xPxH1Bt+ew2ov/AauM3Jv7u1fq3Jv4e1abvQvw9q/XvR/y9qk3fl/h7V+sfTPwl1fpHE3+fav3Tib9vteWbQ/z9qvVfSvz9+fOq8d9M/AdV63+c+A+uNv2fiX9Atf43ib+02vQfE/8h1fLfl8Q/sHr57Rv0D6o2vh3xH1qtvyPxD662fC2If0i1+Xcm/qHVtp8r8Q+r1l9C/IdVTz/Ef3i1/mOJ/4hqyz+R+I+s1n8y8R9Vbfpzif/oauu/nPiPqdb/G+IfXm3624n/2GrjHyP+EdWW/2fiP65a/yLiH1lt+lriH1Vt/JfEP7ra+J+If0z1/Otb9JdV6+9I/GOrl8+If1y18bsQ//HVjj/9iX98tfEDiP+Eav1HEv+J1frHEf+Eav1TiX9itf7TiX9Stf7ziX9yte2zlvinVBt/C/GfVG38PcQ/tdr4ucRfXq3/ReKvqNa/iPgrq/V/QvzTqi3fC+KfXq0/fxP6T66e/oh/RrXxGxD/KdXGd95E11Eyq1mLwbWwcenWwnKAoMmV9ayOlBvWy6r6VXX+rpQ9V+ditOb1inXrzjOcq3sfRd16Grm5RdP8ehu5fWDjuhq58eFt29c2wisA9wFaCLj6WPAEa6j7IHj+f+xd+X8UVba/VV3prqQashBIIAlpSLMFCAlrFDQoIDqiIiIiMsZOd3XSpjvddHcCEVkdXBAVZmRU1AguKKLjMuM644jg8vno+PQDysMFRnBX5Lk9Gbc375xza6/O570/gB/SqXO+595z7rnnbtXVp06T9HtvIlum8Z+C/1foA3X2jBknB0bOPvfCUYGJdQ114wPj6+sb66fUTwyMnKdGAmeGspw/duLkUSekT0ifkD4hfUL6hPQJ6f+HdKWxA+DL7ep3JHlzmeXuEuGP9dfxwDeSfBFz4rcMNMoDfknWiR9eqOPTfV55aJUT/8/rdDwV9MpTPU48dZOOPzrCK//Z68Rn/MkoXwc7JcGJP/KKjl9WD/pd9b/2uo5vnOCVf+nrxOd9Y+Cne+XXXfVfna+/hQyfvu9x2ffTMOMtZWd75Utd+t9qMsqf65VH+Zz4H1t0HJ+6Hyg68dtX6fijF3mNHZWJJ6829C/2yq/5nfjgB3T8zTav/BuXfWt26ngg7pW9ihM/+686Xg+71OuLnPgd7+v4rmu88u9d9pceNtq/3iuvd9W/9Wsd/3qzV17uwn8RRb3/t3nlg+1OPJPV8bl9fPIbrvj9V6eOB/r65AUu/+VfqeOrS3xyxmX/42t0nPX3yX91xc+bt+n4rhqf/PtSE59pjD8cY7cVw0kOsy4uBCKitnS2ssvhKpVOtlJ2kSuBwEyWPQTTWw209zTHjHH6CfReN/xpyRviyVZMGsFeABZ/P0eI3q+KmQ3TyTjhajQzntJ97Ps/hCIt/JZ6nj7of9PEWBOEUyLcnFF5FuW42qXGWcxkJkKYDiSbjqkZ9ge7bLSzI8ye47xYRyzbnM6kmls6o1H2lZWpLuHMqj4mE9N+pWIpNR7rUKFXTSCixlVot4GtsGAZa6EHOYAZLDoizeG2ULo5m2wOJyJc2WEb3KEuxUI2iXl9SQKzwTR3heLNmAXDRI86UJ4cJ97NxTDbGosVkgh4uQvTcOg5Eru4JYC0q93s7UKrHZms3cohRYSm0moqlFb1xgPM1pdork5D5aA9o+VvY8c4APIZlRxO3tjXj5sb7iIvYQ3hUoMVikSI9Z3JsqhqLTO4rVrZeeXEioLbM232zjpug5zdddMgq9m6zRMqNW4Ht+PxSmsdtm69fbAZeZ3xbMzm1kwoqrJR1b1LsOcDBLbimyCWxuKRcCgdwX7IsIIhOuIAqocaANDNLZTninWbXJcFeTXWEqy5Jpco+2YYsSMqD4RFw7VA5mT7CKOQuxUbR5qt0PkqjOVu9uNIly4OYKYr0kb9gRoO2ThuJYtrrbgVuWQ0j9kIeYg1jTEcjuSXnAy3qeF2vYcxgdLvxhpiLo811OXC2PJxxAaXx5PJ9s4U75Cu8VxBKNPiaOQxA3EA0Ql6/c4i701waebA3ImGj1scEXHcgJxIzyQTQV/Mn2zSbg//PNmiwq591xSzoB1Z12hOeOhdnrp6chNxjVmXvpoT9M3ZD/WMHYORhzAWZOMqOJFWOQmhgCETnaSm0x1JhonyMhZ6uxXPhlrZQasAMqprdQmYwiihJFtYq8sYrDuAFY6r0OtUkD2LIRZKWUVKR3PLdEY41c0uRh5e7ICLrng0kWUyBBldXDiGy4Py2fFkSyieOSOZnptORi7obLkgm2bvajjEUEQTYLPrTN4C6IfXNRpXxVSW1Y3jJM8f/IZGwRSbCmXDbfyup7GvvQ0Wy28FLpJon4GpzHADoZk0U42GoNt1xc9qSNQ0BqydRT5u9OTCoAmxjlZ2q8eoci5/cxK+lJ02AxobmgvOJu50yeCiPZRViG9OBX23vQ9m0e2wwOsvmEl1tsRhqoUpWV0Ww9f4RJNwqYFQF6sflEtY94lNVKnIJUrZ7vblhMLxJCxVoXic9lO94GxaTgxjjvZOhVW5YLRnS28ILrFs0ODe0GUIb7HAme4OWs2jsVbjUXZ+OImDKzcPMCUTMGJDrbD8woKmptUI+9UC8qThOOzWlzm4LZ2ZbvaSk4uN6FPuYOLrAIwfsvAjUCUcTPZ6TDnMQRa3ePcnyYnxgMcAOyvPieFibPwSh5+hroGFLFDjEtQSupv5ddmFFiHMcobrh1tK/zkhP4BNhBbKlla2ZeIu6THGcSwL0XCGJSKiOWsfaxzP3oUe2mkJeO1lTbnNwfPabljfNw81C4TVaC/m4OktD2Jsv8Uc/gYgp/wAQT/NveXF71ws5mTTkc4Ue0KwxpAte3imLQFnATiI2ATMiOX4XgeOSdKGe+w8nk3ttxYulGUXWQIgwTPM8fd/qEvZQ71g/Jr5vblhLVcqu6QXXGs0PYUg6OfYR2Abdo9ltOgvW2oOZTJqAmey4MAcaDiZSOER571cIOY8Y6Mt3YP7uFhHNInTHFttASIx2quE0t3ctbD9SbIRVTnqNOGl1TnLJyh3HnsokBPt7MjEWjsAHzIkR+U4q/EUnMZvq/gpPgy99iQzS8AUpR8d1Ew4hAqniznhTAhmnNgVIPBBbgFcl3mYfijoNwVehcPJYRDH9ybgKUQ7p+Z5aLHPQsAN8Tj7ll1sYZHn1yMD11KeajAo2fXTVPidlMsodnZeTltxZr7XAdG+gh1ycMmABtkS65Tzmi9HL7v5mI+Qb0QC+S6QpsRFBS4+X6BExT55kYrbHEyqQvDbmbz8SX7rSpTNsMK+zgmFqlznYuNGnFJHwhGUDSt0wrz6EPDbssmOJZ0hPq/fa9zbOR9icJBl1eFrXDOm6G7GeMxk2T1uONkJbozS6y3Z925YH/3nlrsg3OLgACKaNQ50CUToVYKRJP8G2bjHtAyCZIklesMhOGTQYOFWajvkoy4RagndJ7EGJ8eoDFVCAj29COD7mNQoO9gLrLe2SnKZxzfjTxh3wjZAR/Tgd+JmknOcZPfn21jU1U0FNp66LBVLq2xpLm6EPW9nh+HEFFPZpL4a15jNX7JxdMP7FFq5CT1dJz76od+iW1zCWKdHE9PTq1OVIyQnV6sg4wK0Sf+4C9BfzzU9z4lQv+xys+lgyu71OQA8+y1pblG7kzDUimUXqscKnuKzfr3VxkJK09Havq5iuFQc0J2Ehxbo2NOKNJpP1rzTaoudlmqVs0eK7eJ8YNK34179PufSJTBMy4yc1EbOZfZHk0mT8GsDDdpMss3CgwxuDBYU3PpbYLwN1oGp7DfZxCi7aC6xr00xSkRreY/jqRUGxLVQCuS4k0umbnFy6bTN8yO/WGFTkUqrdG+IHbPzcexVVjJ7Qt1okkXsPJ5SetpgtxMoqy6hUrWBLg3F27XW83Sw7CMTRCNh80pJlNOU05VVBSyJx23I2QGbQyl5cISNGWKzLhpTQZOx9F+TC9WwIzkw1jTU7kf28lB3JzRjzlU2pMaBwFqdcvHQg+/VuJ2l9U1tkLmyE4eTcA73j2a9pC1+YQyzp5+O8BMwyrGCsQ4QmReMzaEkkWLqOBuf7iSQh+iNPW+YKBrLX9bL5HprW7TdM8UrbgRgBFY3MDOrdzzW0c6ONdrUYObj355kY2mZoCummoNSy+k+y8qCiS3Zzd60sDoTKb5swM41wwqmsVyJl9eZbD0988RTrK2g/Pis5xRX5Fmbx646NWfc2mR+MGV4zPN39QabDLY+Ud14GnMloH50tr1lekpi9t2ZdiCaDlESZj4hPXGWfbRZJoum81muVOXnzHcGtdoay2TpdjHE3n29wWzsJRYf8f4+fbHB4q9zTifjcVh+Gi6189kzJsM4dLF9IWbPAX96i+3FA2xu2PQoj5IbVHub2Lz2HMHUDBP1EtProWyb49usdbDoforZB4x03HouC/5tVjGsF6NFxNMtWdpPweKhk+hn9h8eA8UtcIWkkzx0dxq0lpdcz+nBvw3bAavtxR5HKFPibfagybbn575CYrlydOtJBfjXaINhN/il7IplPiLYr/k2layhyCVJy/OGYhdfH5NvuSD+MwdB/6KuA9bRNwp4wuVEJoM7P/aVRmNGaXxxN2zcMC46Ydg2KRYogTF1o5VDk+1BKycdgllluJ9pCZv5ew1bQuF21mFhql24xnZAuL+icY1Ez6v6MGsS6Kv7mjj9xBMJ3GhY6jhW6LKflRdZeFp0bim2JJpe0I/Zk0qn+psM9qRGtIRDGR4dD/c3niWgb8j7fyPJ+DzB5fgL/n8AawJciJWwEHr2Y1Ymz48QEJLPg/c5BNlTgz3g83zPmWlkej234FeNeVIMpiEpz/MchJac5/kvEJF94kqkpmIeFbEIxOSNmPLBsxu4Up7YgpxNSVNNnuSVtiPZTTWLKixr3jrMYuBbJvJd7M3eOvnoKGD0ETCLjFjD5OEA+UroxyFijSR/AbX6+mmkLEdAl69UI/0yRrGvv0YWyXhbwzdAI0tl/FWwr0wjy2XcEvvKNbJSXoE1D9TIgPwiVlWhkUF5GKKVGjlSxtxJviqNHCPvQSOrBby3I9bUy+UoPEQ4QOREGacCX43WokZ5Hto8QiOnyfchOUq4gsjp8kGseaxwKpEz5W1YVZ0wh8gz5ElIjhMOUc2z5eEQiL4JwjEiz5R3YFXThA0kPEcOYQNnCT1EzpfbkDxDIxfKSSRna+RiGbMx+M7UyMvkBqzqLGEYkRF5cR2QZ2s2t8kbYA31nSN8T3rjzCuthKt8fCDVK/HPm5CBvV0wAH3zmA990w+62O97SqnD33s+zb3FlDuA63uGO0tStqD4c1yRDBXdLmJ1GCV+bCZW2ecW/lt46WZg+CWPhTsC9ungorxX0X/+aitUDQWGAaOvrx0+wyMZK/K3KzthA+WPX6eZ8jOWSnLlkrICXOJPoTSYUoiHEf8SjvmhLrrCHDYFa65EZ12C9/RB95yCNcpmGIjKdi2Eleuh/5X79VofAjnlAa2BylcQ7cqOWbxW5cB4oB4sy6PwVSITgNo5hahS5UUs99A8osqVA7CBVh5eRlSlMhGxP/FyAeUcMEd5/H6igsp18F95Yj9RI5W1aMuT7xM1RpkNrlee4rZMV/DhYeVpTs1UXkTsWcVLocXEp8FFBWujGCWvSzwZSXnBWvkx1FUoFHv5aJ2FhhQJP0t8tFLrioVZ2mjdg6aUaDHmlz9GslSo9PLRSs0dIGjtZeLdYEDBtQegqqK/YGoQEe9zFTzyOTIwV47glbZSGNTT5yHgFxdDYYrSErwCLvaKVxKAKJ5iw0owOEqG8UCqQnyeHb9KJOgUhBJ2KMHrzsC/fK5gIUrdb0jRB05qJWgbVVXy3yBY0sP1rUTx/b2Jm1ea+MMg6T+ax1NrUTBLrBh7xmKTWZFWCOW9UhlI5S/x4CV2m0irbAM9Oo75dMSJ9frzL+JU3OL44l7+BIucP1Y5BwvX9Whh/D/Y3HF8RpBYv90ADoGVceOp0pzCOOwypXP0gMdul87drgX8fFi6pfN2Uy/nKbWgTJqLHeepuXaF0gxs6XxObljB/Pu8fMiWYitXncrEZ8BgaR5a1W+CD7SVQO9L0nzlA+RfqGtcj9QCfYiR/ou2a0PsGbBbWoiFxZp8ZTdSF+OAB4Uy88/0WRT+28PEvejeRYdwzv4MsD7gi2lSc2E2kWBSaCyPc+VVXNFaOCUpuIGRwpySlXdQQ4RTfmUbSqqcKlKGYOujjV4+pAcg1sqpSuUzxNo4FVRmYy0xTo1RvkUNcU5NZOIiXGIT54F5/YfDhmwjyL7pFZiULIxGmJTSvVKLzl0yVLNyM1LpoVo/bILNh5ThlFdph+2JlOWUT7kGq+/U2/MxaJC69PZUo81LuYYi5Ve0edlYrT2YPUTq5lS5sgP1XcGpykJ8akpaXujhU9RK7K8r0XaceChCVkzOxz5ZLSjYx9LKMzjpUzDIpFUYGFLN6utFJR91rt5N9MZrPUoTemrNgnyi10mKB+teS78mrdl4g6RgHiTpKuxLqebmGyTmR0XGstDE/Khphlejm5kfq8Kw0JYNfxRo3PEQ/W8mxlD1774DCd9egP4B9pRL1xfi0wTSBr4lYLRc6JSkLMAMCjfokz756UZtKVGWordvkjzco+NQcuPefD4JeqUleIUpB6VNeOkbWcAzGRUJK0ijsNKqUack0iGs0jVircJqLMsXrw8BHpAqwDzMADxO8wjuFPe9w3O0lMFZmQmPbdW+QiuPMeHPi7Tzx8AwE/6ynb4TurUAf1gFNbwifAAljx+UZMzSVvELpnx6Gbv+LvpWrRG232VwsBf+RZrYIUleB3/Poab2rhQTjqPE50Rim46j4hKouIKacRwLTQWyktpIqLiJVS1A43/EVpWnoJIfsZJFIFYOJ0sm/ISllmEyliDoGg9/VY/ilPsrTmFVkwX9EudGrKO6DYr/gOytgrARxP8Gf9uADki4f75LQJwePfVKB8CuIV4IzNewpeWCIAyldpQJWNPQKF0iXgNXA4kZXIuL2CABp57gnWh5Bb/G/HJCJV0P+xFUBMnKAO29gmQmvx4efNpDBK4PwbSXrhfxnwDXQAfVagSsF7gT2gR7w6NYYIBIwC5ozbAjkvwltuhvqLO/iDJlUFuAOqy/iD3WCPRIHK1Ao6NvRRob1F/EBh0BchQ5pExEh+B3l6Pelgz6ZKBrG8kr4i1QvWfTR8lR96H8QBHNeBSg0emwTr6F4vg8qjBIxHEmbbr5yPLaaeQqMk/qvPbI8jHk3AqRArgzPjbZmWXCTPGRDyS5bhAIrf2nJPfAH3ddg2i6jl+zcReBVIf22KowTay/Fq7rr4SPBkyvO/4PcPUtmDLhTriYsAM+xj+BXUHPjNZ1QOHPQddlhyGOfgL+FOQPfgnItw/rWidYtPJr7Apsk/+BPtY1xsdGnNSXp+MVPhOob+qhX176UKJNeGAGOu9T4t8tab7/lIJpv6T7/nMKRrxFPzoLp3CNxg0gd+YXAnfmrd8uD5IzvxDQmeT4L6nqWpCdSH7sI7IRO8Gg0zCiHuAGvQnGLP9Iki8FqcB3IgEYDOvz9N7dIfDe/TrJNT6oadx6RNP4oKlxJ9X5d0PjkwKbNB9WnA0oN5eHpzCZ2n0uRcXkh0W6RqHJFJvnUWzSwDqP4jBIfjifYi7YH0XmUbwFyZoLKJi4IRdQHAWPYyfN53wK//nEr0EDLyStcNmgX3NDN4vQhbhKTdoPlryGNVzOHSTUoCnt1C1BL3ouTg4J3o4qEwJuC4O4XgsdApYNngdneSEp4HYLByu/CnZhlSkB92M1GbQkJeBmsSYCJ3rtmvk/KeQ/9tPWq0kpWLrxEXrh75ot3F3PCegu7pfnKR64L3YJpi92CUabXxDMdr4lDOdBvMcy6+yxzjp7LLPOHm2iYZO2gCUPoQXv2Sx5lywhLe9z2Um/gCQ+1i1M0SU/p0+KquAcRBq5Aym6TqJrquFkkudNmWppylRqCre/GQIKH92mLfxdtoC60xJQd1oCqscMqB5LQG0VTcdtswTRNksQ3W0JorvNILrHEkT3WIJov8imtJeCLCYFE/7JrVsNgwtvz3yKA+wWBA5REdyyBZ5iROOeYw7Qo6ghHxDe4dXGFCefBrI2jfBhEXV4Nh1dOorad0TEALsfNimjsY0fURs9mOgEtojCx1R6BuZNwWcQNTqEcFin1mDWlDuwrk/ENaW44s5unIfCqz37PpXkcXthm4bdSuvXMk/9eOiA+uH4MQg/+sJHA/bu/7L2HeBRHGfDO3t7e3vSCVVUUC8gQEKVJqqEJIRAQookmu34kCUBitWsArhjm9i4gmwnrvmMux07jp3kwz3GvfduY5vEBdx7DG78b5m5uxWng+9/8jza005728y8M/POuzMlc+GtAyRWVhuNGuLKp04sXQZvZa0UfOa+DaXd8FZ6PP5shp9Z2+Dnrj04EymcBd0G2/s+RLLOUXQ6vBdnoCnrAnibjQ1wEdK0W8y5Fd5vBjTFOOaX3RVF0lhb9gi/rCh9AV7K3o5SJOyBt7nfyi8lCrcDHuxnLyCwDkfRPngv3guBEgOyfIvUR/mKpsBb6UQsXwo/afUfG9YJ8JTOwfhFtqhlGNWqsISBGFHVZmDz8jqK/jUGj7bHnyfx5374KcZjOEvQd30GDHZl+8Yw9WVGpBJWFLyVpUQqYibCW+lU/JkPP3OX0BFzs4+Af9sRy2q9eCdC7IKIsxDihkgpmDPo5dZTy7ZyzCklV8DL15Cn5EZ4WYmD4B3wciwOiffDS8mT8HM2D6IebBG+SXSEmkoPB8bGaZ6r43iGwLm0eVuxOc3BXE7H6rGW5XkoLmBV69DmnU/1/DJliKpwWe6/watnL/xsV7l0bd6rCKZnP+XKwFxvYK4xYzVtiunP9RZ23MH0sZgrH3P9CrnmX4UGpQvQ3CTE/GLIbm6VgetxxN4mAydCimc2IhWiPB27/QmkVZyOuMmWVf45tpMTt3OMUWZZFTRlUjEWxHjwIxGf3s7Qyp9HKLdcMJZy7J5pWdq/cdJPB6ca4jGgdgNoBPzAiwy2v5oBBlvXf81ga/oNtuZBBlszhMHW1a2stAZbaZ12K63TbqV12q20TruV1mm30jrtVlqn3UrrtFtpnXYrrdNupXXarbROu5XWmS52BFhpnZnivgArrdNupXXarbROu5XWabfSOu1WWmeheCjASussldZhttI67VZap91K67RbaZ12K63TbqV12q20TruV1lkvzdBopR2wGWWdd7h2KKOsk42yzrt2BBhlnXffF2CUdQYYZU/V1TLD89JIoyzOEzx7dbtRFs9cduQeocxODjI7ufA7vEYYoVr02PCFaJ+J+5bRj+mDzqSP5ZAxBt3Y9HgOWWMwkLCXAp4x2Ov0xG6dF8+pCCTpaAcvnj09DttCX78bbRHjfoXMkVfTuIazmUiBPQ573o2g2qK+pzhMhhUmsIMwolFnGBfcR5ohGnWGsZUDMY9i9vAbuNcngmaIyQUahEfGJEGMtnA+9vIy7FMCTaBvdzitTaqX/wJj3aLw/3ovd/t7ufugXu4O7OX6LhjH3ZdiHqehnwvUu8kibBr3BWzWVMLswf0w1doFSg1EsxqIsauBmBixI0ANxMTKIKuBmDgZZDUQM1YGWQ3ExMsgq4GYBBlkNRCTKIOsBmKSZJDVQEyyDLIaiEmRQVYDMakyyGogJl3sD1ADMZniQIAaiLGrgRi7Goixq4EYuxqIsauBmELhdPjVQEypGOvwq4EYuxqIqRY3B6iBmIUyyGogpkYGWQ3ELJJBVgMxdjUQY1cDMfUi2aHUwMUjN2twee7G2tZ3wejvzPtfXVU/KYqYO1z7laKIYUURc9f+AEURc/eBAEURE6AoHiJIz6GiQL7vC1QU96KiyAuMBUVxPrS/sJ5bEMC70C6telJ1uKcTRns6rrVQ4ClcaUYVhk/BczGL1hJjCLEO3w5gLy7G1zGXYJOPWhA5GIYn+yJVkfdCd4uq6sYPbF244C+C0Tgxqix8PFRO1CxlON0KE7ao2UXSlHYxopmjTGlDQGHUfGW8O4D26HLOGRW1UWqeMSkGgp0R2YSYFyIdkWhyi6rBhEic1EYt+j3No/KNAAEkaDpOxqJqkTRPTWBSuuZZERh2aZ61geFYtu072La/B9h0lMyz61sy8zvYzH+fIc38Jpv5zYKbA8z8ps/Mr1dDxx+T8zAGrwWgEalUC7jB8zKyPubC8KNAIGMuetzg4psgdszFvAGka55wZwCNEZqeHg+MHdWPyckgcs8W3GRzzYFc76GB1nNO+Ks4lTs33smV6joNXh7HKvXsCn8YT4Z/R2GKgljPu+GUUQ9/F9Pey3RylRWDhD0fnubkdugZdgbMxFzQUlB9RuvvY2vv/DO23V2ANXL+bbRn8g/stxgh9Mth+h1Z+yhF4/I/BiOEKwckhqv6uMhG2kGM/HCHlB4ayyM/Ui0HPTEi9xTJloO7gpF7Z0tD+jwQbOTHG3ljQNOboclFrirEqjCmoQ7CCBGL6Q8CM0bk1rgknHrHDSFhcZUROFw+ggf3xi3AtUBc7hicZC0AHGbcPLQUa7F3QuEZaD2PvCpuLR7lHTcpHgs/6cHCn8di4R0o9rgdOPjHXYnn9MZdDiA2bdLVFic6OxjjniDCnoPfsR/gkBePafE4LsZfirthsdUAZxcSYqTH/YDrnbh1aHOOM+IR1y0xiOt9InSNC3H9EoW40sJw//4IyGPFPYdDT1w8vIfFrQrDrcEfgU5P3IRYajlT0TBegMgTbnD5t54Sg2093WfberrBFbj1tMO+9bTDt/V0p4ubapJ96wknKAkJ1v9p6+k+29YTFvZvPV3l23qaaAUg9G89PYQbC89Yvq2nRN56OtkI3HrikNp64pDaeuKQ2nrikNp62mIEbj1xSG09cUhtPXFIbT1xyLf1VIon6oaFBW49JQbZelprBG49cUhtPXFIbT1xSG09KX5460nxE2zr6WQjcOuJQ2rriUMpibz1NMMI3HoKCwvcehoXZtt6mhxm23q602XferrBZd96mhVm33raMWLrCetSbj0hovsCtp4Q00WGf+sJQWGzUCp/MYTxkVtPpkF6hjegXkcvis34rQNQ2WKcGb4OqT1rcxjXgAuPDNnC0mrUPBeHBSy0YbC4FYk6+0jsf3iqv9zESuRNLKnNEnkTa8dhb2JV2DaxEC5vYl0V5tvEwldXDaQsBH1lhU/CZhM+WTWbzSDa8LxmifAMDOVzyITxLzxAeAe05I3hdCx53Fe4Hxb3COnF23G7LG4u6kVNj8Wo32Ox5Oso75a4ZDSPxA27Me8j6C4VVxpGeftQsZ9/BuZ9hPJujbsCbzOI+zSMjky7Fv9d+FdISnGBnMUH2KkbhKC5deoMRFsvsG+n/iae3rHaUk9y0TvZQFPwnAbxb8CjLxPkEyHLNQeUaw4o18zl0vAoB3E72o/HCIELh8vgeRkoSX8LKBQRgho6rFbS8HQHsQUjY4XYDrnuhgcnRBk9Q92aiPHnxDMfRMIY2oUSOyHX2/DkQWT66ijaprrflDn3YM4k/HnHErshl/jGsFZgTtwhEbsszMBrJVSVaQmIfksM7mFYIgrylsJzhi//RxZm4Pyo6TIXY/6BSOTOKXAUKYf8N8HzVyiT0d0GDDoX+4o0gnQy8UQJURpDFkEqcjtkT/wWmFBF1jlUkUw8ZUKch9LL1ylzBmTcAo8rQmbO01XmNDxzQjSgheZHS2yDTNfCUxqhiN+viM9owwDOm/VhQ0sLR0FeSjMGt7gdijwJj9dXTLgVz1l4ZMUSpDxHiBeQiO8M61zM+HeUsFx3DGvpz0RQ8CrGkJ3T2qeJ8QKHWn1oo5b5ESLcjrA/9BBTUQDH+71h3QnlxiNTH3iQqfeRx8FeDFIvHjbG43gJQUQ0HqBMQKOs+MiDEPWh9tw23G2izEdCzETaiOBwbqcm9lK56yFl0j2APXU2rXIv/K0LJ/uoJzPxSA0xCSm7hylbDVQ9+R/Dwo9aiLK7ibKvITiZpHM3Qa+Ackzb3YTjcgjndSFt91L4Owjn9h+jifsoiNZXIiGRSbgVScjEozrEMVjXHjchfwEQF+0zrKOiJPJwNyLfAsHJLVhf4W4U8U0YPimWwkjME1HMboQbcf2qcH04i3CVHw240tAILD7EqvzGEohjCJ60aFXnX/ubSh+GZE1mEItfW1haH7Y0N04OM9F0LfDyFfER070J4e03rMXRqjqJ7vUYpB3yD4juP0J4Mqpl8aEbYezAMBqrIXwHhF+D8IQdyOce9w7C2Eq1SGwJoD0PBzzxsfsxSEzHy5DcOPF3T8flB8b51G0YbpLjMeiobPOxcU6TlAKVU342rLkxktJCorQTgpPDEXMhUXoShpeihIvcyPvlMYqTIkq/K0ZxUkzpb0A4g3b7i90sOmsy+QKUUPK+GMUohxMB8mSce4lSCs/EMI5JEEaKV2J4GPv1VDcOBRtjlWCmBwpmBgnmUkwkwcwkwehDq3P7O6AflLmR432QzDvQp7rP+9GwqGk8UEZN45fV0DTcOAzm4/Evv0cMF7KgikBI58OTGScFdQEJqj5OCeICYnR1nBLEVuJkIE4JYqsUhJZejLpim5vbkJFOclBBK53EMCyDngKSwkUkBS0Tj54RDdhLrreIqm1A0dIDhnWmouo6C6lCq3sObhTdYJFGGuqbSBK4kYLM/evWez9L7l/gjtGKHSMTD7IRwzhcxkQQjkaAv8RwWgcUjugIxJEH1TH5frSJR0dgp1syVmmA6AhcuWwdK3t8bAQi/SsF0bEjjsJfQDiPlNfYCFReCTB8kvaKJ2jL47kLJ1DmHRDKm4LMczg8QdMKMv1h4BUAJ0ZE45RluL2wGjvkJRGF8xH+KRHEZBZrmk2kafBoHnE1cnoOq7lGYPDfTqe1OkEyeTapufMSkGoInuvBXLciXiL6PNK4E5Hg80kBTqTvTvk9h8RwgUfKfgJJaauHJp7De08/lehxMD1PEz14LpDYiO1iOdPzFdCSajmt3YqeZUSPJ1HSs4LoyU9U9Kz007MqgJ5VAfQcIenpYnqOlPR8IOn5lRvBW0TPWuxrHSjFPKYnA2hJCHNadYmSnslEz0YfAfl+AqYEIC2wC6HQg5Adw3t7Ced+xvkx4vRsHBu4nnJp+S7g/QyE3RLONAD+pGindamioSkcaXgkUXVBCEO7/SBRdcGmcGyIRhKkUxdspnT8vJ2VUTOlVyUpZdMcjijbk1TLXBaOPL0B4VyS5vJwZCxuHPBMvXRFODKX9w8czVfSe+U4xfiqcMk4NeojqOQGSM1Do4I4ksKvQ5jlclQ4y+WD3oJ3kPLfhqMSYrV1dDgyH5msOq7H808QRBH2iedBhnh5lNgaXoyOLcVf4M+/0dBQ9JpMn4jp1xyc/h+ZXo7pdx6UTvXzHdePdjRNEJCkEjyrCjdnRTY3DFGKNZFJraGUaiGTlj2pVAOZHpRwKUk/i+NJ8lkUz8otx4NS1zLfSMAqQ7m7ZH1DXVfC83iynOmZ4XKmxxrVpOpEFUowTapNUKFTIwDSSgTtDi9eCu/FC/BnOv5Mxp90OqAxH8/Y2o1j4TipAwDXkfB8myzbVyJxlZ6i2lcicVCSotpXInFRnaJUfJKHCdKYoCQPE2SkE59JxCfOGjLxCC/xPUrvdzxpXg1on4t1WitTJOpOmjRvTmEteKwTG9N1EJpAkLucPNFcl0vuQ91ObE3PYnI06pAembyaVEWvEzHsT1HticN4iOS0mTiUnOk8MsbJA0EG1/f9XtQBrUk4Icaqvomn6S8AgWPGOq3yVEnkjTRN70pFzxKEfLMDs2GbR7wcOi+VWfizg7zYUmXL+pYH3GtwwC25BzB9gqOg10WIHKUDnT0YwoTU112UQn4gN0PERK93vSbWuNCSCe8b1TsDfoxZ2MJNFi2TJZnQzV5DuXzuCmiyn7uQ+Ik4Sn5BwHmI/JLeC95HhfwVv6OJUHztegkWXwXr8f0bsr/OoN6YCPTjmWsn4Yh5r4t9V5jmexksYriPX6mV3B+A7Z+MAY0o4gF6L6Q6+dBV+L/YE152EVN3MFPDNEDjB73iQuRnBU8CoqBO3kp2Wu+qellBk4CwNJA8Il9Jo355mmoAqywstTlNKZRLrTKAUFQMcFFUfdhYL7SKS+F9Jp6LVDYf3mYthp83ocys5fASnQ4vx6Cyg5fZPfAyZz383JPoxLtUapLxQjXg6wzymiL0WtHFELsT6q8I9/U3W8UvwfvMRgjMegfe1gGgsr3wMus7+LkyHS9KH4eNeOUsD/zfDRFzEuGlMAlRFP0dgGEDxRMLRL9VfCq8zx+An5wM1RKeZqGtR6Hl4wF4j6CevjCMZLYb5DUnw2n1ZEiZDYehzC7PUEK6KAypfhjDMLW4OAx3OvRMJbLdYW+kOK1C/N5c3BJG6D5hdPlUR38BdGIBct/B+MoBV3+m06rIlPjaCV83BCf/tkDDMJa5NlPhX8P4M9Ukf20YzmU/81FwXlhqpuy1XzLmDMRMM+DMSanoSIUN6QxeNG+CvMnZTissS6I/nRbN07MUus06ZlueJacXHDw1i/vu78mh6J9ZSmP8UX9N4f5f7sfZrSjklwHtj8j0bGY6AzDOz4GGmaVWE2VhOAkOy4bwnnAK47pnUrakahYJpSZbKdxZlP2IbDWAzwrD9dYJ2UzWHBLR5dlKRHNJRHdlq7XBvDC5NiBKZ7GU/oC6LX8+NOQfsMemyOoBKp+D57VsRek4Qq3nKErHEaWZOZLSZKJ0PgQziNLkMDm7Z1JSiZQmvIcyHw9UvBGHGc1gNQp4+sY7rQ4F61dSo8M5ahH7qwPV+aMYPg+N9QccaCrbnyPrRhgIZcp4quh0nKfjZM3LFY2AW3Od1pLxEvjRVNEbxqsV89E6EvrIeCVSDn8wXs2JjtZpzjRBNYzV1BJyIDyBiGvV0frnGP7sZJLqdq7/WVj/mTciNXgpr5gnqQFKOifBsDZBUjOXqNk8QVEzl7C/OEFRw+GvfdjnE/boXIW93I79XMa+klrf36Gv9uKwfKLJyAHxe/kwpOdK5BtMRH5WrpLzBhPlfAOGyXlwo4kgHs1Vcj/eRLl/AOFcquOTKP/UiRAmYjncAuE8mg6cbGJ7HMQwiZLDF2PYRNVzCsH/B4ZpQnCqiTOqlzB8JlbhJhMnCO5Jsp5PM5GLkklKFhw+EsJ5NF6cbqI58PpJUt2dwe07zksD390ZaG7Dk4Yz8dxNgcst8RULZjcIZT88z02S86ovTDmvSie5fGFKY1M6ieVLIpvmLcsQ1NU4tj3PoLQpMCWH50cF6lk7qGftoJ7zgcrHQz8nIBtf8wwoA6AsLnJaEybL2vqSZkBNk1VtfenEpnHiZNVUIB068OWTVcP9yokN9+7Jqva+cmLtufOkNL+hWc+kPCVNDtdimOZQ39Icam2emkN9J+dQ7RNI2N87yfY6dBTJupNlfSTNk/CgUjEVK3gdC6UR2DgOnovypFDW2oWyVgmFZ42QGsZLf+JjrcmzRo+Wicecig04A9vPqmMTQF1a7LQeyJNC2mcg5E/zVH/aRzsM4flqRgrpDJsNV/sMCZtl8CNpkrx81bt+Mmy9K1qOKzhHy8QzVkU+TtIqJJdAxyA83nzJZbmdy3JT2cyIknLFJc9gF5gs3kEtcxdCxoN4xKeSS4BaU+K0zs2XXH5CXN6Zr7j8hLh83cflJ4pLZuszYusHH1uf29nyMFszaeo5CbTqdwgz0wiYG6YTwlQqnW6QeZ+sTxkGbi7wciaDPlyciG0rixBqJX8DYNdh44kJDwAWTasWLhQd7l8DRdN6hVfPsbTSnEiVFEcrR1pJj6VlYgEtEeNpicjTxgRaEvIEtDacuJrGXN1GwxuefPsj1tWfuHM1gjSPnuG08qZIiV5BnWvFFNW5rqDOtWGK6lxXUOe6ZIrqXFdS57pzijLDXelEQXyJ4Xg3hVEYuQWys/0Pda6tBWphwGHH0K5e7k1XUW9yDO3uLRoGUrEFXIoTuVudxdEgw2In/uzPxgUp/JQ/CeTvhacsNYdmkruhDFbcXVjmbmcxjrPFC/FnNvzMxG9Oy46Gt3m/y6HlSBnO2uedlsOWh1nnY1GgbfZlOb5lQwOL73jq0XhSsDgLK/JfcnkGsjsLnqcLZFvf7bS19d1OW1vf7bT16N1O2evSz7MoSB4Fw1Fa5sOI6HcowLcZ0TZAcic8PyhEb9kRvWVH9JYd0Vs+RFQpb/kQ5eNhx89Sa2Y8OwGHMctpZRfKBpFKeBoKVRdLJURnFKoGkUaY/liotGsaadcdhaqPZThVH6MGkEkV/u9CNVZlUYXHF6nZa40zdaacQcZLGwNpmR25+FUIEl/PhEYBkZPgySuSAqnzCYTorLMLpE4JRMvHI5zvxLnIDO7ZRQDliLlOa0WRZHkadfIzilQfmEZa5dYixfI00ipPF6k+MJ2U5ydFylo03cDhelaxEsl0A0VyTrEaUWYSvIeK1YhSZsgRhbXULFIaPxbLLsPBxBLITRKbbfCAs5qEpLOQjiEh4RHU4hkccC5j1lYDW2fBM7NECukSw9ZqLjFsA84l9kHhEjUosJniUoPNFNA88UhrgYeJiLMY0TZAci887QrRmXZEZ9oRnWlHdKZCNIEQbSGDkj68XsvEk7JFGlb702xq2AlIxpQ7rW0lsrKeojnyfSWqsp5yYL1/U6KG82fI2DC5VEqTg0eXKmk+62Bp9pE09/G08WKSJp7CLfCWAHEi444CvFMWOK1TSiXuEwj3n0tV3ziBcD9VqnCfRMg+KVWN/WRCljdV9Y1THLbx513Gfh9h/xixL0aoBYy9CDCvrnZaLVMl9imEfdNUhX0KYf9gqsJeSNiNaZJzDq6apogpImK2TFPEFNuJeZOJeYMGQzx2HK9AEDe7A8av691+2971tInBtr0baI+Cx7UbOJ52Nm6k+FTa1pDvZC29id7Z5vdnuaGBJ5uLcPRq+oRXDMh6wiJQgtMk+3tpxfD+NFXxe2mFkDRd9dK9OnqH/Wa62lD6WEcsZ09XG0ocfnC6EtentKLYP12Ki4MzZ6iG8pkuG0pRAZCGtTORPjrVixfkoQ0RfuZPhp+VUKI4DaNi8MfEn58mq9HkEZbqF1TFeFy7+AxncbfLHWzgL2mJ01o/Q/J4G/F4zQzF423E4xszFI+3EY9RMxWPfyWeFs1UPHJ400zF4x3E1F0zJY8cjChTPP5ND+wM9zCtcbSCwyPkxbG4WJ3EtqUMoHNpPXQIyDX5GSw9kcw5q8p4DT6ZQseXKdR5FP4LhPPQOUbkW4jraQjnUGO20APAGN719YncHAssdOXB71jYtFBlvVYnB4ZbWefdQAYVPL9ePBLG31zSlAaIMn/jtL4sk0LcI1CIybNUP9lDu++nzlJC5PCDs9Qu1R6B2gh3IJiSj4VtBPuEsNTOVoxxeONs1a8+JWeMZ2fLGj+TpXgcSfE5JPbNKPqKklUKELqnxWn9PFsS+2ciduIcReyfibjz5ihiOfzcHEXcLXbibiWoaXMVcRyun6uI+wsRd9dcSdxpTNzZSFzJPiCumCwBYQGd/Ldh/k7+W7JlaCVDhXj8B3p2BNpNI8humjoZu3qEC/PwFDbS5Z/CRrl8U9hol38KG+PiKSxAiXX5Z7CTXBVE5p+4wvey6ZZ21jcVoTMAVvtMpuErkOKDK0Cac6UkZxA5sfNU35lB+JZAOJ1InOFCGDAG5SDaMpd9IjrL5ZuI4hedWHF4PKaocRV/inLaXYDzzSWQhGJbSd+guorHAtPFYfAzE09wKcuEt3lTCnmqWYaBqkKeapY1wsucI+HnwHI0Wy7oBUjofzQMLNwJj8h1FZdAuBjPsyoe51EK5BoWxTMsCqSxZAnMFPKxTT0UqJzvJ+Wc2o2s3s9KuAGV8z8DlPM/A5TzAwHK+YEA5byT30k57yTlzCueB2m/vSADa/hhN1UftZFHCGYBDQSPun0rocfc/mp9xU2srODGdz/ZaPBmiSHEPYc7xgsggyVHOi08XY+qs4w6xl+xOomnMuoIb2CY+OLPSZPn+yyClD57vpqkzRJoRr1kvpqkzRbIy7fz1cJltkB+YsulapxLVJSWq47E4UXlSlXOE9w+Pust6gDSzwRG0YlHLBXFP8B78af48zj+3Is/f8Wfa/HnUviZiUeqznMUU8ftLYuEl1nJ8HMhgC/LhZc5JfDzl5XYMkhUXSyqK0mJ4FUbogFlcJHUeCCn8+F5rFxOvrYJNfkiUW1T7kbpJKlh6Yxk8VxsWKZ6eKkwTHKCWR5P+i4kMenDcVom3uQh0I1BnM14twHOZ+H5RuE90473TDves+x4z7LjPcuOd4sfL94TIpbh0HOybBuAM+Iop5VWIfGeaMd7oh3vSXa8J9nxnqTw8vzjFIFzTy0T7yARl2Cv6peaGhDWw7NYIe2zI+2zIz3OjvQ4O9Lj7EgHJFK83UR8gvP3H6UpBRCG/RYmBArpPmVK4U6wjwxG11SoTrCPjCcPQZjNavulWc2TQ33zJ5M3k7/qZbvkz5T93xWyzf9CdsTvK9RazHJde5Qccrew2vmFhly8akUcgWS+yWRGAYlPwRO7QJL5up3M183LgJr5CxSZrxNe7wJF5ht2Mt8aQebblP3UBZLMXUTmhQsUmR+Zbb+VZPYwmdW0WMcbYMQfUCEuZjJfgGzbjnZatysyF9nJXERk7vKRWUt4f16grEm10lIlyVwiyfysly1XddJy1cVU11MwpVJSvZSoLqxUVK80Jx8tqW5nqruJaryZRghUMS1y5Q/ZFnuh8VVKqpucNqqbnPjh1vGViupmsk9eVqmobnbaqF7mtAt3OWW/W5G5gtbnz/jIbHW+r8hMZjJfITLxlhwxEZX/k7wCbAQSx612Wp8oMh83bGQ+TivA+CpF5uO06J1epch8Qi4JPbwkfEIuCaU6eEKuPeOYiacMOxNPE7DlVWqRR0vmzirFxBvGHV7JhIuZWEITcLzQR+xAWf+ZmchABuA5q0oycZOdiZuIib/7mLiJ8L7sY+JmOxM3KyaY6lsk1V9Iqm+l0t8qqv9CVJvVMMQQz7fJZXAPM3GPcdpqycQvPBycQkzUYOArZOI4OROCbPgpYk61mpkfR7OuRgx/H05h1Ebbq3mm3k+p+6vVUDdAU6GZC4GOl5DMIfosBj11vsXCG1z0xdlw+YSFuETdSEHH8KWnMpl/dz0NuIuml/E27D76NtpF27DFuA3LA9qNXA33oD7x4ETA55CYqLmRI09XYGSy5j4KI08LjIzR3MdB2I2fXnGZ7YHJqZp7G0b+b2BkvOa+Hsvg/p//zfNmYJ6xmvtJTCGM3wamJGnu9zEFv4Ly52E4flLwgwTOhwketL/6IIzR3ONnKXIbAlOiNfd8CHvaAyPDNXcLZscUQug5IzA5RXMPzFJ4/hSYEqe5z/cVpB/8yIziPI8FZrRAAr48lPxhYHKG5n6V6MXSRApxR7nHqx8P+ur6iqRpbmu2kgBmrMQDGkQ8zpecjomTLavyZRzMEzgiHyPwxAiRyBHl8Zbl+V0gRIdWOQ5n8Kkn4ofPjv3Q7N1HwGsVuWen4XeQDjcd6nh1YDFTq1yABoSMv1GxqdDW3MNYLI0ckLCY6Xl5BCI8mlVkf0AlikHTuR/GEmvJs5sQeZxzAkoYWmU9EjEhfg6WmIUlvscSz+OcMhdLGJ4ZI0rk4Bxq0iIqMQ1L5MJr1QMolMlcojOwhFOrxIsnRP4JVGI+lliFJfbg2DaFvgb3XDHHzsc/cS5deCuVSIdpo/tcLEH+yEXMx7MjqNqP+EvepRJ3YYn7scQ0lGApU3XAjqN6A9batDGw4GprHdDcX2L+u3BJNp0xFM61YVg4QK638yB2Lmgldzq8VN1Hc3mG7w3M79Yq3UjR7L65SNG7WHsNWOIalMUcLOH2DNsxVF5GW8zXUIlzUU6nYYldWBfzGcfDI0pYWN8Vr1CJbVji71hiL1K1gEpUtqMGrUUV6XRUYds05/FNMPLLzsqViPSShHl09oVmWe7/zMXvPyH8otPPzEMorB0pnAvAVG5BuA9fi0cKOIqoV6B2feQeipgKEZ5eyIyPRGQa+MFR5R8w22NeAlSO5Tw0nDKBORhBHuxPcEQGAroLMl8c5qf4aCzx5E0EYjtmeBNe8w1/hj9h63nqScqwqQRAvorUP80RO6dCiXBYOM1x+ktchLXy7E+UQZthWTU4wkRfcIC+pq/BT+ujt3Jg0Sokz00fosAQsAhkoX2DK3HtCRd9SQ+945gc08ILjWuWLsuoPIzLlsWaaV29a9d29qwtaNMK1/V2dxSumdbWXQh/dOtqcXHBtILSKevWTGnt6y6cPm1GUUkx5PAeM9TZ1V64YFltXVWhvDtE0/Fgae+gFvHa5djMH4nHj+kNdXVABl5nClNjY2Bdb/9ghi8aP9jXXUZXb89aeySUtZU0ZUkqoD7053L0gxFWYIQNmuXSvV68RwYIdM3W8AQBr7d3zRoMbluMX6X5gBhOTpo+FROH8zhvXycVvXC/nzeIxfPwMfpSBIHHg/wBQUmCXYnQMs6CrBePKbC8a7pa1w5okRFivzwbwFvbwHex9g32a5ExYqvgQwJ88eghGxkr4y1//DF4+UlknEzwUMKG/s7BDpkyVqZEBaQQjniZEBeQQEgSZEIiJeAlRAwpUcan+OIpe5KMzqDogdb1CnOyTMjh/K1teAEmJ6XIpIn+MgQrVcbnW97u1v5jO/pBRulim8FnEeC1Hp09WmSm+CN/bwly7IQpYq8WmS0FOVOKtkSLzJVRcyxvb1c71uEAzMsiJ4nZgo8n8LYN4ZH8XUPdAHOK+Js8psC7no/lVwUKxDvyxAIvtTm8uymyUFxp8LkFeIncsVpkqbjV4JMLfAXniOWCTy+ABtPaXqxFVovzBR9gQDFA5EIZs5JjSrXIGhlzFMdM1SIXyZjVHDNNi6yV5yK0g5jwwsbIJZLXdZZ3qGdooANB14u/GepMgzScbvyB2+7anqE27/pWb1fnwKDmzCujE3oxLQzrArmBNhx5RzhKHWO4IjRP5J0ebw9eXRF5F1eI5vEOkDDu5uqAoaevFyrs/v2+Aw7qCfifAHgEigexjFkv+ICD+agpHwqMzdV07lju9rVIq+xPZv3JCODzwKwuTfex0JmNpwZsBjU6NDhA97WcKcJKPAPHcyBs6mb+Wt7TA7LiqBkcVeFRtweFzcIYR/bpwqPu8Qmbw1EPC093a9s6vLs3bD5HbdY9Xm97L16FzfAWcvyjuhZxsTOAzHItfI2J5/lr+eZZnsFu70BHm2ZukZ0eI7qhQZtnc4SBEet6h/o18xwpQ8rS3nq8Zp7LMR6KAfLM8zgiCiOOx6vDzPM5Jg5jNlChCzgmkfJQzFaOScGYzgH8fs3cxlEZGLW2exCar2ZetJi7Lsad0AusmxcnUiVP1FwGDDAfxuM3C8keYt9KSZQNog1bo5XKhQ3Pmta2zq7OweM1K03yE9WOH7NnKF7U5Sp8KbeVqVhaMzDYjusgK0uxhDF446qVrVjq6fUOruvvHRzsApQ5ki0tGimzJqDUXSfjuh+CiVaRh+9Es0qfUKLHq+qgl1pTE2XjpRvGrWkctDx0C601nYMeD93dbM1QBK6VF6Jas052qc94US7RiM+aE4mf5uJA/Bu8wtXjMD0Dg639g5rDxfoNJAW17LCklveg8nO4pW7XdCrlCLsAAMQMJNmu/YPJV05sdVNTVfXCZu+S6lXepQ1Lq7VTbVEVlXXexoa62kpIraivxuMHgqe2rILVrDgotWlZXTWX1EektdQ2LNUc9simyubamkUt3oUNTfUVLZphT21pqahcwoictpQFtTW1jd5FDc0thMkMklhfU9/irW3UXKOneZdP1yxbcmVdbfVSKuYOHo9FwkZJqqlu8NY1VFYQn+HBMjU2NLVonmApTdW/WVbd3OJd1lSrRdgzNCxdWFuzrInAeqsqWqq9LbXA85iRuVqqV7aw4CODJpEYo2xJfmjR9ngkBYQQEywWRRAbNMEmgLiDsxD7Y0fEL6+trPY2NjVULats0eKDJS6vXlrV0KQlBE9rakZsifbEpc1ekGeTbMJJoySSRMbZExuaVbOrqm6ppjbrrW+oqtaSR8tXDfS1aCmjJddWaamjpRF1aaOltjQ2a+kHJVY1NTQ2VlepFtMM9bsM8GcclLG+tqW2hluN7HuZB+VpBDzVLT6gWtaoOZqqK6trl0OWbHsWKAhpFc0A3q5a1HtzY92ypUu8C1Y1VjQ3a+OD5qlvrlnaoE0YLY3llGtLXljXsAJlO9EWu6ilpREbU0tDZUOdt3ZpVa1sjZMOziYFqE0+OKm5uhI6Ygs128qm2kYCkRciX/OyRmzcSFB+iGzLaxvqmJ4ptly1jQtrVyodWBAkqaW6vhFKVmuFQRJZekUjUmqh19fV1dZUL8X+FaDQi0NlbFkElSnVSMmIjMCGt3YJND1u8aUjkn1y16baUuqalwbo1Wmjp6FimT5aMumOGQelKk01c7QUBFoWPJFAzjoojbmbfVB8c0sF5J9zcP6lVdrcgzEsBTFCEaizeaMkNixrAonX1UIbnB88S2NTNVYwZdmpjZIH211TxdKaaujxS7UHDyNbxUrtoVGy1TXU+HTqw0HyNNfVwpDR1LAMfqsa6isA4yOjZgPJeCuqqpq0Rw+ZhWpEe+zgfE3VzcvqWrTHg6QEEvHEwemNDaACqCE/OQqzVRU12GOfOji5sqEeFF+LbHza06PnaAGZNqt8z4yej/nVnj04B7Jf3YwatqKuXnsuCK1y8Neet6ehZmyG1oqqRXvBntYIbbWWdD9J4MURqY2glbidvxQkpbKirg5UTlM9UA8j38vBsvg69CujpxIcEPCrQbKojvtakLSVqOqqAnC8HiKTxPHGiCxNDQtr1UT0TXuareG8ZU9rrpA1iq1He3uURJo47BqRCHWI8gZa3hmRUssirW7S3h0lpVp77+CU+uqWRQ1VjGz3iGTWHSCaf42SgHrv36Ol2SZq7wfNRcrxgxFJq5pRP1RVVNdDuQ+DJjY21S6sqNQ+CprYXAXS2WNPaqmvx45YV7tAqsu9I9JhegoJ9Y3axyMSqCpUO/okRCLK4tNR04nTz4IlB45pnwfLYGtJXwTL4a+oL0MmI4lfhchBRH4dLMPyuoql2jf2FIr7dkSPqK6XXf67gxPkGkH7/uCk5mULcA60oLoJm/Z/DpGBW+sPQXL5u8e+EKmN2v6DU+XshYbBH4MUbqz3NjTBwm6p9lPwVAWeG9jPwTPRjLIS5PPLwemcVgcz2NqFakr56yjZeLLdrB0YoXUqqmqXNXuXNVc3kVLaJIIlozaoXVpDlEpxnTZqRlB/AflOD5qvtr65VjtjlKTq2ubl2uagiS0NK7jGfy8OYvM39d4Fy3BZgOlnBk3HEQvYqIEe0oi5zgqai+tjy6hpy5q1s+2Jy5rqKqnb1i5lxiFCOydIHp+czw2W2FQHAmyprmloWqWdN0oGGD9gDNTOD5LcvAJqqHJRNYC/IFhyc51c70CLqKjRtooRC3JcsG0TmuFd0NvbpQldVzaa1r4+tOZ4yi9MQivnpfAb9zf81B8NOWPRnDQWjbdj0aar6QGWHe/61q6hDs2z8Gkq+CIW/MpX8BWXLDP2pCRVOjJrnN821N7ZhvfVtvYfr5Xr4UmegLBnJWbE80IjSuAFqSHr5FYtHr8q7+pdS/dxwn9NZAncMXoFnrULNS2hs72jZ1ATmYl8Mlpi99Bgx0ZNkBHO6diEp7Qn7QEYXrzyeGPburWaPl2gjW03QGixTOsihIL7DfrUPfS9uZbQ29WObh761Cf4Y4aEno4NFDGNI6wEupRUn0bGtmFPYl9/x3pNn/GE/KLNND4HSOOSC/FDfSSerlQVFWI14LsFngcCKC9XlHOmBUz4ZiQ8ebUC0N/Bqc3idij+LjyfBoBokiC0+OgUltbA0DFeMiDinaTiZLEbStwcZloJNXg3lCZOkiVSduO+70lk1wM+yZvlpP2Sydb+tZg1OoWZJLePU9BmqA8flRrrNq0/AsREiDydoa1L2w/03gAJFiYA4j8x4C4tFWP+KGP/zNn7yMiORvMkL6DoPpaNihECUdwOeT+CpxIJRhu+wxNIpMMjiUw8TnOMYZq6tPjrAc5xPW2tg5ojTXwFxWeHm1YvgoBsqdencPXi3ViOVCYC6rZyXWv/AERIiEATwot/D2ERqARRDmBOh+cKCSreBipegtLiV6Wy+Nd0dnXJ3iIeFNug5OfwPI6lSYo7A8uLnYoUOmNGhpT4dyrx4wlyD31OaV2JEvbDSpJJz0vMazsGFeKXBKZ+BYjbPab1raz5F2XNM7IXFWqE/iKjslL/A2WOgTJ0mqR4VSJRSN/i8CDU2/g0TcObxMUe2t7pgzK74ElfxLg+suH6SOFqW9fRdqwvbCW2d65Zo4m9+2XvSe9PY176sfF6hCYs3OHRhBDSNm7xtdpCF5fLk8p7hrp9tnZA5ZAJlpbxkwSGN6/7MyQIUlq7gdj3IkxrCRCc2dWpiXiB+YHkzO7WjRhkoozMDZ097b0bMOZ5pjpzHd4XD2GRTvWT1YPJiTK5K4uZSpLhPry8NA3bOwLM+CHdz6F3TS+0gSMFYd4NxLwYaVobFEFHiB/S2fv0rMAy0O1BbcaJo4SFuX4rfklnydD+lzhaODJYMJSbbqEXXoEUoFCy+IAJzjTcnkXqyxdel/YgAIseY1pfwpPViXcmXc4ej1oW3p9+bGcP6OE2sbUIGHLgraO7ffHedXhrt2gnWKZjKiYC13gSqGlE0u9sgJ6xNoO5aesbCqyXK2S9gAgmRJnWtSCGrPah7u7jvSzu/5EV0pcVWFATVxJvpuMJgfgyPpXQB9b1DuF99r58tzH8IoDtjDat55WY/6LEnH1/PH0+oeqd0f5F1rKV/Q9OVpXeNtQ9BDq2cz3Avl3S8ArRkD6U6R/6Bo4fQHLaWwdbtUTxmbDwfgTxuW9vHSpgTSe0ty+E3OuRMV5SyF/KfJa1rndgkDa0xFcyp8dqb+3A3TbxtYyJyiEWvpFdIE4bf0wWS4N30GkQjdBFFPCfHmtaPy3C+6qwiEdnrlkkHp1FYmTyoVO67K7Zp3BelKNj+L5TJwg8tilW/5QaT+MEwj5W5xazLotZx1vssIA+3JtFd937wg3Y+vDyOaRSH16QRaKJ1HHf1XR0ObBxAQxuwlH6zxT9AYo4C6WhiWgizHTsJrFH9GcF7G56tKRnJfNKxL0kzAxg/BJ4cms1LYWY75G8JyDvPZJ1GnlED488Fg+PMqNHG391NoPu6ljb2na8d0Pn4DrV1KiHNOhiO+DoGmtaMD/Wsl9EPEuk4HZtICnXKSlzw6uTVWBlk1TrdcQByDIHqV8vlZUQlcXtslFm75pA7VIF16WdmY0nD5rW0/BkERMb9Buz6ZuUDVrqSxA7daxKOc2fAr0TqzECj1BBIeaiEA84tPH4MbWfVU1crIs+APBzvGmd6mNtm2TtplMzu4D9YZ12HhVrw3bWLhzB2kWKtdTnAPB3ADhroKMNBpErdFah67IGu6Gj67h9jZ+LZdF99uJPOtKmD68EsntyAuo+UstIHs9UD/biiDyIzhribZ00gJZgWn+D5xaknuh7w9b639CxMBJP1L6pTxjPap8a81uSWA9L8CN9wXgmsbWtraMPT1z1tfaRKsA/6RXv6OcUkaOVZuGsIxNguFlR5uMr1sREVRzwrOkgt6JiSEu6cLxfuaCfC8/pvTidMGYQgzuBuTGJpvV6rZxAGTOYSByZjRlqypKRMuEgNdXX37mmFY+lYVFFAZQ+eByLQVnSjOBH/RUXa8u/oOR+0s/nqVn2Dxj8WT8piSuaJpe/yFQPK4oDst77WHSa4x2uXS3jkmCUcKf1OIgSpOJaeAp9lFgOGyVuh42SMIeNknCHjZIIB1MyqGXE5R6E2q9qExn57YD4ADxH+pDH2ZGPtSOPtyNPsCNPksj7tIytuUEGCtbp2YxaSzKtBnjO8qFOt6POsKPOtKPOsqPO8aGe9AOgvgxvdLDELIcFRPSAkp3tuFwOSxAx2ArNfY5DzbOggbGfgpjrQK2Bg1IfrS/nUdiRvcWy0L1HE/OpEEREaZMRhyh3IKcZsyZqGs5SB2k0FNUOgTGNwF4PPH8HFid8jdlrHEid6cDTyHAKgaGMEydKbQ44aa67pr8DqmiFg9yy+gDAH+B5zwdkpQOBUx3vGFmU1nDCy3PF7VBsJzzhS1TR1b6i438KLIpzUS+zuNYhsIwxzrRmQLlMqLE1LKphCWSdH0jhpAAg/R3ogCX6HSIKC8PT5kM84CuT14Ff5hGb02TlnMzklkOJZfBs9ZU6xVcq/wYsNRBYarNDrIbcG+G5FwmljxjOsJP6ez/ad2xoqQmcy3g3AYQ/wrPHh/c8P970yYF4qdiFDrEdst8NT2ydQjxsR3yRH/HKyT7E/pZ2mYNmNjsBxmvwzK9TqC/3o77Sj9pfcLtD7IYC05NN61gf8qscclHCMG6SMPq0KaKtq6O1n4nXxN8dohwKngTPJVA4f0we3gva2mfD8IhDbIIM18HzMGIglfawA/PiQMIt7GEHzxYNxvioj2rTwEabvypPLvIV3La+4/EAA3E7gP0Bni8BNPfkpx08FYExCqciTzvkNFXLu5mAUMlXWV5aCigMeJLrgTA6j+IVxXoW+/qI1yQ4mKURpa9LeF1anoXfrK/vWtONXz4zwG0ALDHVtGoQICV8rABm4vLxYwevTg0F/tMR4D/zg1+G4Bn6rww9AyAvh2fAB/0XBb0gC8EfkOC7smjRrBlq7Zv3Vr4UILScGnZ7Wtjb39jf2948dAzaFESSIXAushrgp6SZ1lWIow/S0U4CCt5QcqF10TiD5y1dhTdDfh3yF/0OhP/7IvJjfu8KlzXhung6FwgHa6fjrkkwfOdvnCKJOAZWipIKTRQZIgMArE6HqVi9XGsUGnKtkYWzpGkS27q0ZQDhCMhcDZmz+njsKZOkAdMcMUuxXXgCZJ0LWTWiro+pW3ylom6OpO6FSWQBA9itg73dnW1e7CV9vZ09MB3S9MfIcxPJuxqeH4DEhNb2dkh4lIcMzWf6khFGYsfGvo62QVB/+uMc1Ze4Bpbj/jDo2poCZQeBSYn0RON17hKuidsBm5FhWtlLUW0SZ4tVLWQOwFwHR30VY2SR/aDO4OYENf5sQYCwl6P3stegNVkUwOzKhNES4a5nwEf7qhflfYyUd1/hT5C3BfLyAhMUPq3NTQfeKr2bhHosC/VOn1A3SqHuRaHmFRRKKtSs73SDzSAAND7LtE5cqlZWpxmBc8vTZAMwiKAzFEFyYbTZkFNHLe95haBjPdn5rmH4GQC7Otu0bvTBv9oG/2oFP5N0sEq0MmkB6I/wFGTR0u5aQ/VT0irXyeR26nbXG9ztVmdJr2Fxh6G6cf6RRZLA9s6BvtbBtnWgUwzRCLShZ//LPvpetdH3qqKPl5Iq0Soopnr+zlgBhdNqAHY/QMIAUfIvSUmfxlPHd4hs07EpnBZ+WFm+yX+45kba3Lg2iPh9YEqy5h7CFDRcR1wFb2iOoJRYLXHAKy2qaYn0jdKWmZaV5TO6sAnWJV6gWXvX5S7LjSv+EukKOmYrehkLUSIdQcds47D2B3Tl1U7Fcy/EV4madksuTKhz/g9fPcge9F/45sFMoEsIR37l4Aj6lYMj2FcODvtXDo7Arxwc8jrDkV85OEb9ysER+BmDJE59P2HMEXQrJ9Txv7B6EvDe3WQXdWo9ZTq7qbrIoVdPTWY/VZfPoVdP+5iNJi523dUzOOxx2V169UyOj3Ipl149i2PiXMqlV8/mmERXoEuvnvOxdOm1kDZ9QgV+TGEgre6puuwY3cdWIoFirLgLNQPU+lnwHICeEYYDECwizuGeEUZDkQwZWngrQLBEtouGKVZkOYpnOb6Ob+Vb+zQnEuKp7WnHnY8JiNt9j+4fE6uYYd+g9KL4DABtAzpugCevATrCgHeo59ie3g3Q/V9CBpyO3RNBxblLHBLMGv+oBmNrNU8r3yJAtwOQofHQUQFQGFWHePMuZiqCeXybuVoXQTzu4lBXBKiC90voG9O+CPTLF3vPkSZgw1iDTFwaHDsM6WRf+YHQbwLUP8BzBqJnQf1nOg9eYaRPZMiI6GQB/foxmxC1MR85/ELC6cJQ2+BSAuAWAgtpE0yrHJ6/AuhI5swSkrUoZi1MhqH7lxt+aDDxAF3JwGIYGAK6FZ63/cCifcBwIIgldkAwUXzEn5guh7voswMgY3Nqwc8/NJEixO0A8A14XI0AdJCjk8XZPN5F8rQrWWyVi33D+IyaKIo55gBEdpLxfrwQKJLdAKcDVFMpwpJNLEcSoUWSKFXQiJQ2fBVhxe6B0gVQOooN37lCSVmLm+r0L3AHe7t6N6AhI0pgz+6DEqgOvYAzDOomskBOIcZWQSFsBPG5SDK2UFl9U6bSl3ObEixrbCe8YnOlTFswk5TB/FWUaSdkUpFyvfccdhqnI+M6l6U9j/Zw7Rm6LupMGA/aCkzr9tz/g2JWXPUNHdPVObCuo/+/oKKlDpVfp5mv4b2ORjmpRj1QW9r1sB6oh/WRClgfqfD1oApfH1VPO5+MGeHk78wxD3byN0M6+ZshnfzNEE7+ZjAnfzOkk785qpO/GcrJ3wzh5G+GdvI3R3HyN0d38jcPx8nfHNXJ3zyUk795WE7+5uhO/uboTv7mKE7+ZlAnf3M0J3/z0E7+5ihO/mYoJ38zhJO/GcrJ3wzl5G+GcvI3D9PJ3wzt5G+GcPI3Qzr5m6Gc/M3DdfI3D8PJ3zykk795aCd/c1Qnf/MwnPzNEE7+ZmgnfzOok795eE7+5uhO/uZhOvmbh+fkbx6Wk785upO/GcrJ3xzVyd88XCd/83Cd/M3QTv7mqE7+ZggnfzO0k78Z0snfHNXJ3wzl5G+GcPI3R3HyN0dx8jeDOvmboZz8zUM7+ZuH4eRvHp6Tv3l4Tv7mYTj5m4fn5G8e2snfPEwnf3NUJ3/zEE7+ZignfzO0k795SCd/8zCd/M1DOvmbh3LyN0M4+ZshnPzNkE7+5qhO/uahnfzNkE7+5qGd/M0QTv7m4Tj5m4d28jdDOPmbIZz8zVBO/mYoJ39zVCd/c1Qnf3NUJ38ztJO/OZqTvxnCyd88LCd/c3QnfzOUk78ZysnfHN3J3zyEk785mpO/GcrJ3zyEk78Z2snfPJSTv3lIJ38ztJO/eUgnf/NQTv7mqE7+ZhAnf3M0J39zdCd/81BO/uZhOfmbIZ38zZBO/mZoJ38zpJO/eThO/uYhnPzNw3PyNw/h5G+GdvI3D9fJ3zxMJ39zdCd/M5STvxnayd88hJO/eVhO/mYIJ38zlJO/eRhO/mYoJ3/zUE7+ZmgnfzO0k795GE7+ZlAnf5fxfIymWa/Aj64MQsrv3zHC799Z/hNkcxkiVtPcyXgs1i4Ih6GBJ+wKvCkY47Rww3Gw579z4fRYLDoHix7pKzpZyFJheJ0yl3cZmOTBe7uD+v87V0QcmaBpzpWYAx3/x1wJL6nwROLLVmXyivIZDn3e7C7jPshhXQs/zovjAuB3DAx62/s713f0ezvbNUP3myJIPeM4VScHkABjFKU1wUAEClgmCnvioua6ABMURS2kfA57JC9QA0xPFFtZvTDA5iQHEpiMB9iamLwKUEouLfqZAJb6ho7xtvX2rNEsfXwMb3xMwIoCgcWQp6+ei9lxD8BloCyiK8eOEAgVj9PzZPF8VdwvKH3Kg1QHRgxucHW2dnWegLu7BbsopxWxBjc3CpMpj0eiLUI8enYUoH0J0W4LQPu73s4eRuvRp8YAC5o+jakErECSpk/n0oYENmPbWPZLdhm18Bb9cwAw9ttTXMyJkZs2c29mF6WIeiRuHoeMiBYMzeeQxajLGbUivOJnH+F/RFy3xftxEZIcvRoLDmj6wkCiIVyjqEYGIbxIkh2jfAv1WgbuiVnDDur6YiYlKqa7tU/Tl+A5XHp2XExrf0dPq6bXvU7hRJD7wGBrT1sHgKj/guJSYtQhP/pShpGh+bpCW2vbOuUCDr0BWYga6O7o9jJciHrKF+UHDdHvQHT04gQ/x90dAwOtazu0KEdCBN6Jaozdwd2ROqcRj3mVXI0EbgJWDGBp7+iHNmIkUtvI9oA0G+HNaoUcUSNdFl3GsgRUCN8B9thvEmytm63mJPnOtZqII4WCJvhbJ5rWuY2aFkd7IVRMH9bGvgL/GyDpbHjiezo2+ErO3JfA2w3xgbWJKbmYYjo20y6xy9hHtOhIS0NiMFrwzLLjvWt6NFHH1ACqXfDcidRQ+xWLqSUMawnIvlhCchk2tNhbgwKkDawe/HYHwe0GULGTTOt9P7jf2MA1SXDx3QNAfUuX5Cs2LCkYcP/GeyuBzwDQ18ET+RtNS5iI8I5myWhx2B2Elxr1sBFH0Fd3yQtpY7cHhY76Z01vP/uMD7I4APiiyaY124fgOIkgAfui6L9ZfjM1IyBkMfKB7eTZ4Inv1MQQp/QlPgAACwBgPHcjTWykXoTfl7gMpDapaJwWZKvF27GxE/ol0acSic5ziM5GAHkHPGuRTqJsy83Sw3tGQMiIY6+Ls48kqVvjiKVzmaXBeCL7PJZZn5b0r+CUqEqw03EV0bETaFiaZ1oX+ei43EbHFYoO8mm4cg1XSAL2P/En6n/DngTsf+J/uGFEMYnbbSReLUnkRnMNdjV9eLUWHZ4cpFphWE3k4UD8Uw4HWtL5yUFZw8/uNPE0ixTYyM83rQeAlTgu/ySVH5bd9CkEArwwhc8whV1M4bOSwsTrAYoboIybgpneuCiZ3X+hsvHVZaCMk18ORrd09nxYFEHxo+H5FAkh6A8xZk1LCcJDW1fvQIe3tQvvDBSrodwgPAlNMN2YkxKUaSqgie/FJsh4JTyVkDmB6P1OIUq6IHhZ9F5k2fxKQtsOxf8BT68PxM8X8MdfUoS/XJbC6gNGcHizkH+XgXJNi0wdTZ9QNZuCWxhAL59iWlcAhnTCYAiWqpZB+ZyCu7mRSfXiElJXZpHoLME106VlX54alCVqzeMYGSK6Cp7HfcjiFbJ0HEFEgtjB+iudmnCi4DZspVMbThLciD3sapdMMPXhgSwiNEWohps9Lm00UrzUUYqZnO1AirPAtL71kTPFxzvlKxDcoyQ5hXZyinzkEP4Sib9dyz5/dPwbCXANExAFyJfAk96sCKj0EcAZq8TFaQEUVNspWKgo0KI4u8tA1DnC7xHe0+Yby1qEaARkuE+9pFl9GoUfiUlloGnrUMNq70TglnYu0LG6yLT6Cv4/trRxaOrsacUZ+39hU/u04H5HMt4w7sWPXneiv7hcvphXiNFn9ma0K8TM3hVqZu86eGbvCjazdwWd2bsOntm7gs3sXcFm9lakHnRubua5SROY+f/Lk1q3n1VzCn/yaLgD5+ZmQSR5/ljutt7eYzuhaGEiRXjcNMs1i8bpPMt1qFVgmGEYKFLpohUu3Qv0125DoQf4FZi7Yw/a6XcdvNPvCrnT7wq50+8KsdPvCrbT7wq50+/6f8yde3QdxXnAd3V3dvZ6NNa1rfsQfslYNnYxlvzGtI6NX5jWxG9sQxyZyAK7tmwhyaROoKQmnEB52GrdUugJpoRAkra8copznDSkNbR5NeWkBOhpoTmnLT2ltECaAwVc0/nm29372vlmyuGP/LE6V3t3vpmd3btXmt9vvjGSfk6Rfk6Qfk6Tfm4g/dxM+rkL6edG0s9tpJ87kX5uJv3cTPq5gfTzTNLPTaSf20k/N5B+TpF+TpB+TpF+TpF+TpF+7kj6OU36OUH6OUn6OUX6uSvp5w6kn1tJP7eTfm4k/dyB9HOC9HOa9PNM0s/dSD83k37uSPq5G+nnTqSfm0k/p0g/N5J+7kr6uSvp5zTp50bSzwnSz2nSz0nSz42kn1OknxOknxtIPzeQfp5J+jlF+rmd9HMH0s/dSD93I/3cgfRzN9LP7aSfO5J+biT93EL6OUX6OU36uZX0c0fSz62kn9tIPydIPydIPydJPzeSfm4n/Zwk/dxO+jlB+rkL6ed20s8J0s8J0s8p0s8p0s+NpJ8bST83kn5Ok35uIv2cIP3cifRzM+nnFOnnFOnnZtLPLaSfm0g/p0g/t5B+TpN+biP93Er6OU36uZX0cxvp50bSzzNIPzeRfm4m/dxG+rkT6eck6eck6ec06eck6ecupJ9bSD93I/3cQvo5Tfq5K+nnjqSfm0k/p0g/p0k/t5B+7kT6OUH6OUX6uQPp5xTp5zbSz2nSz2nSzx1IP88k/aKJ5r89Aab0nFU/W0uw4BgMDUkYSZIXwCsYGKqWqmX53e1QcJH62bo1LXhpUkbCOBCWHntzu4Hi54ptd2uKfzOiUq9wTL2AZoz7fQ8ofhTWsNwE4fdeMzzcPwBTcnSKswL7dv7Th4b2DHvs6Y4ijoANHzo81Kca+R0c1wrycYITmKJ/0GN/8VNEkcnuPfuGRo547C9xd6s3vtkaCIKpKjaD9kRHi5kINN93aGBwH+ShCopxQ/TpBaWjSH6TZgXlSjz+VoNC70f2q7r0NqgIunR8IwoNgrvUexNeVz8GVOBC0KXH9bxgxtn4xD91ePiIF8w8G1cIQ+/BrMklrG2kf2jAC2Z3l7CmVjgKLxuM98H0LrWjtVyq3SvhV/VWVxF+Avdsh/J+UmS6+qX4e6WmDqlJKwM5FyEejCM/pLZPb1HXOE4GN+3PEGaV9NThaRfg2rglPZQ9TffSaOSV/7dUM5qeVJD2nT9Lh39chd7YHUZfgvB6PP6CcglTI/5QvbVCvdWh4/6S7urRwQ7MkHfhsXaEBl754rJXP4Idz9m9XFcAwR9U299CBXrs1V+nB0pHVReMlDPHm2E8H956XJX7G7W9Xy278mbknqoTPwMfgod0D98KL2GktfxsU2P0xfU36sY8p4K9pbYLtqYBNySNKctKY1HNYLbrkl5PGM1S25ZqyW1xSey2K7HbAu+81U1x9C3k7/J7VABgAzdXg3wiqb6wVRWDk9Yf4tCbOKA5T39FL0U3LooYxJ1UhZ191xxIM9dUsYG6x6BffD89cqh/4JD6+GcdOrbh0L3DB+oPaGs44NrmGIWGQ4YHDxw+uL/+mHENx/T1X1t/wPiGA/YNQh62ukMm4CFeBZZL9Ta3AWuZO8nzji7APv1/sxbdgx/JinbmKYHxrEHrzMDcYfXGvMXABub/K3y2sxfA+1rNhMTM5etqkAI7U8Ny9Lmqz0l1/hjSm7WXb4YbumFvk5CFuy9V/xhtXd20W7Ob1TWuFu4GypNr2KeZTOCxGTVMZvhQ3/7+kV7M7RLkqi3cskH/5bLh1y7dWdPCeO/KbVt21rQk3rtq/YYta1RTPHZTcw2QYqN35Mig+ibJlRpL6qGNyzfesLC5quStxZ7vseeb4w4OHRo51HdIdW9uYmNZ/V9J79ZVG5vD4lvbVm9UYfmKXGZz1TPb68xNi3Src+fPaMGvq3vLkOLpJvySjnTqkFwXhMDEULCg1Iz3ce58hMuRebmZz8TT5sdsVAfCLwJetHnxTcWfzDXcLr3D/UM37OuDZKDjI2yU+hSeyVXb4Lf/SZyhSlfqF38SZ0wcGVCPu9L39KFjvNb6M1NPqAAqS13JsaXAa/hY1toD5/vw8f6Z2v54K8yRxlb17tsDCYffj+c7F+4JGpuPEsU8H5rhzQujd9T2ooow7kENoe+Jp2vr7vOXP68fw1vb6mJgrsMFr+hpzbsf4lH6tj7DpfjGCpjVLIPtqp7Ce03N6D84fHioPz33j2N75ofRYbXltiXtuSJuz/iJavfVamuLsx1tPBNPSPcmXM6a+gmToOiJ+Xt05M+poj9SW7eK3K7vG79vFs4mL+qK+u+J83lM+OvmcMP6D48DOtJzKgo8XK+uRtofR0JtZv9LDKel7/P8AbwQB7COg3Ed4yeo8vsWVE9mCE9mr1e9KZK/0mQA7SnBdRjz3+oVdKe+RXNeW+Z9ialtzvtnBqKZp1Oe3gLJ0bxbC/Dd8Jb6brhzZRgdX/Ahvhvwy/KjW+4098JJIL7fKv9iLXdau55p3LjqeqVj/qBHr1earFSarLuYv2IVZAdZ1oILGOa/wOMFDPO3nUOUzuMFDPO3446AJwsY5n/7XJwfJFnAMH/HuThDSLyAYf7Oc3FqkGQBw/xd5+LUIMkChvm7z8WpQZIFDPPHcM8kni5gmD+Ouzp5dQHD/O/24AKGPFnAMH9iWQsuYBgFqyD9xTbwqneoV/BCQDaUqV7rY9RjP5oozY99STz2W4/mzLoFHycJ3UJSuoVs1i1klm4hM3UL2axbyCzdQmbpFq1nc015FdXndOAauHknSz22iEOMCNF6N69d1bto4Xz1vWt4c8G8xQvVKTW/uX7NZZeuikUB9akPB4NM0YNfiMlr+By80B6vdjK/6DH8EuW1ogefO4iLPfJY9ODdW3AVXa5FD95zBHP+VtP8RwGcd9jFmk5eN2IO36xiDcDtzbecxW9Qjn+T8a1YWTtPbyi+bUcL3t1xz/Erj+bw5k6y6MTJQvl2PKfO9I04hyXfgW+o+1z9u6a+d/jOI/E6na1nSg2qSdAlm1UTSaomklRNJKGayCzVRJKqiTSqJpJSTSShmkhaNZEG1USaVRPpoppIo2oibaqJdFJNpFk1kWbVRBpUE5mpmkiTaiLtqok0qCaSUk0koZpISjWRlGoiKdVEOqomklZNJKGaSFI1kZRqIl1VE+mgmkiraiLtqok0qibSQTWRhGoiadVEZqom0k01kWbVRDqqJtJNNZFOqok0qyaSUk2kUTWRrqqJdFVNJK2aSKNqIgnVRNKqiSRVE2lUTSSlmkhCNZEG1UQaVBOZqZpISjWRdtVEOqgm0k01kW6qiXRQTaSbaiLtqol0VE2kUTWRFtVEUqqJpFUTaVVNpKNqIq2qibSpJpJQTSShmkhSNZFG1UTaVRNJqibSrppIQjWRLqqJtKsmklBNJKGaSEo1kZRqIo2qiTSqJtKomkhaNZEm1UQSqol0Uk2kWTWRlGoiKdVEmlUTaVFNpEk1kZRqIi2qiaRVE2lTTaRVNZG0aiKtqom0qSbSqJrIDNVEmlQTaVZNpE01kU6qiSRVE0mqJpJWTSSpmkgX1URaVBPppppIi2oiadVEuqom0lE1kWbVRFKqiaRVE2lRTaSTaiIJ1URSqol0UE0kpZpIm2oiadVE0qqJdFBNZKZqEvaV64ZncBmxSnAR12M1c2GICUaP4C298Ez3sngIC/aADxD0jMZjrIeH+4dwWmQwD49qre7DY+fjsYWx+wYGDw+pAxcM6vTZvGV6+9i9+/bsgYMW4r4Q1rVqXNAyWHEE5qAHgOXbNBSCgwtQXQFiF7YYFrQM1j6pC34DCr6YFoTz02UK0BFYOgrgrXFRxZTWojj+ezB4vQOOACFmTEW9gMbo8dtj3oRmMyUK5qlj8nBgeKKSYaawMk/NlLB4IUbW9YSlExXs8thMCcs4Phjx1K4IK49X0BeJgvugopdVwQmNzCMKTkL9YzvqRy4T5l0Iu/TApBfOmNKBl13LDOFM/DXgICiEs5Z3xGPqoBmEszd1YM1tcBT2Kgz+qZZARW1L6/YW4Ff11uIK/OyC1UWhvJ8UWQPLip7uyOr5Olllsg4JsOUZtX1hW1VWmbSspUZWmTTq1cgqk7b48fKPP6+pAsaDe4f34MptkX+S62MfwB71uNYt/ujn2AWqie+pV3lof/HEeU3jr7GrtP+GYc//im7jc6p9ry8Mo69DG3GFsy+fwDVIS/tvgJwBD9+Ls1dL1+4bAgD4iB6iHf1EKR4P9h/BZreWcTWdr57UxfeW48ogxtf6cB42XH/1bh5GXaMAOrL4xnnGZaRalugmvqma97FFYfRP0EQ4+ZYl+uRVC4fVa+zQwCtuq5mw3Xd4eOTQgOo2WMntmzrMChWiV23iShUGm3q67mKcji9GBTI8+Kfji1HWs4S/9WI8u7X4bE0tcVv1cnHv6Up2qwr+UW1Lrozb6r8bt7WczuSFo98vTAdYevziKKp9AxfbO3tOr796p144tnNS01VECNDp6xp/qmqbsiSM+lSN552Clk/2O3F290R9b0zx9c0xGkzU7ZnqY4MidQFmquPyN8Nqu5+fZFyCa7GuplNVcYvajqUntiC5CLqWhXElFd2ERdiCyCu21Mwfh3b34pJpV+EHRAVcfHEYfTMNujPpLVho7Roo3DI6WMa1N3ft0mstPABZNMoY5pPedNh1p96l+653VC+gcZtOtREF+/ViwDVtgIQdmjUAv/P85T7UsUK14T/V9m/QDqzsYzdOjlcq0yvArduF3Fm3a81+3ZCv6FpHBnox1Fps3kNxzfBbx0uTa0mZfjz6Aq/bm6q+M0vDaML25LpF9dctX3/dxqTXrbhlSuYDKHn4zMQPtoq98ZIwWq7il/SCXefrb8tRrwKPbX+6fmyrj3XSrq74hscLMQNray3Dx/eCe+MMIB2PTmm6TzSv8ufjWUGN4lfCaH96Vt31Z9VTf1bzqmc1Z2rDMw8v8QA+nVXM25eF0T3bkzvlQO2dMlJ/pwzipfifmjvl+nUtsOul6p0yhHfK8/p6FZ+a2vTE9fy/wrtU1du7XF0tVTfe3mfiU8Jb/5n4jLBdz8YnVK57BH0fH5qHyvCrfiT+IO7T+Kn5w9MdOO2/o7WzsYtBHsSni2rF22p7I+3dtfW9e5m/tLZ316W927Ghs0lowcuHduI1WIG3IozGqG3ijqSC3f6ReGHnjt8xhUCncC+GKKjiy9R2WRriumoIf5ohhD7LQxhhhSr9X2obTiMMJBHwLA8mZzlJn+VgfJYHJusH9/U+1AJ3q/o7DJ5tm2sq7b8BNBH4VoI8Hi0j+FFUlU2+NIxO7ki+YIY3T8MLDA//luHBIAkINU25x3QWaDbe5PudKtoMtf0gPYUbq53wWk3xeh0Rr8Vx7IYeVb5Xbe+kMY4lMfBER9MT7Vh2vikkXpv74vtHhTumtuk7k5D31of8w2rIJ4wh9bV6CCMeV9F2rwyjDWnEB+uv1ZfSawXrgetdX/YX6+u1G+t8OK1zCjzNs+vEnn3S96EyEFk+m1b4RP0pfD0NNwa+Y1NvoeCN6az9vc2bardHj/obp+v1l7xcFOWfUs2e6iCSnk5KFVQprwdO1useDxrOIvWU2bU6jI6v/BAazt7hj0LQ/HtDGgzcH7zuVS8BCLCaw3tBsIwl/6CtU/+7aZmjbg86HGHwM0i8905NFo3gx0QWjdw4RmgdjNI6WLPWwbK0DpapdbBmrYNlaR0sM4vG2uwsGrk4i0ZuzutNWTRyF32QkUUjN3dtfRaNXPeG2iwauZ5NzVk0sEujr7bUXyndhkm5XfnYrch98se4Vk9eL/eILevFlrXnU78it/tP0R5qzMsRvfBwQ16OYF97gyzBu1izLMFIWYKRsgQjZAmWJUswUpZgRlmCUbIEI2QJRssSzCBLMLMswVxkCWaUJZhNlmBOsgQzyxLMLEswgyzBMmUJZpIlmF2WYAZZglGyBCNkCUbJEoySJRglSzBHWYLRsgQjZAlGyhKMkiWYqyzBHGQJZpUlmF2WYEZZgjnIEoyQJRgtS7BMWYK5yRLMLEswR1mCuckSzEmWYGZZglGyBDPKEsxVlmCusgSjZQlmlCUYIUswWpZgpCzBjLIEo2QJRsgSzCBLMIMswTJlCUbJEswuSzAHWYK5yRLMTZZgDrIEc5MlmF2WYI6yBDPKEswiSzBKlmC0LMGssgRzlCWYVZZgNlmCEbIEI2QJRsoSzChLMLsswUhZgtllCUbIEsxFlmB2WYIRsgQjZAlGyRKMkiWYUZZgRlmCGWUJRssSzCRLMEKWYE6yBDPLEoySJRglSzCzLMEssgQzyRKMkiWYRZZgtCzBbLIEs8oSjJYlmFWWYDZZghllCZYhSzCTLMHMsgSzyRLMSZZgpCzBSFmC0bIEI2UJ5iJLMIsswdxkCWaRJRgtSzBXWYI5yhLMLEswSpZgtCzBLLIEc5IlGCFLMEqWYA6yBKNkCWaTJRgtSzBalmAOsgRzysvBV0BKjDC4FdJrnIT0GjDYJGEESD4OrzYY8nLwtd/QBb8NBV9OC34/KSNhHAhLj42KRg2h7VXIc78jKsZ5OSrqBTRj3N06L0dGgowwmKeO4XBgdKKYqSHkazWEOEHGq6gh1CfICMsbGhNkhJXH4wQZYXAfVPRyVoKMMDgJ9Y8tGTWEfKIhlGoSZoQz8VdMmBHOWl6bMCOcvSlJmAFHYX/C0J5qCVTUurRur4Rf1VuLi/CzCxYK2KQTZsRF1kAKjSdK9eN/CA/adRQYX/53tT2y0/OKmFphwqaYdadjhX7xiRJmbFe7PL/0bAkZfRhsb6npF/1mGJyCOseX6+tEujBH1/mmqk+sCqO/q9Z5YU2dnn8RVjDitY80hNFEYbGOUlARXlXbB9UoC+MoRU0PFi0t1dC2JfqKjh7AGi7GGga99qfLBPPRrVV1TF4dRhdepepB5vN0vMADMh89MKtChQFUUa7VbaDJCCSu8DtVDBjR335V2t71dWf98aRNFWNeie1zKxoXdOaiiD9VhEXaAep5n4K0Ov6mTs8796thtHv1h2AG1360M3f5C/fDmHBQ+QWeuYuNq87UDYPNvvqsr4Yx8+vUD3iR/2XIjuKNuaSFYhOCYBOCYhOimU2ILDYhMtmEaGYTIotNiMwpp4+a2ISM2cR6pAKylk1c5+MiK/Vs4lF8gMqUTazEiZ8yZhOnWhomfoYBdGjrazVNuLY677M9t0cmbKL/kpZYTru9kSmEXaKZKQiSKQiSKQiCKYgspiBIpiCMTEFQTEEQTEHQTEEYmIIwMwXhwhSEkSkIG1MQTkxBmJmCMDMFYWAKIpMpCBNTEHamIAxMQVBMQRBMQVBMQVBMQVBMQTgyBUEzBUEwBUEyBUExBeHKFIQDUxBWpiDsTEEYmYJwYAqCYAqCZgoikykIN6YgzExBODIF4cYUhBNTEGamICimIIxMQbgyBeHKFATNFISRKQiCKQiaKQiSKQgjUxAUUxAEUxAGpiAMTEFkMgVBMQVhZwrCgSkIN6Yg3JiCcGAKwo0pCDtTEI5MQRiZgrAwBUExBUEzBWFlCsKRKQgrUxA2piAIpiAIpiBIpiCMTEHYmYIgmYKwMwVBMAXhwhSEnSkIgikIgikIiikIiikII1MQRqYgjExB0ExBmJiCIJiCcGIKwswUBMUUBMUUhJkpCAtTECamICimICxMQdBMQdiYgrAyBUEzBWFlCsLGFISRKYgMpiBMTEGYmYKwMQXhxBQEyRQEyRQEzRQEyRSEC1MQFqYg3JiCsDAFQTMF4coUhCNTEGamICimIGimICxMQTgxBUEwBUExBeHAFATFFISNKQiaKQiaKQgHpiAymULr7GLWBMzwIgljNeHc13AYRyYTMMPu9fFQUjIBM+w5jhMwZXUCZjhvfTySVD8BM5x/vH4CZrgAxqDqJ2CGC3Ff5gTMcMVyPWa+Rv1s64Xc1HBwAaorQOzCSsMEzHDtb+iCvwkFv5gWhPPTZQrQEVh63HdNzCMojh8HUxh3fDdmHtFL6gU0Qw84Zk69DIO3AEXAga1bSxnMIyjLlHmw4n9gZF0PK21F5CCTXOVlHKGLZMo8WGWwlDCPq9QrDuc2oZl59AKF+JGJebAuPTTosRmvIPOQeuSfzXwlbgCM4LNZHyDzkHpwnM0eF6/M3AZHYX+eQoABFbW9W7e38C4yj7f1ZfgXoA1Q3k+KsDJM5Sg3jiwi9Thfx4ER8l9X2y1XpQmlp51Kkmvf1VQU4cVsXXRQFfui2h6rFp2VFv1JU1ENLHp0yQdUqT9X2z9US849VZsKu/vdOBV2ubXSGAcpwmL/OyrAs2rjV6dBFiXVVzaqYm+pJiz010qYIwifM/+y7fEw7kiyZx3uqcjh/usP9x+EKV2X368/Tj1e6x1NVcfTST8jNUf57B04nTS5k/wb8U4KVM/DDVSc09EYIJ1L6vmf1z3xnDqBN9aE0YKr06mkn5vTUTuV9Ld6i3VTSY/qEebR3elU0ltW4lTSDpwUdesSXXwv5lz/P/bOPEqq6s7j91YVxe9WVS9Ad1dvQkMQUVEYXHA7Tgs0ILtsDaGb6q2gG7vpmq5uljhRSFwmog6EGWUIChpR1IxR47hEWSTjoOPMcUVDMhPNZCHHmYzLaGZyRpP5/e6979Wr5d33jsc58eTUH69PveW33PvuW/p+vve+G1MKUNXWEy656cxKC9BMxaOGf0MiS6qryptqTENKKeb7mObls8KQWG0PKVXO1ZBSeXeiIaWja3NKzfhu6aARjY/NCcP2zAm7fXSt46zfoc+6Sv1vlPe2GlUte8bLQ7t0Mb+1WI6HWVnTnWzvostx71m4P7jzo2v1FjUs9E55Nnd2YzEP0WC2ELUnuKTWgTQ6Wd36WtVa+EJOUV7BJG+9MgxPYqI6+iKyCwc/UQPfYnUuJ1YPWF4ry7sDXSyeG4afWRXGO6wKk8XtjKnPLquRhl3vqln3q6yJGLWv5Hx9elUi6ybp06taR7dqHfr89mTO70j6KDPdF7KG+KpksbHjPaCT8RaZJ+XYg0tZi90GV6vKRuv9dQYoKO8CaHknLpe22APBtlc7B4I9rKFg5dt5iSTTne2pJObT18P4MXVrQFdP4bKO3G1m/LmZXA8inlXvUunpdiIwhF/4i9LHUbQn+rerJTOG/LiqRj1s+fiOzBhyeTN/YboeRm6aqP7SDfWSOU4h5riRbr1vys/2vk1f5OAPj2VszcIwsHmfZbpgOef95wkd5XTBE77I0HFCHnSk0bTDmwg6nm2EjMIAGYUJMop8yCgKQUZREDKKfMgoCkFGUQgyRva5QcaohowL1NMp6oSMK9UTJZoNGfcpyBi1IeMM9WoY1ZDxYD5kpAqN/No5CbH6yoJMojrYE7Uo4/qz1etpVM/7GrxaeatgcEs+dhT52FEYsaMwYkdhwI6iEHYURuwoXLGjMGFHYcCOwowdhQt2FO7YUfjBjsIVOwov7Ch8YUfhjh2FO3YULthRFMSOwg07Cm/sKFywozBhR2HAjsKEHYUJOwoTdhQ+saMwY0dhwI7CiB2FCTsKv9hR+MCOwhM7Cm/sKFyxo/CBHYUBOwozdhQFsaPwhx2FO3YUPrGj8IcdhS/sKNyxozBhR+GKHYVf7Cj8Ykdhxo7CFTsKA3YUZuwojNhRuGJHYcKOwoAdhQt2FC7YURTEjsKEHYU3dhQ+sKPwhx2FP+wofGBH4Q87Cm/sKHxiR+GKHYUHdhQm7CjM2FF4YkfhEzsKT+wovLCjMGBHYcCOwogdhSt2FN7YURixo/DGjsKAHYUf7Ci8saMwYEdhwI7ChB2FCTsKV+woXLGjcMWOwowdhRt2FAbsKHxhR+GOHYUJOwoTdhTu2FF4YEfhhh2FCTsKD+wozNhReGFH4YkdhRk7Ck/sKLywo3DFjqIAdhRu2FG4Y0fhhR2FL+wojNhRGLGjMGNHYcSOwg92FB7YUfjDjsIDOwozdhR+saPwiR2FO3YUJuwozNhReGBH4Qs7CgN2FCbsKHxgR2HCjsILOwozdhRm7Ch8YEdREDtGJrlgx6jCjr/W/ToZ7LhAdy5lsKOe9zXqxI4LdN9SLnbU877GbOy4z8aOMRs77jNhx+kSW83BvyUdRA/p4FIKV0q+S2e4YsdrpOE2MtxvG1L5pE0pVYSyLnvJHTuWnyex40saO474Mf6gNEZe5o4dPyLsSAdGmgtjx6gDO/6n8izjDKtqVtQvamNH1WcHUQd2TNvYsZWw4/7C2LED90VedceOUY0df6qwY1Rjx5/qBBR2DMRVdI0dKzR2LKGjVH0eVAyRApV8krW19BOFHX8rT8Mpwo5kzy0TIOzYFc/ra1TcsUo6ol7yybgcabFhUOVBRe/ilxPLiHfFLZZBffqVj+f7UzByjPQ3BX0lcPn3jL/RWf4aLH+Vp1XneZKU6kzpqA2dfG1+GOKttqMzDjrZ5MRPFKWqtidnO+u3Eru0qUBn24G6qw3shGLtwDiHcJnRarOT7ix2ss8eUEVNo+bx/MwVDZ3Lj6Kb/8ClP5P2lVnln2entaImz4tzjttWmdr76EssDMO3WjNQaEUWmGzpyAaTrftywGTrDEWuqh2T2iYmSaPuallxbaoqe6slHWtPV1mlbSE6Sd3NlQ8ZuSSFLMcsibsctytxWtrBJRdoLllr+rzwkjdqJNlpJLKzhVr34XFEdi6sIrJzAn9/Y3kY2hZ+BrLTmVz7eWKdvYR11n+Rsc76PKyzmLAOATaY+MeHdfZ6YZ25BbDO8oJYZ28u1mnMxjoH8rEOVWjklCMF+jC2Zjr9NtNJTcxhOn92wGI6NxaZTpHpFJlOkekUmU6R6RSZTpHpFJlOkekUmU6R6RSZTpHpFJlOkekUmc4fkulMMDOdU3lMZ24e07mtANOZ68J0bstlOnsLMJ29JqZzmWQCRHZKWgjN0MGlFK6UfJc2ujKdIWlIZKdkj21I5ZM2pVQRyrrseQPTWSGZzvMW0zmBPyiNkRdLphMOkcPIIgc7sehOoj2dTvZ19OKPgXVpVh4+HN3UP9CVZuEjHYqjlDeR76ONuoJ1R3Rnb7IdK+W5CZWqlvXmrp6BQTxBxyboyfMK0qRugjyUTOQFb5pkZbFC0qQXFMyROQ2LN+ajpJ/bKInGjQ3fUxglvU7Bp8c9UdKSeBZKUqsWSkpno6QbLJRER6nTeEBxIQpU0pe1tZRWcVdfFf1diSsVN0iUpE3kpyGfrc7u39Q1lBjckkqmWQgyPWkzmmYlZjUnFjYta160ZJ6jZzJ7B/VbODom9U7q9qEdgbwdi5bOn+bol8wc7+iO1BvxQe38d9nRK6kPwPc2R29kZqMMPTxrB90qHN2P+tisDgNHLyTtpv80IyzyYXVuh7BqRnbrS7OJ/Jfl7cSFTn2oP3k5IkB4p0ZfLAIrn5pm5ZKabF8K4sW4PIdERJ7A5b8y1CnKD2jshEczXsKX1FhU5yHcUX1vAX+OvPhvpOOj6PTCRWEYs4axmp/jygRcqZ1PCf/PvdoheqSWUflRjkeFBatUho1o14/LvDUZzpidYdzOsK6pNie3FAvx8dkNZfnCeQsXNS/MaVsrzs9pT/i2FmD19+U47G7vvJqV87P4aU0SFXJ15bLT6Krmk7i+rEcrSEzx+Tnq429fgtGSLtCmc/WmGKtM1GUHkCDzfFX0FBb7o8Vh2JQp+lSr6Aplnsf71Hcq43QpMX4B3y7Xu+QX7C7kLQrWjZENZRrvULQuLkvBL+JNcpDYsrgNQi/mffKQmapmL7FqNi7vqfwyTug8uPPx61j1g6ZxZZQ9uyoM5+Dybcy+QbHRB+V4Odag2Ohem43SvW7sb3JqQoHRNs6noJMWXF7OVEMiuwW02y2gcml9TgtIY41vvJDxjbrBo6PduPzvGvuDmEN8rnNo2RC/TY8to/NF6416aFnlyznO8U7dM5DsVCf1VhVgPzq/bkkYzkhYnyC8mZ9SyY6TbeZm7S9URedoO5dPGDlskKJt13tjVeTzFv6y/NJdOVYSNZnKttMKZ0Bf7ZLht2Lot3BZaoffmh1+a1b4bTnht1nhdRv5Om/THxm8uoOOv143qUEabo6tp/JXLgkl0gOdsloeUHm9gznVLcWqsfO6Pzuv+7PyOpiT18GcvB7UeQ2yyqtHu2RgX26PqRQaMPxqXB6yU3gkO4VHslJ4NCeFR3NS+F4mhd/lpECvRWv7B+iNrmcDXlZHdNvD4B/j8pZOQA1hPmQ3P+uVDzdZTVB+h/UwP6Eyicusj+qsUzXXoLOTuMQV3/8Bp0RoNls8O6Ex+NZAcLDy1jEFHybOe/abKkG2LAynLQ9DsI0pAQM/wcmaLjQZ+i0dujfew/gP9c0mNUbe1k9ydV/vjqfaBzu7Gf8R3yPvFgevwXRo39j3cjKh24Uzjd9x3oDhCdVPtlP41EpBhfm9DiNTYAGdAhvBGhgjRP0levilQ2x8VqBNiQ3JQXwfxPMWH99AH5plB4bDcEpoxCVOyzHBPMuu/nTvNLzXtki7rQ+g3Zn4c8SA0+7WgFtEsmd81h5pvf87aN1O1o84rVflW3dtQKvmV6RV43fRah9Z/dJpNTJYyErF646MlfEeRcsTZNkw1mE5O79+elL4JB9M9vb2rFPj6L86X3o4+jh6KMOfIzrGmjNO07V2+9ekVcPTaHUVWe12Wk0OFrJSGd//rLTc+gxa3kSWrzktf8izLYcGejvxynhf5XgYbZ4jm/A4h82F+Tl2Dw6mEulk59BAD77e85emjJO1dBTtPyb7Jlyny1G/QmWZyyfkyQ5p0UY6kwvw5/jsR5bdlD+8WXm+CCAc2oG/h9OrzunOo7MELN382XFSwfIX5PldUrBwur0wmiY5xLeNZ+yB5jDsWP4ZFCw9qbU9mz/3+ZAPfJE1LAcM8yF/E/+EQuOFQmsZlChFIix3M/7HIft8Lqa7TVaNJqzPCSY2JgfSdBZDE2k6ChgToADnak+yD0+yGdun/JKk+275WUn33UtnLFuMDSMnmcGB9g3pFFagnRYLnfcUphM56VCXqGPl21x9aHp0B1XTDD05cnQTrc3Uc9lED9Fak5pMA2L2v9l0kxjA9z0WmqX2xaLX05Gz79JdD/rjmXPGKIVKzK6cK7+p5upgJd8J/tGpiBpCLiqiWPYM1DGniuikrKJQLFtFRK6oynNnoI5pFdGZoTwVEVVoRAzLPc8yh/ODQzFLR7SRDqRTTSc+uEnlVCFPfHCzWquOFWhJwS3qbNbH8tp88CvqtDZkmgg+tslFH/5faLeW4DWqfYyX7Sr452ptomw7wa+qtUlYEZ3tA/qWGLzWmsil5GBVUeNU1DgVNU5FjVNR41TUOBU1TkWNU1HjVNQ4FTVORY1TUeNU1DgVNU5FjVNR4/SH0zjla4gOSzHI3+PfUjkLMvVolVH3UhlN21nmPh31f0vDT8mwPm4ZUr+WtCmjfiBlXT477qohij4mNUSz41oW0Yw/KI2RhumoU/TVTjow8nq8oJIn5lDyrNdimsekkud1paWJ5U5HHXOIed6LW2KekxSIylZAzPMTir+g2lXME9NinlYl+IhpMY9aDcWUmOfaaqvDVop5dlSryKWt1VZ9Uv8hZkKBSjdnbS2jVdw1RN8WDXXiSgXZc8uEOuvgNertham6f9oS5ExfhY+QRdg6ltg929Sv5dyOLUV1S3ZsGUwm+gdo1l+Ydjv5pDlxQzBdG+KC94T5TQtnL5uDK03zZ9o+V1yx5MorpuMbUdZe2/PanmRvl5QVMZj9LnqOHEPPal9PMtGHLZSAbDmsjvUmN6wb7GbQ+gRTtYn7e7oYrFHrgViSui5TAz3pZGLDUB+DhOqODMWc6be9pqvbGbl9klZ3RObW5vQKS1BbEaqpTA0k20mtxgL/zJVjVkXtKfAK1w2q0u5P1Rg58CpXXbSQ2WW3ysBrXDXLWGV3+4YucnxCOy5n8Tdqc7uGlQroy/LcE1SauiIMq9sYq1YCi1Wyk3knq9lD53/1G7VqkmIHPuAtsyUKXqw2Mt76rjxofm16sH1wCA9YIzuyd6br+ocw1KaJGAHb0OSQo+1r03DoR2gbP7suN0ulBNoms2xE+7m43JTJcqvOktUP5Jkq+chf8cVocisu38uY7dJmVuZ/rTJPsfjY+lw3Uo/ztKom9NLfHIa3M56e1J7UaPinNler6a9lpX1fVVqXFeUZFaW7NtMQ+LPHalQdrksO2ieGdhz6iZ7226rMw1mV+WkS82CnrXGmSzKsjOvAv3CewoMIGkbbGRuttv6Yr6lXVRYOUewRg7g6s0bfHLt0lSSsKaz1BZNmsHZ3PfHMd44Nh+Fd+HPE3zoN06x27QUJxxVjG4pxr0rDxhfR8E78OSa7frMgaJj/Xk3QvJsg6MekLHwlTBD0n+j+wN84nbEPVofhkebPAEH7kn39A1s+BwqqCaOGoYE378MsQ69L3hhwIMhALhgNFASjgUJgNJANRgNOMBrIJaIBdyL6uqag4dA8unHYLHS3vJsniIjSjnBolfxL0z3A3+GfzKzWgwNdQynG6zhN6kz1HlsZhmnYnoTUrtSuUtKViFRq1DdxJT8BEWBZNZ9ID3WkOwd6OpIDiXR3H95n+fmcDipHdxfg0kkuafN5I5UiJ9I11NeH1/4Fu5kS2QQytIsml4luCzif032W2zOk20Z0uR+Xv5SZdvet7W2nW9YEOeXNThVpgooUir1DV+uEpUrkFdF+JqpDU/i8yy1LaqijtyfdnSnKpTImxXsel2esolyii6ICXLJUz2MBE4I5DvFiYfwK6eQVdHDGqjCcspw0WinLGm5cr5xE2ru6sPqnqwk6UqykNdfn0AbpdQGfgt7W4DKqAz0qs/nKC57sD5xmWBrGl3Hy2YYGNV8Ow5+SkXpULBVqdhCRTq5LUOPHTbpIpbKAzepMpawaXKky741sVFFXqWS7I454eHslKdVyuoaGBe+9CICVTXKQ1L72XjwigdWNlwW/tlwSUH7dpJCSUiv93tapIeurDVSeEVfgKjVrOQ8Qi95T2J/+zfgNssQNWNpuXK6mEst4/Pp7Qo7zd70qXiiCdzl80eQ3yiSkfJF+jSoZVjiMlETicyiFzr+Pyx2ZALt0gAh98AAfQ8pjb8UteNgBXCKquLutSKxsTn6QFF0VIX5PufL57ey6uZcsqG5GNA9z1grcN8zZYDKuEhuSm0i0R3VyFHP4PS4/wJRVJRxUlcAiMip/kLyoOqDiQyzs4tSq6yelX4b38NNxeY/8/oL8PqHaho7yhFXVKspTKsogK1nt5n8g2ZtsTydJKjcFHa/Hpa7Tcn5IO9fujlhJVxZ0Zd3yXpDXYwo90SNntu3tH7Q3kR7AAh1XN8CQUBrB4136LiJlfC+qcnSpu+M/qrtjN2MPjaVnGqujZ9rxCYy91I0P85bP8EyzXgM/P21P4M27SdvzgdL2OB5nlh7n/0vu41/no5OjpxpNDWQpfIZ/NDJHJBAcD/kiATCKBMAoEgCDSAAKiQTAKBIAV5EAmEQCYBAJgFkkAC4iAXAXCYAfkQC4igTASyQAvkQC4C4SAHeRALiIBKCgSADcRALgLRIAF5EAmEQCYBAJgEkkACaRAJhEAuBTJABmkQAYRAJgFAmASSQAfkUC4EMkAJ4iAfAWCYCrSAB8iATAIBIAs0gACooEwJ9IANxFAuBTJAD+RALgSyQA7iIBMIkEwFUkAH5FAuBXJABmkQC4igTAIBIAs0gAjCIBcBUJgEkkAAaRALiIBMBFJAAFRQJgEgmAt0gAfIgEwJ9IAPyJBMCHSAD8iQTAWyQAPkUC4CoSAA+RAJhEAmAWCYCnSAB8igTAUyQAXiIBMIgEwCASAKNIAFxFAuAtEgCjSAC8RQJgEAmAH5EAeIsEwCASAINIAEwiATCJBMBVJACuIgFwFQmAWSQAbiIBMIgEwJdIANxFAmASCYBJJADuIgHwEAmAm0gATCIB8BAJgFkkAF4iAfAUCYBZJACeIgHwEgmAq0gACogEwE0kAO4iAfASCYAvkQAYRQJgFAmAWSQARpEA+BEJgIdIAPyJBMBDJABmkQD4FQmAT5EAuIsEwCQSALNIADxEAuBLJAAGkQCYRALgQyQAJpEAeIkEwCwSALNIAHyIBKCgSEBcN4qxyTWMVQfPiVD3TPDc5XrYEeDW4GTaT8OO5tDalF1q2FEkM+dJ8E/UEbFI9pwnwam7suc8CZ5386jcOU+C56ttcs6TcOgGXCmRnUcWVMjVMAQbHxhFSOS7+Lf0RbIlB2WUQhnFK2ty0TAEZ/2bNPwVGQ6vsAyprNKmbNcoy7q8tcI0jYnswI0FF0SbqUYWNqnaiqSHOjuT6TQLLiJzOQcx7V+8S9YOEVYKOOK2Chd9RLA5miaDlbdVKH3EyLvwBxVx1OVSH5FVqMwoZpr9O7j9iPzg8PP4t/TtivxaoW24n0pb3lzpPUlL8HC0nJI58nClnp+E1o6qsoYiWVO0BJ/TRYxkTdESPKY2x1j5wwUiYg3WRTr7hzYMMj76bgXaI5qQ8zFqQyjaSLOHN8zWs7DQ5OV8bIM9AcvjNKcNFae8odDEMwoIlPMq2a55XLfrCA0ir35RNeuIRVQlNqu5TpfE2iq7i2tVQ46xkZMxzNMYr4LOCKu8s+B0N5k52ZvkaaAe5GZc0p2Zj+bOlIGsmQ1m7lL96nFqUbxJ9UdD9Vm0NvtOBZyxuNRqa1bFWX4/s336GF8kY7ZhvPWtYdhHMZUsYMGquBowLoOoZrszVNvD+OK7VXe4CngVhQnsXFlNDYAveVjNVFFrNW++9GaZenPdHRijEWPU2tMn8RY1Ff7ianmmWvvj9qj3BM1Q8wvZSEkOUUKdwkrPUkIVWv5WvEBVWgPi5RVXzjdGMNlNb2mRj0xv87/qCXOqaG3LXRWqodCFxL/yM1vcc7ds/c3/x9y1R0lRnfl7u6urq7vn0UzXMDPNDNPDG3kNDMMbGR1EkOEhSIBobJqenpmGpruhm9coanQjLugGNFlNggtKjI8kyrpm3aPRFc2JcT0G3GzWxRdoHi4nHiVi1ux61t3vcau6uqcZzyb+sX/UTN/v3vvd3/e4r6pbX1EgpLPYZhwKNqbry7ZJLnmLzIJod8D1MqiwDodCeYMyWh0OhfJGy2ifUfQGzjPqIpj3Vc6rqFuJqZtZ10HW71+k661ADf0ApXFUwwWdSMivywMA4Z5rdeMTG8a+Ihj7i2DcXgTjjiIYf1UE4wDDSA0LA/NbrmUzCnnPGn4YMmyORUZH/jb1FnzSJRp+2VDOAZWphPw++d8RqPnzqG6M7AbU1IkftDyeZgkKJUHWAuRkrYfJWgcNji3wyC/p/EUFuucP2D372CF/+BYHUqkniz/KPFIs09/2U95VTT2xJEwebzwTpZMtWGP4yHA52PwQ8B15EkrWb9CNFd3cX4Q8wwgEt/ruW9Y3Hm4KlzMXP0X7PckeAT4H4Lqum8KikDudYxlEHXE7x7y1MD+u/egu9Ui7eeKwMsy7MxjsRyLLm+O68SCwjeTwTIbSaASVGZBd/M3zFrJ1hVSDyLDvQrUUVBsBKIKqyjUjQ1D4wZhuPLMRchIYvoZzNozoTvQUkt1iGJag+lBqiSL3Ad5R2J50TDElU7CuoTC1e53nf3KxFJ7YkrNJTweA62m4fkE6F3LWMuuD5D8uqtSd7MXn3O1U6QxU8Hbrxv+oSu1WpdETGsvpjsdxITdKqh6EqmG4JiRAieTwGyR7vGjBKQ6SamBswdlbxuRd3KFa1nKScyvEmP5Ghz9ZIyBOy0LeyW1FoJ2dcK212zpgtRXh4fKg7G/kswe6hiPnGFeTg2lhdcAnG+LkCfcx85uA8ZoEdFFg3kId6JDkHsT+cFi2NDn84YjlDyPUN0XulzyMbx4BPeyowpUSVViLFw8IqBr7ffW+UMGoiHDMiaZyfckB8scMcgMAnNGjG48hSBoFnpQ8nzDIp4pBPl0K8hkFshdBPiutoelmYBsCtiNIqcclTzqpsTTpPC8zqquK0Z3Dy7hEaQyY1xlrBzB8B643ECuNs6esDtaymJNqpGVbnpKnTQYL2M4obFkx7vDwcus7OneV6FZrR/mBHM/NQz/+UGIVmNHGx7dkYWyQT1FSG59Mdyd24aDCMx6OZAioCvPlE3aXwz+Q9QBQR29tHqxx4v8Ji3sORL21F/pSD4hLg+cf7PGE1iR/sMRlz/8P2zY0Pv9RWSbOSv9PluFg94h4HiB/Krc2s6kqoIl0L44euBbj5ZRwMWdaF6CJxgyLlHd7xi1kjYsHDGD0W7jaeiyfr3RZPk82qXKtUZ2X+nKVS2GO2MqudjHQiggpI+giZR8MRpSyh7hI2QfNsaSTkKtzOA94o78XKata6xl4NLErvy2G8Z4iDPYcAO3u042oreDhriIFN7uKFNzsKlJwi+sJnhRGqBXjCBci4HUDZo1paSmvNAuRkG2MJAsonoBrv6221mK1TS1W21RbbarpaUopMOr1tJTr+XhI0lq6z3VJnOuegwbx+MST0GgkD6qe41I9v/C9oELoCgBr3kdHjR6aZRg1d0MruEBUG5+xuD2Ve+XDHFPGbRiVGIdGRDFmgljVhMc1Do8DxindONn3JxzX2Li95ws/f+j+16N4/vCGhtLzh55vOA/yOb68lMjFY+TuusQiKMmUzbrxK9Cgriyh3cvzh04epH2THci7n76xdIytpjMfIDzPc5VB34DynqJUt5HLx7aBgxnMqs+Ib99mp1IGrTp9nMr69sD/cZt04wRcRh92kCmnKWujwCSs+rqhoUl4yM3jXnLWaxROA/q1o1Ay8JDjfGOFVomQSLoqzBB+7XHcepeeuPdrP8ON6ofwB4sNwR/S0mVNh2uwD1ch81ZQ2w1wVfeC6vjDVaeU4vDDVfeqA3+eo67ylsjFMO4HBv2QS4nhTcDsWbjm9hZssaTIFkuKbHGFsoWoOVMClo0TTWfSuAsk5s8B41/A1YvMQcWdD6kljWeZuzw+3nfL1VT9DFRFz7/Lge3KImxXFmFbpbCxW1x1Sk1cQTSire2gCGDj4qfV2MXah2MXy46HUWenbkRS/4cuBoJG81u2fJEHofDwlvtow//jIEcMzhWN5pNbELN2z3jQKR6MuspxMMqlct3L8OSf9zD8QUoum4gLw91v5HdgQCzhvm4e37dAQpoo14+X1sHKBzAcFnKF1nq6YcbMbRb+meMpvBA6rn+hgRngPsl8TviXnmJeInAWfjwCV0U7BlcTLqicg4nHv/xpLLEdJJk6A8D5ph0TKt02DdPT6excLhbtiW1JpnYDyWiiIsl0lGLT5IX3mk8kE/CAKRJu80I38KbhjyKCevYZOf7p3T+Xgy0L76vwI5eJb6Z6ybQIet80clCF2xLet+q4JBGxNeF9+yIiuYjE/E53cfgeIvUntmWE9zev8hfAROAd+HFYKLm9olL2ppIb4xhRp5duZ8qLJFoCnXwWXP8IvQrKJPJ5OgQtP4GqHUDvhut3kFe13j3g6CPG48QXQrLYK+Gqg/1SNW/15u7jfaAI7nPW423opfIIlH4Brk6skcU7Upd0qSPBVU9ThR2wkCK3wiPE1+A0AcXPw5XBKjCud2E5fo8As721WtEAhONrhSfEnX/DcuVZNEzE9vFNNyOLUd823sN3eg0VA0nIeK3G91MCo+AH+twQ1KGo2qyVDFN8MDkpMUNsgZENru8gPmq1L8+na2toobOpXx2idURNQpKuHQdBQueL4Ue3JViR1xHzLDBuSuvGizbzfmYnqsEVkrQkApb9rHWtJp3YGaVi1y/n2ZAoJP0eLtMnqpZ6yo66Qt5LbUagvUNwnbfbPGS1yUd7Dx3m+aWa+B5ivoao+lZ5vgzoEeJ9BPiegqs5afF+qJj3w9/yWBvGw/DLhzqqeruUMc4P2zBsJvI8A/w+hmupzfMxxVMEQ3pJTXbEJ6XI6MZKuHbalf5eWU2Y23XHVy6hs8LiD5Kw8dX0YK194moFPZtZsfSS9UKUUi9ds3q9kKXUzq4Vqy9bCNON+crAFngkwbe4NH1oaU06vLFk5Y7pA5uysmbAAsIc5R3AtxCTTR9WWpeeu3JMuPJZFA9OeA94y8LFu6URvcUg1PoIVBu+THYMJgd95Cs69zUasfRRyAI7G41p+mjue/VGd2ZLDIZBfcxhIjSKwBGvY/iqFuZpR9t9uVRUBXnT59uIF6/uKpEBKQr6VKMUumjUK40e8PaffsI35Q11gjrNgyrhlz9j/KbBlpcvhXQOIVf1mOF8c4G1kcliTzhJ7ohedftW3TiKnsUvIPwc66CP5+ilgxNPGdxbaXz4l+co1VdTwnN7dzaKMP8ZYeruVvh7BnrFj6C0D+2sa1hR11BBdWHfQFB9sZzyWxmSBO0AwHoOrhMArf4QijlEcuuiQZWskciKOyCKXPdl/0DOORotIswUGb6X041PbaZNNlPqWMMld0fNaqNZtWHgRknIMTTnuA6uC+/clswnYnSXf6zE+dt98N9uCCd2xRNZHOlyDvKeYXwLtE8+CW03fgwMXwMg5+AKR6PdrfhNXmZ7DaanFtIbROMIkAlLBrbZpS9Sud2qtJXuE42dUPp7UPIFLg1uTzfcLpY4Q8iVIoyzFb0c1yKPVdMeDzcKTQ+U0Vw8lcGXBTJSngPYC/K6MXaTpba0ZL8QYXaTrFJjVnjP+4s6gTD0ucO5I8ib5BHqWgIICXpvMEHRldVcp6gYpRmZ0ArBFXDObnV3BBw4sYuxN/8lm7cDMNZv143ViPNOxHmr5PFfNCgIexkCGJgc+jaJHNG8BGUfQwHNInK5X94V4AcuPZltW2J5DDV9WFpPgDAP1nyAtE5WlMBir3uUYUUAkrFDN24EWA3E+AeKsfK6H1peFyZQj1Et18FcmCx1TOWmRNPs0naUjV6QMggNXAzX9+1GnleyCdG0yVkvux0Wn/IlKTug+GVwvYZVcvgyh1KWaH4AKmiBUbXlo3/W/hnRPwPjEEzztEpsYHLt4NE/aweP/ln750f/DLS9DHC81VXlo38GLh2KfhToPKwWZ1CxB5+C0fI0sJDJmuG4x51K8L/YbhG4zFq3DQwMGljEeRXG1u2J7Vgjm+8TgcuZGjTYXwOLUVE4ttv6W4K2wdG97toqURK+VnWHt9jvVoJt43C5N4N9+bnjGxIroeOp923flLur7Lve8Mv3ZWgvMuDN4xur0NeT8Lfu/MBWYeagm6kw3sB6+9+59Sy03L8Db5sIu7XfyBtV847Xe38rvdXcJVVwAPmebK7mdVpk4HvhgAYhRErDDwC9Emo1xaoH4FO95EMpbwJAX4PrageoD5QKQDYcEmFJnElv3Y7vmn0qZTUY+ABUwL32XqyEtpP/RXR8JTmVQZ/n1LpwX1JIqVIbhA/fIGyJOrYzE9FfpBTL6N2m2gju5O+fIMTTe3Wjdeef8tntTLon2fsFbOifpV2yu3QL7y67hXeX28K7i7fwbucW3q324qVbePeF319yviTM4DTNrXh7NLwpqs+kfTx9dtt4UzqCpsfifQlR723wpTIxdZvfG36fe7CPHDWZi8LYGs30YG5CeIcFeUHlU+/IqUqNY3mn6v81fqm9qZ1DzPrysCfzNnfyd6p99HamN0Ivco40RQAbku3Wbh4QIrYAbrol/qkoZLmtXZZH+wjSldiarHBWHYofjymSSx2kkB5tEuRVH3ENsor2DAteeBUdHGQVXX3aVXYl65kfHLCSDQ5cyQ4Jw05I00cFy08fwUGmj5rPmT70cQhtyIPUwOTg4NNHcPDpI/h500fN504felsHIKm+XxssVHNwkFDNwcFCNQcHhmoOlgvVHCwbqjk4MFRzsFyo5mC5UM3VjY6XaHO7c6lMb1QtgjR3U5DO7vIRXn5JJbpqUWe0ffo02PVdILNt6ozpINLAzK7LLr+kU72IB0o3Vjlazm7fyPGZDfdo/zNh6DJjFqiDQy/jIaixq9Sbux4NARvHPRcIMM2VJ1qV78bUpBNu7vTFkaW9jj7vnqL6PDfXetzDsUI82jrrVV6ruU2ZZJqbq3BP9wFw4W5ndMK/FpubwZU1ZjWzQuclrkd7EVntcbCCFQasEizs83ypxI5ESrjn8xAjfFtyvRQa+2ImaD41cboXMMHg5ju4eYX9kj26hb0GfhkjHZtVammU+zKslxPuRQo3va8L6csVch/KCOnFCrsfA5K4lzDjCl8Pn69wX8Eogj58ud69lMdJ0/8kFu5qpR1Avf9dTC27nFKNPjtO9nKuGxFVOXxBP7YtkY7hYIdomQQI8rF0HD8f4NFmANl41TvAVUmgie5V/q9iM6vXKXlgqMYo21d5FaSTqJg1SyhV71P+7f4SvXE+stHfgpXXss9E/Ldhah2nRvmvwdR6Vsw4YdQaxQMmAWh0f4UBXKsA+E9iKso8VPMbjnDzwljg4NFTEMN0dzOXhOIijF3OOwXZ1Pb0Zi5a705y0U1WgwRzM8M0hfGoUfqVE6qV4VrZolpb7VrrfBeKmc71dhSJt9MSL46pXZyq9/8Ohd39oJtVm8W8/rCbVTsHU9ex6Uf578PU9Zwa53Muj917mDrRVxwD/aCKgR7K+PCjAvX+CmCh1aveLkK3EjnM5PD7PqXG9x1y5VTQClGv1dFgodV/xOV8mAUDm1b/Rx+7/SlcjzSovka9Swt7/ezzVHgGECr9bFaPhq3DgAF/TSyFy5bayTy/I16zsYgYavMj2OEMdrgtwxVEbmFyy3G/kuG4v0QGukNUrzWxEMNf9BeEaGsFwiu8tfbxQ3at2RIDh0QtwkMiDxlay5sOodragPCuLRTCgUEX/ppvlgiFApi/LxbKCCD60Yx+tGWBUDORxzB5jCVUaAaRxzJ57KMBJSv+KJIVxyOQdRSNd9roJwIOWWcC4akAy7aW2L/EKc6eBYQTRAiysGPfDjiEnQ2EXwcsYRGPR0ORTGTiFBYFM98uIaJY5vkiYsiPW2ptAss0wTZrC5EnMnmiTZ5F5ElMnmSTVxB5MpMn2+QeIk9j8jSbvIfIbUxu+0alUiP+KFIjzzeiQ7uInWbCtysLipwOdp9wpJJV15NJYUQvbeJjlQVdToe+MfFHlay9bGxbnu71A+yfVBY0Or0dCP9UySNtHBbdvRlYxmqTTykSlYF+M/k0ESLWnKZNUTOCmgW1VjVMWLOgNlWNFP5Wkv4Dqt9KDNvB4ad9TIRZbOU2dxWlOHsqEHxE6ACrobo8GprNRPGcBkXjmT8pIaLpzFMlRDSc+UEJEc1mYstOIhrNrC8ihqZUocXmsMXm2N1kEZHnMnmu3U2+QuR5TJ5nk/NEns/k+VbvCe0n8sVMvtjyhtD9RF7A5AW2k5ytLnESGvIXazN8vCbDmV6bqVYkPCLOspYj9vqFCs12LEo4JFAOZEP+lm+0Q2ec82G1cxbOU6m5n1UXvKMd+uRcLcjO4IiIBeXmhRQZy80Ao89rCPLswSsWbf44laYCYPb5k4nQSksY7eL5wYLTzJgGhM4gu0lPPgYjy4JVwYLXzIAOseBaInT467F6xx5OcTb0ho5biLAYrIwGNlEMp+nRzCZidhLRyOa4EiKa2JxfQkQDm6tKiOuC+BeNbG4pyipeNuGqCfPNO4sKhR4Ooht0sRt02UPIc0RexuRlNvk1Ii9n8nKb/AGRVzJ5pU32DEHylUy+0p66PDUlLsaLN7ESJhdcV2hLr+CitBDTurC85QwzYajoCtSw1cFl4oloXyaXp9ss2rJwTcEdZsJEsCxSw0PEbYR3Sk3BGWaC7y1vr2HzWzucFbwCbPV/hn69cmFNwfqzwLtWXlHD1n+eBFpfU7D+LPCtK6NEWKyWm9oqXm4upvWetpqXm11gLDSBiViddkRDmFNKiGgGc2EJEY1gri8hognMdBEx9LUa1P861v86yyzG66X6x9vG47QvsfLXWso/SbVedyh/Fuhs3RnWMQu1nhexEQCAbZsfFgPQQwhgIwPYaPtFE5HjTI7bfnFrqNQvaIkL0DYwtJgFjcyz8dZQAdpsgLbx9hBDI/PEvxMqOMNsGEPi94V40e7REKaJ+U4NIljzWBEx9CIh7WOkfbYAbxM5yeSkLcAis3TsTPQA+h5G31uEvm+RWUA/tRUGj74u0wE/ebVZgD+1FWbRZMy08CNKEws48SNWM1tEDO01EWiagaZt/H9D5AyTM7ZjdNSW4Oc7pbO0FEuwpcg10h21DgmmQv9IL6plCeLEd02tQ4Kp0EEyV9dyd8Q9gZblPcE42hNoW3lPMJH2BNo2tbKnPYGW49R0EBLlM5GxU3KU0txURDS+W1u8zU32Yki1xBZhyAjFjms5p3bV/PxzRLs6zjP0vQvU5HuDcqzEAnjXdjVcf7dZiDp1a25MJ4e0A0QIZujcoRdgRMHnJtG9wg3A41dwnQY+9XjnQU5sV0+u6JnQ5Pdq+fna0McvxK3knqa8hG43ngOmnbt0I5ACgIy8Q3HmdlRKa2C1yEsfH8rfzUTlLDynTgd7tH/AqMMoTzhcdwEEdji9ldDgXrhmFhrtKmq0q6TR5ZZ4w+52vlKluNNtXPpkYB6P/aNYB4D7nbt1I44tkIY23M3HaBsIw0a2QZ/VQJwbSDXiXQjZTXchDnY3vksvotBdiIMbQMh769Bqt+hCDDtbBkiRfv+agBwBEP8N19cRCBcT8ptn6ywPwKDGOjJsWl4/kKEdku1eKfp143+Ze9boqopz9+yzs8+cnCTnQN6cPE4eoFUJIYSHgkArCgpUsKIYoCSBYJRADiS8rbBEHmINiagBeftAe+utCGhFQKCiiFjF1euj6wp1qa3lUUlv70WtVu73mNln75y41u1d3rXuj0lm5sz3mG+++eaxv5mZB2GfG9EmVam8vSi1LZvZuT4P1zNi62F1RVvkQBeYZ8D6Lr59JvYTs8sA/6cQPgMaOYRyL6M0cnDiL14axs2STR8e9x2gU0kyF1dX4sBNilyShbGsitwELSCa8W038RZrIBCcsMSW6bM00eMeom96iP62go7jSK7j24cdohiLvJybWFPapKKTDqeJXjXQegXCMIfep4peNlXkjy/zgR96/fmzU0yO1fLPrJYp3OfO0Ljd1pRLy0xxlna90BXUOoJuI7jhGERw3tZH/vS2/THILZjXI0FApMi0xyaEILATwOi6u2w502H2W82s3pGAwhfPsaNDIWmvIVh9ZdTZtBCm4CL1RZ8DxmrAGKV8v+BmgwbPwrv0CILmJY5bjLmC3tbdBjAfQ2hHTpCOudzgl6izaReO/fnMe52eC7rF23PmSm7BBlQUnbeK82K5TAz958zVw7QzrWVH0PEGqlHwXKRrMfHMXRSwnDqAs/y7oWGBu0KSU0QoQRU7WwFQPE/QekeLKt8rKm7IqCrTUJT6M1uehRBtxgMIPcVRklV1lMv1FNziMeAyP68LbadVDt9xLUYLgbYyCjy2QjgPfBbXgN27QT9cXFxbG09ZUTSJIp9OHDVEa9FocgJVvQRiNm7SFtRADL+L4fFVwo+4d0OIzEb86LWsrj4tro0nLKPg6vyupcpMg6BuY7keAly3LrPlyNlarrd45eoA3CpobaglO1FLtgRXUKJK0C5w2+So2gUWkxQz1dE74onpJbhIF5MFa0J91L3/IKYoEg1FY5aCCCFE9U+NCj+2xY7CruvGu9XiUa5ZNdTqqhW2bHJq1u6tmSq+XtC8Tddrg6MxsRo8YbtDDCQvnl1Lo7NqFsbTu5dG49tt4ilCgm++l04B7lqA9hf32rKEjNivBNoGX9uLS0twk008S8Lwte1fGiW+lQbtJMxm2zWlVQWGcRpQWPeABNw72uKI2EGHeUZE3Qsm8ap4hrJHGaWt6B4OcGsQ1tmJFmfFLioxJurM9MU58SLljTNK9wAUQhxAKNfes7DMl6nMzUZpB5TB3/ssR65cu84iwzxChSZG3dN1kWm+QdmTjdJeEEG47QjrbDyLK8wThawjzjRZ9DbfK+TjjkVYei2IMeradBbjzQ8LXbqjPuLfZH5cqOxc3GeAP8K5ZbxJlNK5lSOn/RqreydZjMJBG9+9/oHELzNj/WjNcfmaZL1DcVxKJVm4259kDaO/uIhJshZS/BTFf0VxnFsXzI92qaqGeMgkJR0OCnphpS23opKS/rWarH9GIW4tiDaT9hZAO2mq8qDJcxVZSOPVOlMNWCWk4A+brOBKNCyvR8z5UT2HuwtiNm74FGQUJTB2xyz6tlkDYzj7DB9kHo1VMCmBcBxNDk2u9plqhsss71csKx4PaB758NTLJs9hFI+HFI8N3DcOm3qEz8CWwR7QEyfutmEji7md55lUL/q+L24ej9//fRY2FfnDGr5idKj4pLdh3LTGlodW/W8cKhD39+BPUZDoj2Dm+uL+CGaPcl5t+bryRzAjN/MqxOfxRzDzZvLlCz716q2ZX8afJ33okmAWHqRU2EcuCWb0Vf4QY1hYSuCfpDI+Oeq3kEG68FyM1vn8o9ROCX5rAJ5nQJLC9bvfqkK0BztXUDkmpJjZPp7xh8tUDfmC5m4HnSrpIaI7MygB5xw8JHEOF3l+6XUkkW5HEskeIbKzI4ns7Lgiu3Rckd/pbyJd/iaaj668XKTiKviR+7gSCwBP3vEqRTtp5JBwURFrVsOIAB0oRSlv1kfcg1K/wl6Q/Se+ZT3tQyg6HIqGsD1F5KA6DwQCaiXRY0bQc8qBSccVS1xNNGOA5Pr7YARqjNMc7KE5RNFUzuxDy3hEZsrDDio3x+CWRGJ8fBRry6BVpFrjgFoVhBuBIlO47aByJwyf/C4kNAfFww+iGkAbISxxwKc64PnWd4A7y6cZIgawayA85cDX/Uktw7t1bqdphpglWqEwmonfuSTUoCTUnRDMVkJI+xsU7bMGW6UO54lrnWYxVtORLKME7c7SMsM48zBMvtf8E3YHDdr/wXMLm/C448UenY87erI6P6fwP3yK4ft5dSHJch5aaBdqWYJPxjQZYTHUX1t3O07Ah7WzBfGrbXcxbDMbDD+51w5vVym17S6GP8P2z5DWcRBAAJP48EbyswYm93mSQXx4IE6Xr42Yij7CUwT+hM14FMJF1A+6xrwqovpPCd62MKmF59optGydzL+5zlxKeikiba6XCo+s14oTgPkvEC4HLUrNQXwjFPYUdSZ0xJW8UmBqI1rUyZXgcxphTQMfdmbG+STOQIHlOgBx8H6Y2CNyAh/Qoo46Bb/R4KQrGgdWu5xgwwDXE8JyB7aPgk2JNS6ocJKWEVzo81St2S3DGMmwHBAdgvBsTMtwlkeGsz0ybFQyDF2Kv83h32JhOifECjG3XS0g7dOadgx9P8vFhm4kxEev0RqDxDaepr3EMClI3/79Iee/KCfHz2drNnHxHD8PUZvP806kKj8Qciz+EAAahb9JC+scwEyXXqV7kkF0fnVYgwZXei1OCkSB4sj4uS3/3Wn4D5VIwmxdTiEJXCyEafr0B+IJb4PY2wkvKtLjIgq4noDgnwP4ChDfdoZQ2LdH1AMeJJHHSCKoRh2Wp/FYfW4SaDh2ArrXIfSbo1kc36HOG0nrAsS6o9iCNya5+dGn7XYL1NsTCP6ALac6XO3SXFHD71INHyL0e65RHrPBVUkerpTkxhDO4YDvBgj3O2yN1myl97BdvMRVEa9iIUUcB3BvQfg1wGakIGxA9KAFpZFRwknFUSapYrJQuphFzKcI5j6WzY9QpKp0c84MQPoLCFnEUJbQNQFJRQF/LpZLP+/lTrHWh1k7AdB3tNjyE4e13gq7Yq23l7UyL2sDVOHp2bU48aDuAGaAM+s5kxt3kMLTkHMOSJYCyeya+XQwZbD6JZaT1KJ+wU7HYEPVj83wt8dwv6cmzvhbJUQMwL6GEJqr63GbYG0zcu6B/HMQmOWfammCebzX37nhYvOa6vFmDGOtLYdCGAz4UgnfBYWOFeoCI7EMu0Zqi0hbTy/6ukWwmXC91ywWUpc2IvyGyjxScOjQkblQAmZo86kNzJLKPGrABdyAJYMiTajQzJUhFjLHJaMi7FoyALOQrFkyLkIu/XS0cZEqNk4VG4hZMSo2MaKm7GIxKTPmcKFBmLWUClVHGmrm3k4HKls4wwgguMvWLPUmW7zJLZBEFvIxmWkUTMajVnHR8LMla1nvhoNsV7fa8naQb+bcmll4+oWHHKV3axy9A0OEs9n7RS2fhcpk4/OAuI/SKZlkqVrEWkqGs9UI1qrw1Wd1R3xt4mcB1r8VQLoaSGfT1TJsP1RX36B60ERYDxOb0sJKRBGU0kUYK1oewJWKhdojLaQirfoA/sVf094LeJSKNeofohVIPg1hnaNR33g06hutUQXDkr1y42MVr7LgdgKKLyEcdAT3ihacltQrSlIWS+aIkoxkQbymBNFsFC/oRKhuYeyOuXQJljDabJkC4Sz2J4L7SMHB8n1Pl3DTcU+HeAwDYE8I2U0a+KzYk6xt+EsQ646yK/i6Ex6tpP8hqErlgGIwhGscNH910KRPC7q7nTMAZJlsrQHsbxAaHdBMU7HP6pVpKvVio5BtKpPKljTH1JY0/fdeOrjuiHdOvO6Gamw8CIYYwkaH3hdaXGw3v1TWSNH7uzJCDSVTp86YN3va1KnGyhA9q5Z5xi+N9AEpHqpNtXNnah0NmqwHQO00hKMOxYC3hgHTO6aYeo7Yo8WL3DWgDzFFB+AcsQ6k5+C9ysFbwEmlqBkkqsEO3nSZmsg0S2ks8zwO8H4OobBZ4x7t5Xm0l+cxppowsNB+7G2kG+ONNC01oZGY8AIm3AFEez5ky9EO4XlewvM0Ya7jfE3YSD/kRa1eISLkqxl5OSC+D8ICB/lKL/KVXuSrHOR2dpo2FThrD/vCeWQYHuGKwrhBa4sBFZiVTZ5iMo8otDOFEqlK9MOsXmm8/ghgxGWX+3uSBXvTdK+LPya1mbtNK1SjAhaRjztV2eitykZvA20y96a5GmiLqQd+fsZpq3mQfm7Iojn1NgUcAyOAP0gLhVuM56Zc/Dij+vOmGA68zIDwNvCTyTj3KJJGFonq11onjIL5XjzaIrzKVYsBGlwffx1HdUSxp+p2xGsSjnu17U1H2wLYU1GeNM7lGt2RsDERHVKMM6W4Fp9cbhgzt9uy4+F/ci0ef7fue1+VW/wIYr/I/8dHEJmrxEcQ8eUuv21V4xA72nn/MHBIr9nxzqqwuCJZ3XXTu0pfwMsun6L3IV6jJ6uXZEWZOhKZrBw+RdnbatEexAjSSOEn6U55kgFhxr9ezoQmHqsvrP3xDnbgMAJv6CKOs1u5LzlZny0QTapgMjuiAHdNb/BZj9SfooI1R3xx1vr2Bd6ai3gBqR5FmzdEJXlmPF/dDKDKw0Ru/o/YoT31NppMnlInB3h1uXC88nOh4hXlkHOrj71beB9t0QxOGsHfm56qR/RiV93rFfUF0m5ACvnmAZonGiG6O6zAVPvDacMjdIvZMXURgG0hxmC5z402HLd7wrbwt+B4TwHbQpkHZ3gyg/MgudfQyW5oSYVH6GzPVtJEDvvfukdseck8mHGQkO+N8JQrnWWoHwxMp4nSCmWXM5irVUPYmGWOQ8jV43366DXGsi6xOrV2k74vNl9sA5ovQfgJ0E2vmX6nIfLUd1KjW5OVwLG2VFv4RT8A/AuEpcg0kd483sP0ZsW00e3Pibj003hPCvyxA/DMabflLx1cjzu48EqZx6t4lyedrPkTf7W4/iSNHXz12/QMOpv+1Hp1yN/1xue1dDI+KYEHR+V/I1DnlwEDayC87zBxuH+SvphmMJ4+wobutiQRESvm6wLfsGwFDBsh+OZrLEc1lqxDSZ3aQl1e8pbYBhCfQOjjQP1WTbpVI78zRC0Gs7/qgj4dpzbEB6IDKa+35SQHz/sKjxGotjtrgpHjCyY31c0xxGl3p6/oB8P06Wp1eonX8mfGu3p9Rb9KyGnkk1Lci8+e0vYJs10d4W5PMudYAhN6LIFJpRBh4L0JwirgP5e6p08c4x2IXKqOJcbrBa2Fksjp409AiDvXUSGWAR57gy13O7gKNa4ehKtI4WqOHIain0DI482l/uoHWHrn1/ldBlW9MXoLKW0YcF8B4Q8oaxLChDq/1hcUR/4THlhnwnA7gZcD6BQIwQUafIYGL7Bl5zZumgrtNLW2blEj7umOEoSiGsBXQxi4QNfwOmHzjROF1KwjSbFBWnnUVa4nKLNtATCYAuUkSrBgZxfE9AcaOsc9iam1AqW0R205DamRYb1ZHFDXghDxCUq8ViH6DN0mPpb8EVYvl6rUqjWFuZmsuGmKPAGYJWDO095rU3XLaPurTrjZFjIbRcQEXIT0i7BsEZIuuoYN8iuQm1UUSFAM/R3lSxEGar0grEXhE/NfKNUwsiYE3K2mYaaIcig/BMI+p8Em6wYrfjyRmK5LD0GVGQ6QUyB85kgvxyu9XC09I78s+btckNDCVAOWxyCkLwQ+EJO5vIxXm+keFyQWtpXhdkFiO9qQ4XZB4rxYhtsFqUrvIFuVgFqi1LPmJHe2Xlo2L4idwM9rEIYt1HbneWXAYfaZnCAbpyt8S814AiBPQ5i5ULfGP3Rr5J9LoOoA7+exAwADG23Z7pDep0mXtOhF8ayamPraOEisEDwPWCnUOwghPstUjlktfPoJS/C9K6uEmoqpUn0xazMfgkojLVgtlO3j+cR94is655cT4gnNGvEMlS5XCCoxaxdlDTKCiMllLZ8JeqcWWPvgYU9mybcJlZoKKxXRIvj6tbWKnq7WlZj1bVDdFJOa4sE1ISWOy1gtHgQcNNysEzyJYySV5f0wa0IKC6J2Ht26JB4S01MU2uketMFmSCLXpUPoyqeCT1KMzgsHtZLfwLYlDA24FsIrC3XvWK97h2M+1os61ug85vFR5rGtIY/cLTYKpKJeEIZYcXuqS07kdOk6FLtb2TSgecsmW5536O4UqjMVkpI8J9qVPxfZrF3isVR2vCSaexTN6XnqU/bzLPy2+jweNnW6IfIOULoUKHFJWhGIl8RMviADm3ozIJYzafGAyl/8Rw/7cxsdI/hLQVSrAdmDECKLNOv/olk3sirT4isPJel+YhuUfgHCSIBIJwYqKnlhma6vzdXzLFL9ivXqa5ptIV/597iRzqppnlZfx8/jih+SMA8B7pLNMIAT/r74ZTKV0c+swO+QqWrf8O9piQMO3UL+BjdKOeCYBWGrU7OjjjKgu/XrQrFZSGy+LhSfbEePqSZKySPWjisZ1xvF20MuieLei0sf3mfSMSD7whZbHndIv+uQJnTvevXhPa0PPYj2B8qGT47sBESbABHryYdKT6rz6mtwpnNSjcuO3pzSegNt90EowV5yC3aIQ4DxPIQvFmlDeV4byp4/DGupUvWm4Y0rogMKt2yFZlms63NR1yePbmHRfBCbpsls1kd6AMzgrVpbYWpmKj2G+cLTDiFeaKl9354m9yiAunybLW90KJaY7sYrMXXjkQBLzafDLEBa9/QyIz7diTGWdT7s0jl1B7ohrhLlQGI2hCWLtS5fqXUZqVypiBjFl3XzrAp1JxpmkhxigGIxhKeQW+JgqOIAKrqoW8JM25mrXsu1XQawcrstf4fwNPiMMNXowxW6TqFrhnFQc+LYQMNUM0nAUALh4mI9ok/QPbnnZ906SVtd0zPZFOUAgts3ly/RzE9S0jSMDC4Nmp3FvnrPDJK4YJpRB/Unjc/m/J2Y31h7Z900dPPM4cw9kJnJsxLOeBFLxSdFrI/jb0E3P1/lGb+UOAQaTXNwb8m6BPeW5lQYxthUv4wBg3eiF9CTZYbxNV5NnheFEeI9vP3O95VF9+nE0HlK+kqwzfy+/+TMuZhp+9pxMNW32/oO4OflJN95KCL95t2Q8g+uodeTgFn/EHzlwTyWD9H7FmO0Fmj61yAp8848iN5P0Xt7QvTn12I08wcQfYDKni6CaAsVSIO//rUUDQN5f+tJZPY3eJtKklmLOW2NcfbND0EM/vVYxiy8FKKPniT3djMbKup/ivL3Xw7Rf22kMf0y9IxdRLUzuwOytOinWOQUYJFjL6ADE8qjsBxvzrhO3gD/U0ZeUBcbFpRACmb/fPjGvwEiT0IVpFxMBeUSXfDiFZC66yQfNQVDAJHU11BSgT0QRxaSzxt4i27giDvtNwL/5k6HDP9h/FACVa+2e8o2oGX3WqFo1OCdp5cMVZd3nYaq25fvUNd1VYHk7d771TVdj+FvZUf57h/5I/Sv7NOqLoxcDFWyyzfybZFyOf7WlylEZT1SqGAKl8pLSyE14FO+20DuRt/4QWkkikq5EeldncufJeXrIAv7uhilhstH0FF8JKdGyRUIN4pT4+RZ5Gzic4RzIjTOUdzLweqnRKHO44qhJ4mMHHknoM/If05VvBUQZhR8qiq+vzekokNVVdfhW0tFAynVXU4CpcoojtJcKt0I4PaRI9uLRuqI628y0pcNxhtRrwIxCBMdvpP6EjR2/CSuew7qUyXpI+6MJw0mPX8X1DgUHYO4bwGphYooWgHaHyqlLbM3QQdCvSg6thdEr6jF6K1Qp1A55b4Mogj1pdwdl0G0knJboP+G+mNuaDPIvzJ0rbwK8V+32eLqf14IqZGzeJdPnoQ+HRrFqe4Se1jo+uU+bulSEFTohifYm0Sa0AlCo1/iuy3kldCaoTGcisqzoFmhsQz33+z9d1xUR/c4jt97Z9mdZelLVVSaDWEXFERhF1CsYEFNIhi7yIKiEmHtLWBLB0tiGljSA2o0VTQxHY0mpomaZhI1mmrQmPokv3PO3Au7Cnny/jzP+/v5/PHz5V3mTDlz5syZM+fMzL0TwzcAu31HCZw9+G6kbbSAYvmbWHuugOI4HirzHSMgC78b6RwroAT+FTZknIB6S8Z6IB85qwq2Uo2EX3cM27kGhmGm73jRzjy3duYvcm3nhEWu7bzxTtd2Ttzl2s5Jr6sto3ZOfl1tC7Vzyp0qhdTOqQJnkmjnNAH1Fe2cLqB+op0zBJQq2lkgIJto50wBpUvKUyCPvoXP47yCb0dE+AYr/kutEBeiCP5K/oeQwlBFMF/nn4lgmCL6ifvfjZk7qKCX/13YgI5qWT//zzFzuAoG+o/DyjupYKh/GZbtrILhUsC72KYuShUw2G8rUNPPN0qlJlq5U6WGUMSooE4Q11V5XaWGiOum7FKrJ+K6q2CoIK6Hcq9gtiCupwr2ENTEqmCCFPAFcrGX0hltppkQ9rM8B0HDQrAEpsHI2+Rn8f8WOsjfW54ghrp/N1zyC5BjhMb1/xra4W9WQe5fAIj9A1XQy38FLvUGqaCf/42A2z9YBQP9OfSIf4gKhvrjwqx/qAqG+y9HzGEqGOH/GqLqqIIx/l0xNVwFe/gPwNROKhjn/yoS2UV+mVa5E/xDMXOk/CaBSf7+SEa02qJ+/mOR5u4qaPN/GMGe8nsEZvrjjOEfLwttNsh/G6KyyCMIHEKLqP5W+ShhHurfDWxf/z7yJwQO838cUdlkoRdH+OP04D9Y9iIir/NHXe4/RAXz/OchOFQFJ/ovQHCYCk71T0RUw+WuhKrAfyKME/8cleYi/9vTABwpf0n14kp3Ck2sWNiM34Lzf8qAvDCjGvd/jlsg7P+84I7EH8DV4BcEc3T8Psx+QCCmCw/pC7woFUZsVouyxthK/FDvJdfY7hA7gdL+4vjdmkSjJH0MEuml+AfNlZSABCFFQTMkxSzCuqBpkhK4nIv6lMnQwoDONigWfIOR3quRpBAvtx+wTyClUwwO57ggPL4QEK9KZxAavgEWL/XzmibQ7AHWO8SGq2R8EAL4EKUy0Ig1KIgoIBHjvc7Bz8MwR5xnAf34AeBpQP9zRo3ggFSy0KJPG7gVqA1Iu2JE8AxYCBi6QUNsB8Q7sRRiCrBjmmEEGK9zI5DggfxCLzwJt0Pg5UXgXwQM+sMoWIEX2gQMHiE+tcOXQomAIaIxeAMeMlNBNAHDJnnScXxPNK7g5xdksS6QrzCA/RUUo3509B20xoLVkcrPgRbUhdznqXXsDCx8CD8DhPaSrhP3jsMP/2iFt+ELQV1EdrCXPg6E5mV8QNWewpJvgfuDkQ94ZvAnoXr5xYfUkrf3wfc1BBTBH0Kj+RWxY5UZhF97flV01iC+pSdu3jaKb17wUGCv/PrnBI3gaxDlG0Lcc3kCQm9KxKXreOc4/Hq1gKbyLniR1SEBlfAH8GKlw1uJ7EV8cX/cD0bThkWvkvl5zHpkKIHrZX4a6z+KpLHoKpk7QVrktwP8Edwk86WY+Z0uBG4B1/E+8KY8hx+nr/d+DL+GbdB1GJnpOZyjPSgfPyTeb+cH8S6kphFCffMKRHSiq2ocXcY7x07a/KlTg8qBH6cG+osJ9Qts5UeiJYGC2I/FtZkRQfjVQPmTbV5i0rwCw1/+NEE1/BIAt/yZSEvgzZh2WqQlhf6KaZ9jo+jS1n78fazki65UpU1SjoNv7Zlb54Wt2oOftPUAFYaRgZ651K+eZzWJOIsSfk4dtfwJaJ3nVwlqqzaDked5fom3sHXTAZHnhefEZ3wkZRz0qWe+nzfWEQy/BsyHkeGe+bwb8uPCMH9Rx3Rs9Neq9uHX4TGjb8oEr7gFTDb52/Gq9bEL7FT5u7doGS8wdCa26vuWZoZKYVj7y/idBc+7OoSZ8BCiE+9U7ZCFVHV4DUYw6zDQFz/B1R360KPDQLxYskM6jlYp7Ap+iAe/guRZ28HhiYV7BmPhQ8jjDt+ZsfCzONY6PIsvbXV4AJVkh/sAxapVihSGnwXuiaPJ85UO/bth8WHYLimgA4xBz7FyR0gPzsBFH2yp0GzISfFDIGpVSXkees/YOxuzF7dkxzZfndNwGJL7g22dKueI4TjisI+LMI4UwphI3SaPElAf6lJ5tICSqRPl3AEEpVAnymNEWj/JeMrHRc0nSAYGvJsGqDPlifw77JlJzFdUiNpRniz6ySYZzRCNABX0kQx5AM+CzhsvL+QROOQWPa0KGNG9WNDNxdhdkkdI+/P3gXOyeovKOMlY5OtCTZhkqAQ41YrU3CykpqLSV93d3wiBAVr9GZIhFQTPCCM/U1fCk6x4+6YgVeXU7dqwnYiCeYeA9FzGHds7pzOXQXyXJopV2Pyq8arpSwqverxq+pKO2TBeNfHL0afZKDgcEVRKb/SlksaL5AdwG3NztvgkkGTEQAvZnSVjPsDY6o40+RpQa9risMEPCL49qPU30VYzXu3vnkhb7Xi1h0kVbRVt6s+P4XDZJqA0/irm3C5oswte7BihmtBhqJZRXevkxztc6okS3asXSnQYDjnU3Dr5qQ4JsZgQgtq5w71dcaTcGI0jpdSCI2UMaGYPiTUjYsWnBCnR68KguC8qQ538BX8ae+MLP/VTUnodUq3XYcN95/jjbvMF/iQy94KaheMre/KFOf7aRTpCxWATAqKxmiS2BtKCH/fXhg4q6BBUtyGI22X8hH8IkQt7YCXzmf8LSbjExD4USskf52G5nHm1XNiD4zvcECBJN3bHEiFGfxpWoUbVvPGncRVmnKCuNoQPgLw2kHUvOdzYCZfjOhlVofNfiS3qbBwQIOzpo9gLXYyt9tdHQET4VkitQx9blnz9SfPJvkL1gamKJRTfrSoCmhqYr6qY/amPdb6PBAiDPA6Fw8NXmFt+gB5nG70O547wXFBr00GF9JBHB/i/h5Xkavaafw/EOkYFwSNBoscGaJU81RvAcSro5f8ySvl1Kujn/3EsboWqYKD/85h6gwqG+g9A4R2vguGCHXkqGOGfjWTkq2CMFH4f0PgmMN1PNgX606TrFajOuoIv3oGCLzrBF59AwRfeiRZXfQMnqNdAdz4LmP7Em/A26WTW5RJmrtZhZJch0RTGOrsYUMI26L7B+NsiKIwd16WiOw5kCqNBRJ85R0UTEQKTTA8relNkurPI4oJFklKAVEQWQwCxSlHDIVcOok6XZWFwoCFgl1E0Y27EhAyK7ypOU8pSVBGU2IKsGquW6EKjfoyMq1FSt004t02BgclelknUWRePWLztm4Au2BgIbxI3iOOCVsRzEP4Shqpyk0x2rSC0FAmVIj6AxDcBv9JHIItE7im9MSxF/AGJ44DXRpugpDvOFMY0nHC7z+ihBaWIMJhOmoCvxsEyRrDu1eDAGwdRYucRkPhTF5zCZWA/9eS3MvZkl4udKIxWRxcaR9+S1yN1W4TTE+Zke7U2fg952R7igWjjHtHGqB2QNwv7yBigMphOF/EATIieV1KghYEdaB52/hjCmUgPVzR6DEorPQallR6DQvRE/ApFuuKrw4NUPqDtqcv6VWBFEzQiHKwGbxhyuljXLD0pS0R/SJyPiSnUQDWxLyV2XgOJTUhPTYt43u8inve7iOcDQjz9oijcKp4PUriH1LMGcGVCTiVdVrvZTt3c8zlIoPf7h2sJwyih86eQkGSh484aN34VvUNS96uQus4eIZL0Gk5w77dke09kIx/gPTVbBGR7B7FNDoBsqGLkSQEYCWyqg/piiyBMV2HmCeHGJfKd8IxfKkm9qMbxhKoS4Dg/cEXji/E4BbKgbin2heVu/OpOCM4fp2QSnd1QvAGew5BuJcpOEmW4FWB5DXPjBxvl0yL3QcjZCM+VltyfteSOXR4KUxx2wNcKid0xyFi+Xc+jlgF1lPkrkpRRACfgOP5KwXE8B5O9sYPOK9hBqxCmmeW8gjPLEwjT1HJeQVVxHOGxuAp+QcE5SVkuSYljsPHfKNhSC8Dx8+eBFH+roEk8gmDUat8pSNYsgHuTvvhdmQXkSbGvA+Hr4mgngdi6CmK3wLMecvYibWlgqC2fBthK1rWBocjIY2MexGJGhqWkWHOYJA1FPyJE4NkKOF6G580WPMGE59JyrcXBDFuMyz+JhCmUMMXgclCfBYBtDPp6dXr5GGBphidlhcbKJ/XIyhkAW8lYelKPbQeKCG+9HvEm/Qg/p6DYOXjk3fpkbxjzfRX4uRlrkPrgJzt3Y70f6mVph553gae2pYoPqIq3ABZIj7ci9YSMwfDIJ12QXiCklmR8t/ckSvs3ehK9CMg4BB7DSg3z14S5D8CJZPd9S8RPXqnV9F1rTfFQsD/W9KNLTctWYk2x+PmzJ3AE/64nfudCvjJ47mup6Deq6A3Mbqmmt7J7kucjuhmyboDnDCRbqXuEt06ifxFzv4hjzSByb4Wc5+DxWwXI8b1kWU+rAjaAY05iRm7AfClk5BspTc6NS4BRmDgepdPLgI10rELS+/XD6fsp7N1XvOSLgNb0kJ6vgbT+JLkve3mIDXBrDXbuy15kl1TrrEviCezXUdtfJ4kvQWzd0aM3eRPL/QBbZ3ieWqU1zdO7pWn3Ye4MNDYCvWlUR0DOXvB80pLb3JK732uY+yydhgXckCsDHuPNWs7w1pzfY6YZiHejt5wJuUbAk3yz1qYN3mqbJEs4WlezUWs/4C1jbC7kvBGeaS2572/J3a8Ac09BMS33kadCrqXw3NGSs8xH4xXZcGU+Gq/Iwivz0Xhl2YB4rOQf+ZCaXAV47oTnhRZcSzRcUtRbkPsnzPyeP/W/LPT2u/7YsTHU9vf9se2pMdS9J/3JZJGidDAPVpE6cyv4lShI0nGBwmrBb9SCsTVQcCKq5t9EwSogzfdhPT97sybOv1I5/wpJSpsDmbFB90Cm9+GRf/dPfghgmxZh343QVhVKPwBQbgVVlIFNy8Xb8KDMJxCOKwUg/QKEFkOOuC0IXQFou8gvRf0AlfXAgfZ9oIsZ9l0gqu8u+dgz3wXiUkBMf8z0Q2CrSfZXYOZ3UDjVngTDdkAm2hww00bZQFbvQU54BKk8IobqgpChMdSP+iA0tgfCBGYIQgbFUHeq4UexLA8itWvRoSD1xJpDBTY/YNpSeA5WaHo3hBB/izCRGxKE5Foqwfh5C0hBzh9EhkQHJTdAOHk3/MSdgBj7mxAa8D78ZKDF+gtmag7s2xPCoypxkjVAHpe2QT5ilkEgkwF5HL7Ume4NoYVQIj0MApsxEA2BvRCwWztTQcun2I6HUZPcE0QT6CpoQ8dH9PzdSk0ANgehAPyrUpshNwdhoU6rtRny7iCcIaet1ma8LUGI52GAE0nw7qXybwMcQ+bRfcTOROLR/cSjnyEthWbXB6is4iwVk2V9UAiQMuhVqC/PoOm0bVS+F+662h4Haq/AI1K2U8rwNWIBHNdw+nVCCsdgI18IkiMAWSI8jjWaJfF8kGpJWGlF8fkgXFLEkxiWHCxIjvBLQTLGZkLBUfBsbCn8YlCL0bIYc7+PuugjIQ65kHM6PC+15D7Vknvwdsj9C5aIJY1dCvnugecbyBtDWr4XxUuxcdAxuzHjl94ySuZWyNUMT8haTci+IFWYtVazxb7wRuU6DeB4WpU8443lNq8VZtlZb2TQ3rWaMfKj9y7AZnsPfk7DE7Mblzm+9UaLNwY/FKOGoYF4H7jMUNuP9pFxQ1d6FOY8eN4FZAmkx0aRHvtXCymjfJCUPus0UnJ9kJRxAA8phT7xQamRx0iWLxD1AdRBsT4ybvpvBbSpj+n5snUa6p6E+rF1GuqehPrTFtS9CPWfKuq4FtQZaHbfg51o9iHpzgS02+Hpvl5DHUCox63XUAcQ6q2YXooQovpivVZRIFVkvQVZ8gYix2UeeY+XjL2wGxD7Pa7nI2/Rhs5TXtiPixEeEkswTgEP3aKJ/14vLHce4LhFLfL9jBd2kv5WEO8zgPHKY1rHPOvV2jEijLN6JI6pkzjN/OElY/Uj4Im5VTMYficScm/VSPjdC9tXijAtOP1O83rVrRpJ/yKS3sM78yyliNoDu+c7L2JfLqBeDM/FFvTfEvrw2zT03xJ6220auu8J3cTbkNKPEN0W1Jkfe8mrAM0H8My7TUN1ilDd34LqFKFqQJiU80dkkHyEMKnlj4jyTrdrVX1CVU25HSmPRUb+hkw5Iig/DVUZn9Dz5bdrffMWVff47Vp1b1F1h1rQHSV0FxBdv/mIrhGlX+8n+wGaKHgMd4AkzMdJ18OPlsFBi6x3BXXCWvHwE9YKGP3nAE8ZWoMvcKIqAdCcewI/qwBUfI6Mfp5TIwBOpL2CfRyFYTnAg9Dnx2tMcSA3UPT9EC3FPabGvUpxOyFu4CwNgvGHGxDvdqKvCsgXkfQnwUHA+qb60Z1WKJHfIUxrnMlkykl3alxKJlfLjO/wxT4BmBYhEzoIXysBMDnh6daSO5R8rbEIkzceSt74TIS/SSMYyy0C2CoW5SgdGUfEhCkviw9bDKGJpCPllnOliK4wj3yAN6vdTraj6o3fit54d9yM0t2GeLonUJCWc+ZCAFsyFDHp7kBEw96AbtbdiQiGlkq6uyhQLOmqaNJAfairza4APbSllN4Z7vujAbpsX3exIi3nKDJ5itDgA/V6fltLo7Op0c8h3KUnweinNQGcQo7FCPIwmfOXFULprlLeABxZ26BN6GwcNNBLuDnoaDDnqpU5CgVWr5RGPA51f6nWl3IzzqVjlA/oS4XrVyZmoCE/lrzPr6GuxANdWmB+lzYXjyMWpiAM2uw6WiiZClBaR0CNy1a/APrQOjDlJivJ+Knl5KVoUqQlQ/J9EFoDSbdh8iwl+UlMyboDUlAQThvojd7kjyGc/C789MUNwVsAd98GCOyBQFwoeMrpZwH6HCD7RQjYf4efdB005fJdeOIOAk/U40sg5HdNhOBaeOTlCvldyQrZN9l3wDivF50SS53iwC0KlMSKAJLEg1CodKeeR1dpnbIqADtlNMD90WxcFTBQDMle5ErfHIBd9ECVZsLcHIBq/lOArWSG3BxATn61XwwtiFTSgshA4ujqAKwwkXp2TQD2bCBM6TG4nSuvJbTx8yV5HYXocqfY34HYf6FpsExHxCKhRbv0vLBaI3apDondUK1N6kt1qAQaECZyl9Ji0Q/VWr3LaVHJZ4O2BrGCPLKUDVqvr6Rt/myAM3AlMQ/3fNbr+jZCuGwDmf2r8GAPauL1TNAE9LwHz9oNGk1rGdK0Z4O6bLKWIQPf26CRtI4WI5o3aBxcRyvwnTZqyyTrGHJwCsAx5Zh+C8MqBQtvZROEhYZr/7FvQ/xpXMDoLs6xnAYyMnfr+baNGju6kY1zdKM2ZXfzxjLfbER8ktyDnDbAhn+i/oKUP3D3Y4ZYPJLFoth0UnMxJ1BmCihBitVDtmaajYQyxkofeQqmiU1QMe1TneLYqGSArcTnU6RTUbH/EO4CcsGCjyj39Zs0IfqIa0L0BaqxTzhWmEha/lPS8k7ImhiEWv4zjmbFeoBjiPmnOTJfdObnHIl7apNms5mN44DIrNOxQn3gt0Tkr3hfHC8XN6lrFT6boUjSB8CLJ6BR5+CR/+TJ5wCOW49jshlDm9WDIrh5aXkZ7Zjh+BPoR9zYDZVseV7PsyFbL5rlAmhaW4Dw+lZ452atmwJonvsT4WZspNkPDeHOd2u2U5AfNjId4JTP0XQK9hPqPX4a+EZ+yLvDmHe6Bp0HSEwEoX7CK5iaEoWCEqaCBSnPoL7tQPUoztmDzgODt0L7hsBsGO5HneMskUbooFnVe/T8aXjiYWpMoiT9PfAzIgHSgp6DeHymACVr/HBfbeQWoGTKdA28Gc/sj5gIeftBvlwtby4l1mp5Bfg+5h20GvI2ckyAfCP9cNvrDy2fABPuRZy4EvY64PtYw1lBiQX3qnkFuOVeTQ3+MY/UoHIJ1KDFE7uhlCxzf+q0rdBh78Dz7L2aaaL4awsV611BnVhM0NFigmQZh2nT8Oey6P1jgOQveL5oQXTJzw2RBqqIfvITiLqgNKN6l5/woeNB0gt6PqwBX8WDFuNbFo+TRZ1KYG8NvPU+TYge90FEpwAeiNdgP+mDMjawAHLWUTC+EGLrKfgbZBpSCCk7CQR5EHK2i2z0QfcLOdjtI+SgKIWMRg0sSSQD5SkCp9+PAxNlco8PEv0lnu+NXQH5v0OT9WfRlFxoxk3wNDwAkwo25QrRDizpjy3RIJ2VtIEG8oHzIesv5GUMnA/5fqWgFIuL7gewybVm4XgD6hfg+QrQ90rGemvMv+K5sAcBvrVbC9wH4JQT2AdbzUiWPnejbuxGnRQbDabLe6j6ehnJBT0IyJL26/m4B4UvE2vEk4MrH9SMs1hjIhTfC3DMzVhdnBExxHyDqOONPa2kHPAYql6HJ06jJkDMbKTjZ2+5jHa5SEle8UYgmlh/xXuCKDYV/pjwyIrlHXTsPNHA/pfQ75lA0r3wdKzR9PkfpMGH1mgu2B/kwy4H2JqmJ1iYhVwoxD+9Ec2DkDyQKv1LVNoPtbH8FHbyU2Z5K9RwGJ4GxPIpsnm3GWcNFODdvQhUdblk8UnECQpJ7CDMiWNQsOYAdEWN5puEkTlhrgU52YoZO5IVMLVWU9LhBG8CeAi+RdkpQJhpt68cUlAMc1TnAKwD4CliSaQLodtTq+l0e0AuVJf2DJCEG3NfQv3+ECF3C0jOADi5D/50x72ntA8gD+7PYXoPzNM9IHk2Jk/B5KxLkIx7cadxWogP6Hs3hD+CepJvxWTbdChx2wFtvaQv7d3qttL3TLokilMbo+i0t69k2YJs+R55dcogtAsU9H8R9NRWzUg4SesU+QDbnobEn+BJWY/M/tggGnxxiuDPJwZEcBdkTHocCMHM55D4Tw3J7yDxr+LPc0FiTdLeB+ZG7MccI9UbAXV2fVXP67He5ThjDydRPrlVE+XhJMq/IuyJDcs2osT4b9O6ZwTt2c8BOLEaHY2RBJ9AuLlHC/wbwjQURtFQCN8OMA2H0TQcliH8B6bnGpHGGoTRupPHGLMAPrhdOGJjCdsXmErnPQR8/Q6Ab8FmjTMOh9zfIjwHqb2O0n0eAvgX2o43onmXgPAwVEo3UP4lD2nm33g6kHDqIU16PjDWv6Lng37pDZY/cCPlAeyaBqPogW+nxOO5vv1Ux00P45wTCNjueRm8eHjQLbjTiKpqN6YNioO0BKNwF7ZR/NsPa3NPuTDBN6IJrqcLR/W6rfSLxy0iHoOiRV3xchhylFQnbU6rkzan1Umbi06a8M1KyTfDhuluwnLkgvUSVb3SjNb+ySTgFjLqEdXvBFnY9ZqeWx7R5PAhcsEmIExnYx5ScCaufERb5BDwdoCt69FkeFhBnKALBEMfJQ/t5UdE9z1GPtRPj2jC8zj5UOZH0Y6BeY1SbQBl5QMO3JoehiJYp+R8FyQMjrQFScJ7GguEXg8PoMxB7wlmISlrJySOBlZNxVKNSvICCPedDT+lgDN5KgTiqiAp/WYIPQBRdtyuhYHfCOX+ghreBoQfINJ6JdkvWOubBMGw3c3UN9icnv7JknQE7x+4XttAvk476XAdtoEYPUUtR25V/75gKKE8fy28gt3A5GffAGY/qjH6AnkFHz2qTdcXaG/xN4RJ1C8wPC8U+pi2t3GBqVOkYOU3ZPmnPKZJ8re0FXk7wrT68B2jbePHcFW/RwucGIB5v2d4wOsI5v0J+/QH2rbUPa6t+kfrsn5IVl1qZG0zIx+S3GnFOVFK84bWoTuUDi0aA48cIlyimMdRcfaA1M+AxaexbEdd8s8QTv42SePvYMGnWuRv1Pq+4nidfIsi47a/ur2+XpxJ6BhFYfSPxM7irSReMcSg2xQsINzF2yksxX7fT5IeQbWySziIB4G4NxtBlT6usX0nOYgzHtfYvpMcxIrHNW9sJzmIRx7X+LqbJMD0BMC46KHCKU9oGukpOq0wG+AYL5yf9xC+RDySLe/VYRfeg3k7ChhxP4OwZG2BP39CDJanyfWMeFIbLM+Q63kdwKM7oq7r6HHkTfBWXkoBiQBhxdtW5XCP5IUQTp6NP1PwZxz+DIWfDDxDFIFmRa2u7wkILwdMyUcgkHwQf57Gn8fMNCB+R5zQE4OhgnJ45D90yeMBTs6Bn7hhgCR9BoTuBwzp8yDwGgTsS/ti2awO/YSkTMWqfD1ad3l/eRKT+6vJizD5tK41ObiO1kD6idZUYfJF3d+35jGX1iTVtdearE9UnAcx+4//BucJgTMZcbaNj4Q2WAjtpyi0lkl4ZPMCSsMdHsLKARGLOqTnY+s0sbrdA8VgRZ1mmN3ugaP36TpNzG73QNH4oE4Tozs96Oxovdb5d3kg3th69AQ+xOoWYnWZwu5LgKo+hmdcvSbVGd4o1SvrteozyM+vrdeUR4a3sNg4rqgMICPxw5a6BpIV+Ge9Ngnmez8MyKXOF6FeTzRa4hRZ3QXtReNS6tMxDXoDVccyg3waMh94S8/Dd7YswpAtM2yntv67nPblV+zUtrFWUPoDO7WDHivpNPYugEdsSZWky4Dw18MwaMmyWm8QbkZp2kpIwzM+QZAWAY98iyH5SVTbtlyAFsKDw+hRyv/lThLsPVAE2Yfo/IBGeY8h+cv+OHMfgxSMGfiWZsI9RwWvYMG0r9WqCiG1HMu9oVaVpksTKRhbgSlvqilJGIsxVRjbqMZK/Qbjau3jyKtjBvkgpH0KT+AubS/rHYO2l9VvFeb0Q4b9AFxFjh7R88xdGle/p5wlu3ClAx3Vi2QI3oPfeOtzGIo+jSrGGSBHQKl6eJ7AkrToVkaLbscBTqAOLgvA/Jcx/XZcBSgPQC8hYLc4qYQva3na8BVm1FHDA+TdgKwRnoTdGinDyOieCHB/QjiMEKIH0G8NlnwdNWeKIh/DBhzV8w0tJfuSAL24W5O9fmQRfAqwsHb7K8LWujwlqxwwoYV70ZO+4ni1dUvDcqfw4cvJh0+yA9APGxRpEv4RVL3kbT3/A6un820RJrRmezylWbcCvvkp9IbBtIsyYbHXn9KoE/CvAKf8ggs60SbNGUGjLsaEpnP8Hm3aHGjKiraLtWC89liON7msAxO5rwpyZxK5NUjuLJysXhIHbVYBqY/Ck7lH49aLdP6lBOBEOiV0kA7a3LNHmw5fbj1ocwcUvBce+XWXgzbP7KEdx3NY0y0oCR8G0SbEbsh4CJ73W2r6gLZU/wI4A7FFIP3Hg1qnfXksaKPKdFB16Bq+L4yaY4BC946ed9mroXmXjJqcvepa8bvMba34PVrpnL1XW+l8j0ya7Xu1Zb73mLrMJ7j/AZk4r+zFYwRgc8kfMjS6aB22H9J3ipHRcXovNfIKECc/hquSr4vtdz+gbDA8l1qoe40a2eVpgLdEtsAZT2uLY2/Qlrk8VqjBd4LsUDoJq4vDADzy4SCqctbTVGVMBg4eFIy9QdSDuZDnRniWP60N7z2tG9uembgAi904TjiBUyHnpGN6/vjTGoFjaYh/iKXpZOFYQ4xYCEkh6b3OgDh01d++tFJw6HpSAaZnYNLbniFGSy5yZuo1vmDay5COxx2fgkqPYVOmG5J/wZnwW1JrFzKEv4xJP2FysYH85b7oL/d8RvOZyeX0AJot8Mg3XetyGiMzXd5YkDUPOPbOAZLkRbIuZsypUP6zd/Xc9kyLrHtg24ue0aawF2kGXfeMNmO+SDPkI88IY+mgB/L792c0U+tlmk9zn4WR0VHAmDvxB+ycVzxwlJQ+q821r3qgybbvWW2Uv0Zz7ffPaibc61Tz6CYsa9LHAJVCILz1VgiPDsFmXPHoD+G0hAHCcHoOmvMtsuQzDxfDqcikGk79ngN7CQ0n1WhKmwzl0PoYCkjGv4tryh7tWyBZywcIG2oV9q2Hy/he+JymWfyFfXKR7JNPBuBCNrLhUXE+6zRU8cJ7er75Oc0eeYRsgJef03jwGNkAPz+novtKKKpQVFSxlQOBUBwvUYHCqAZMw97X817P48ojfoIjMhAH8vjntYEt4Due1wZ2ZKAY2FwM5Gg6nj6ECIkJpNVPZ3nMO7jr1pXAmLdxaaJbINYseD8gMPp9dTBGQAABOTWQBuOrz4vFdzzXH/tuFkzPSEJnsYybCxnzP9Tz489rctWJFmqVFwCmo/Od/MmVQxh3PABGHNe/gOtPeCdAF396U616YiKt1kbQsm/5Cxr9AgbzRKiQSH+xoD4xhd75ifIf60nL7Siz0XRSbC8UTcuGKvDo8xYgrw7b0ss/eQMNxKIs4VpN+EDPp8EjD/CnVn6MH5VMq8gS1scSSFmDqaP8hZ0xYiuk3A4xL3+g2TNjqLofqNw+tRymHsJy16nlkpAKjPkEY69XqQBuIt2xCweBmGI71oozH1OBk8pxePZp3FxNi8yWfRo3V/sgN0fu0+RsNS0ol2A6bfSsoVXi2xCmfSABvwxwzIc49tapq7vIy/U+WCf1+RtQ8SF45E0+xI2f99HyVuZgSWpE+kJ8hcoH2r6Ex7NB23cK8kVJ7Nug1RdEb4ysbdDoEfAjDZrkBlP+Nxo0yQ32bZmSsDmhvticcw3aIneYLxkIDdowEnDUfmgOvscid/BFEnPHosro62sLA9p2Hxd2agTVnLxfsHsong9PHyJJlWhwDxbz60XI+mIT2Pn7NSWZRfPryv3qVmIWza+P7dfOkw1iiOK9/VprBtEE++N+TfMNYaj5Oh3QyB1KM+yQA5qDOowm6HkHtDNkw5nbGbK57DmgJq3rEKH0QgHIakKxYS5Kb4um9LYccFd6tlzIu7pJtH4KLUe8fEC0Hj+4E7UM0A5HKkPE9Ki6HME0J8aQ/RNK852wfcIMqNV7SH1uGSpJH6HsPBogHwT0upMwtRzQOPYwmaqmFzXb92EyVZNe1GzjR8g2Hofwz1EEYxXrXtR8l8cCUMD3ApzlCxUNAiJ3oxp+IiD5BgjHHcPmTofQu5DFPncIeaCWoUJhX8ScnQytCvuHFzF5ECTjOwUcXz3cGZBsxncE4iK8tGNLe2gx2fsloBNPLd58Qs/vhkd+NiAZTy7atAg6uTgSTy4iRN/O3g2ob0NWzcR3EO6mI73UQvE+QoF4H6HfpWH4Ug6273SA7AcMO3YK+uUlbY3+M2Ja/ksa0z4jpt31ksakz4hJb77UsrFK8KWX1DX7L9Q1+/0rxJr9l+qa/f7Jwv87Q+j9D2rHGM9Se1OIwnMBdXT+d1AKEf8Vgaz6gZVZq4cJE6Ufcu3ba5fzdwwTy/nLoDl3wyN/57qcn3ZgmGD6y5B0CpMvqYy3IVRySlObPxExMUBcEkpWL0hwwCP/EpC8A+Dke4aKw2LZw3FxHuXu3QAZ2fctPCkHNcPvWIBq+AkP6ZjmIVmJgceIYTAhika/pzY6V4p9BtAOQx3wiKoDAKv/R3o+42DLCi3pgLsOqjrgIdIB2w9qOuBhep/vGSSEdMDD2rphCp0eeJQ97i8+tGWRs3GIY10viroioJ7+8DQe1I6H72fq8XAr4d4v3hXUNuYOqKi5FBWfA5oY+9Lu6zp403zJ4iZcafQqXxeaJtLoPb4utI9oI0XYhQ6m2egNvi70+p6NXt8TU0E66dUYemsug8rGLMZwpi9OzgNJNw/wJdNhNboAA0X+GFw0yRLhZGzoIBGmqWAw1TsQv0UgD/HF/b+Y8+jcDBV4bkAahvnii9xC4Qz3pbVHUozZAg/p+BxfVN4xw7HeEb6tZ6f3+mZ2zxFHoFdQVVIP/CdFVUBsPnIhSqaX51ReRZJrFl2GIXrTiaiMlNGwxdMZ0TIq54HoeFIxsfLZVUZ0kgnToj6GYDzyerEb5kUtmBe5YF7UgnlJC+alLpiXCcyxCaMkaToK7VuiazNBQj46reeXWyTyEPVyxMuaUXCIejrzZc0oOEQ9tuhl7bjhYWLHFoTXdxEw1DHyFZA66vnD4sVNbZfyCDG7+hXtaPlR376QPZEOkb9NDL8MaSnUGe9QZyjVmaIPfvMdtHcETMBewmv4mCpOfxWV8O0jsR/B40B18oNv8mgIJ2fhTwr+9MKfLvhjhp9BiyD3eshpvxEguwN+xpRl082v6SvhrwNQpt8GgecwcA8EpNcgsAMCwzGwCwIbMNAAgU6v48F0RPF+Nuq2qpX2zyCQ/g38DIa0MT9TdN1KO4MOGOkLP0Gf6nkGmmp4hYU811c102wvfaznmZ/oeXo4ZJr5OvkWT4wUtl4SlBkPj/y8b1+09e7F5KzXR4qpKQIRVfm6HA7L+g2ScBwPw6Rq3+Trc3BOx58M+ImbCtH2aRCyz8YfZw4dl18Hf7ZggQd8k3dBuO/D8PMhVJV8LxbajYUaMP/r+PNOjnpSBv1a42DoRjxgIN71jg0YDYxG+dgrbPfTIGRTPtfzzm+0HAKmFyiy39AE6ymy3cveaDkU7I94NwAs3h7Z45+gHookOQNwlFBf+2MJVMVMzEpPE/Kn3tBm/mfIUXjtDW2Se5ZM+1/e0FySN/xvBOLiGr21afsFqi34TWpMHTSmBiVykDiTMBXyHoen55taYwaasb7r39QaM9CMjal9U2vMQDM25sU3tVGTRdvsH7+pjRqAoTV/IEzNyTJjc65v1OgfbEb6dzZqOnSImc6KxfYfA+YbKqvpgrLTQNWkL/W8qVGjbApRxg5plEwhSlIOaZRMJUoWHNIomUqU3HJIo2QqUfI4wnReYJoZ6zyEMB0YmGbG48Z/AZxCLZ9hFi7WVGFkF5hRAXc5rDVkJjWk/LDWEYXUkAcB7k0XHW4xjwHy02pyhU/l8wX4h/DIJWbVp3o+V4yIDIgdiin3mtXV3PdyxfZiCcTOw5SVZnE4c4QEFG+CmNfhQRV+O7XZpkWJd3/uMIuTwSM6Q26M9vhSMyPWUNJ7h7FQB4gd05KygVIuHhYDAdflLVFjcWcJWfGycLGnQu5vzui5z1vAsxvxtfOD9P536ltaHwl4AsApnbAzXwmkFX5naUofnMReDVQP56Dae42AJW9pDHyd/O8dACfiRejyG/Qy+RGEDyARbwYiQT+9pa3XCzjriCb5XwQ+DvSN8IdIDLzxpbDpv6RqZhzR1iQqxZrEdWKTG7+PEdvzOjCf6c0TsUJ7Edp45Ws9X3BEa1etCdu1/Yg2l9SasMwrR7QTLbW0YvsFwAl0ZGWrCY+sxB2FdDqPsNWERBQc1c4zCPiBo9p5we0mbGsjwDHLY1rgxPxOLWHD2wDTOcMdJjxnmPG2mDweIky7EJqlQZ3fgdE1r7BMgwV/H6Zl48x3NLfrEZqdXwY4pifW86jJCm2KKUUL5jFT+nW4H4gLHo+bcDL7DvKNnoeLT/O9hpzVFp9Wek2C8OiNuLxd7HXveQj7ow3m8IoB/uX2xfwzvAZtGwcD2lsQLNHbD97HULc/N04Mjl9QVQd6qQPj+DgxGcwEdCvgkbt4uU4IP40TG7l++E2Wm7z64kZu/DFtMzct8DpRescFPX8aHjnLtXRcApSKnwvDmcjIOSbkHTlsxCbjYTyh+I0jrxOfThGg5WEA5ZVocewQbxxI3+h5P3jKj2nW9XYv7WUjGhzbvVBIQLH3F9c4eqmvCQjF95AXIbFYrscpAjv9LoE3E3BuhGdrC947WvCS8N2h4bWS7N3hpZ6e6k+id6cXip5S7WUlybvTS0w2flYSPA0MFDJRRUQcQS7EnrwBOINrTcF6cRoIaEj5AbzWY5oDFkQL/6Z3NakP0qMGznhXG7Ehemxh2bvaiA3V4wjd+K62jRKmFx7XZvXQUAc91rP3XWGOdqRthPi5qGzD9fixmWYsuZOWv/T0KZrqISmhKGqd9fi9FUC0MpdE8kH96CQ0Drfor3wHOjcEWoJv1+d+Cy4UPHK6PvldXFV+neSr7w1i0RmTNmNyht5l0TlrxA1CKIehfA3Sq0JZqMZ+DAUuY6HBWsoqNQVjvaB6eYiW8tANwjcMgNgsTBmlv8Y/bLxBrJCPg/QKzDNG3+aeUrZQW1V0PmHPeJg66Nwdd/VrjHSqOIa+0GXiOHuJN0O9RPyrOEt608lkcahThIU4+tAp5JgLmN+X0xtujTiSu3Bhs6bwzAegVjHDBNDBaPVVUzMBmfe2pAapqfROUzBvfadJhHF5RMrc2ZI9hmtuiBQ7Ol+SrmDDBqhHtkH+Zv0IvuZ7mgxmUlvsCFPbMjmWmfiepmkzCdvS91q2kaldr7+nzRLX8c0XYZYYkydJUwD57T+IWSKHivm+r67srVaT5BGcVvZGvU9mJQ6RIhSLcTz5GwgP0kPdq3zQOL6BVmPTGTRrGmRO94XAzRjoCIGjELB3h4C9D/yMzICfXKBi5FAI3AjNS3stT8jQY1DnAazXnwsZinsesKdfB/m+AxxxpxGaBpD3BwBJwJD0+QDFA2TrBBi7w2NfiRXdNl68PialxeSLtdtbIa0KHrmDaNMNH+B5sJR8/CYn4NkGBYo/0LaMkUkPYuZ+XN0yxg/B4+rrF8DPMWhPPeQp3iwA+p2X9XzbB1oX7fDEjEcRpv2iHZ6ooL7/QNuvfNhTLMT8sSKeFmIe8UScPT4EtZFL2wOe5wGeCLDYYHrMU6iNByaLk28C1lU/8OJKYQk8ThWuwQL0PbonPNXFcdo+fdKTXlf9UJMIAZ/8UExHdZ7Y8aOPq4tE9SptD6xImzRBrNx8Bg38Cx65wdN15WbhBNFlhmY9j4BHftlTHfZ3TxDbrRUQey+mHPV02XLNqpsg7L5hyKs/PQV7s96cIJTSVIz9w9NFIZFADgYOj7iMByo9qfOmHxddkkBfaToC/O0cfyN0G1pZHmbtYISOTOaB9MUVvRm/HDiQvsRiEGFiBxcGeL/aG/FYA7Iv0Syvgqqu/wk69rhmASUQqm0ImyIIxmJNACd9D6HX1AJyX3PyHxPwdUdoxxh+I/Ly2IoxgRR4enl6BAR+Pi5eAB84UZL+RA0wy99VixWTx9OFbPxicp3E6kwxuVUDaS6dTdsfMbT3UeIvFudx3hBhod3m+Ldqt7nkJYkV7xr/zPSJmvKpIO8o09YScbt4cb4H6SNL4mRc7UNL9pDqMEEb3/lZz4OaNMa8QYwZ0KS5JW+QWzKtSXNL3iTDekeT5pa8SW7JpSbNLXmT3JKsE5pb0kjHmB84obkhh82aMFML3yI3ZP8JzQ05Qm7IOyc06T5K/cJOapx6m/KrnyYxBwLpo+ll9QvmD6EpafZJQorvBGAH9t97qnuSdQ5SUCa2oEB+Y04+BOHkA/jzFPwMugeSn8c+/vBGWiNM/xz+pkC16d9BYDYGfoXAbRCwewB3R/rDz9Qrei5l1at1+qG+XqVu7gw6CLEJEJPeGTI+eRKj3oGoUj98mX2ipG6xr8cyW8Tm02eYSRokQR9t9dPc3T+I3c2YlNZhshhpWdDqHHjkv8wup2LyIGYqxm5Td50kywvY3bVoHO8X3X0M0lN/AQ/qlGaLvWDWbDHq7RfM6l64cO33qYfOuXDt95mFa+8lXPt9ZuHa+4kD6w3kgIItJg6sN5jFRyVCJUvoFNxmxyJcPTMCNNwBT+IpTewMJpz3Jp3SlKzBhIRsBDiRlLCRPJa3Tmly4UnW/4VTOPD2APoSNO2/MaoDj4p8bUSU0agzv6bTxOKLS1/T2Wsxjr6l+Bg6pfKdEfEMJBX+vRFVeAyp7x+MqL5x3e4ineIW9kOgZ+Y2yB5DGrwzaXBh2CwWhs1y9MeMr0xx2af3l2LfnyZJfbA/7GKyqQIeLP2Xnv/Rwoc0TyS6x0cgPEh4Gin3YR9pjlaaJxJf9JHGJhvNRZs/0kxYAf/rI205Nd0TlyLF0MrwxDXsmR9rLM2kaWbRxxpLB1Bdlz7Whtfdnkt+heFFluh9npt/B6Nv+1RJws58HsV2iGfyAAgn98Wf2CkouyenUjsl+0gAx+RPwf4fmz4T/to+gaFwEwTWYmA5BHZBYMA6LJb2y1Rh4O6B+t6FR77B09XADZkm5hJMuoLJ413nk7TEaWL8Rf0GCgAeeaI2c+WoKRh7PaZMUlOynpwm3gqtwqXO+Z598a3QV4CgvvhmqOlTwI1vh9KbodcBFNfor74Z+iBA6fhm6O5PXd8OTfhMfTt05r9wj2jEK4B/5B96vhqeMZum4Gzx3hQhICuEgDhQQCwDp+P7KWghThUW4ioofwyeeZ+1rBORRXj/Z5qFKOB3P9MsxClk6hlPa906jSzKAae1bp1OFuOU06gQcmdgTTg6x4qBiFUV/aXn809r1Y2hgVhzWjvMNYYG4henNWtnnKnF2kEBvY7G4djPtdoEvPZzbVXjehq35z7XbJkbTKr6V2XMlP8nyBh5PZtMYyCcJs0QnXYWSPsNHjnPpHZaxxnqua8AbIXJ7f3fGUI1IrYCeOR7TKpqRC37HcRcxNgFJtK0nb8g9bgTuWFBfyxNbIaWAieeggcXJoR6TDUgN0A9iuGVSkeFJn2h8dpG26abv9Bab6et072IPiq/AMYxtisxSNVK5EUnBCFGYRokBLV+Bi2BvrQsPhSTQF9eibkZrZ/eQTh/xnTHcB/6XohQXUl0jCqGtHYylRWKKS8os1+B8ECHUnYpc5gK5wuYpPAVIYXhKIVRFyDDPlRL1YGupFYFih0NnHdFWFgxVYExsmahbBBHSZ5EBbMxsNUX2xTYaq1sppWwGJr+7w7E/hekPhuYebZAM1SeC2xxm6LumAkKnaQ00NWSGhPYus81JrB1n2sMfZdR1DVO1EXnQq4LxPMVMdSW6wNb97BuEDTT7tr4QDzRIui5OTDTOVOjp0zQk7muJWZZoMv+kuWRIvyuB/bWHNG/B0FwsnQG/u4X2lAqER+i+UIbSiXUTSO/1D6wU0LdPAfgFKJxrjjG5iwVwjSPevgAJg9HUkuDhN9QN0WMncqg2yQDz1pTKEkoyRE4KhYHJZ+BcN8T8BN6Bo86zcCjTvAz6CbIlxmA2gugXpCW/gcEXoSAnUMvpAfCz6cAjYyAgBkwSzb8TYEn3V6A324m96u+UDj42RC/DB55VVCrg98XHfwemHHQVgeYMVhdPJRNg6i0cIf4iFCYbOCT4JFHuX5I6FiA64eEaEseM6ZiRvVjQgWAxaZFun9QKOsOQI4j7jxyYUxQ30oIb4H8yQsL8Fx6AX6GCDo6/S4INUF8+v0Q+BoDj0Ig7BxUvhcCY14qwOE+bORb8PcOxcDp6E4h1LcUCdkSqO4JSRlkcpnRCgpUza0sCUQCh1IpRj8VmGwG0elrgJ/BgL7v75By3zl8WwaS7V0gOr0X/ByCqDEpM2nnfmV6FgR+wpjRM8Xu1MgbIRDGDDiphBQJmvbDk34C0M3+iua/IqH7ekGuvvDIDpWirKFFQpUeQ4JmqbSnTVNjMyDvdZi/SE0ZsQhStkLM+/CkF0HFtVTBBrUCjD6NBVapFdiaAUKZT18CmS9/RTsfy4vBnUNttVrMaLmQPtnDwKPPa8eFKujF89HntdfUK9xfU69wf029knIvOa8dFqrUXlMfiBvzazh95pRWndeKtSAae+tc3khfTzPgnvOaYVPHA4GerJnFgg/nkTtb1AWKDFyK5XgW9yHu8k6NFHUUcj+Po7jWQ9VJpIdq6BhjNOmVGg9U1dFzMZTQspO+1UNoHqRkGx2CJB23YhaMUNRxsTpXHddD16rjeuhacffQabh7iK91Eu6eOtqlJ1OvF70zE0PvHsXp8N2jGHpHKZ7yi/eTRBjnAouudSqx0jswQgcW60i/9aBJ4gtxQLEHHlCMGjsb3D5crYzycCU40qOV4EhihiAt0qOVtGiP1heKYuhcqDgD2pXyx9DZ0m50tlScK+1G50qRzO7EyIHYbMHSZ7Cenh6txMdqLO3RI7PHbOHpZiZSgF4YOyHakAttoDZ9IuA0cTocgQewF2aKlz6mgmDgvVofndeUeAG99GG4oG2VFNBLH90vaGfvCuiljykI4zI8fbDq5wtiMaaQznuGfK0JooPgzK/xFTEU/CKCJ3+tbUVUel9AwTTPlSQcRREohou9kx+FcPL9+HMX/MT1g+gxTxXTvrj9APzNWlUiSSifuSS3HsneIFvJDH9+xlLfwE/fz+Dnpq/xgwr4SlkYJG4EKL0rBF7CQCIEPoeA3Q6B9OHw8/o3AI2DwIAps0j131ciBsxEvYHfBI+8w0O1zF4oEZsUfvhV3SSX948uf4MFm0rEkt3DBgOvg0fuK95kC/4WU39SUz/kBn4FHjlfpPbE1Cy/OWJ7JAFRD3N9zy2r1xxRay4mDde5bqoMniNwFmFSjsBno9pmqCnTjAZeZERtKVJHU22nIRVH5ios97hH8mPIxAfwp2oWrl5CdPrTEJoOudMPQqAOAvYjyLIT8PMHQmdm4cdjMOo3+Bn8HboIII+rMeAHgaPf4VtRUGUCXgMQ5yH2QoG0v9T2PApkPY2kDfRwaRPNOMOwyBMe2hpmWvxcoZrTPQ18FDzyI2paWu5cgewMxP6FKSM96Jsb/b7XEKZtmiuOGHY2GfgYeOQbPPriEcMKyNIXjxke+R5PJASrRw39flBfTOv/Q+sZ671qNbOh/CLEMdWV5izTPPGW2CKke/q/eY9uS3Drm2fjf3A9p90Xz2nf9kPr22ex80S1z2ORuS7vwz2NnnbacDU50svALfDIC904iRQdw5KL/w1Fv7hQ9N61FHW82EKRZMS3ZFp8/QDJhLrF+KprpI9k2ouRJ1wjAyVTI8DiB8uY8Mo44x+ueYIk07dYEM+fuywnmGSA6cfYyzWlo2Tq2JIy2DXFTzIlYwqRMcU1xUsyjcbs5a6R4ZKpALNj5eKHGrXFNU8nybQeC9a7Rpok04MY+YprpLdk2oORTfCDn1qgSJ2UcgZXmu6QL5TidYcHwSExvYnZ/nTN5iGl7MAVqPvk7ylbZk/OjRE3ueRgUsoSzPGY3PsmytEMiPwgmOKPs/ZzdPrKg8VAwbG1eOnenXhJkSyPTdQDcJcAxn2Ey0h7xJd4PFgEZJZuxgUxKakXXiuwPwemNx8Dz4Upgq5d1CWq1y6qlxWKWwyZuE9REfcpamniAkZFvZtQ3MqoiOsYFXEdoyKuY1TEBYw6nQe+vaneeKTHG4/EvS+SHm88EmGdHm88qlO/8G/QLcbPaYG3LX2HJliIjO9iy0Z6ISAYo40wSQVjUc9pkhxaR9c/6PCz16Z5SMJvWCqRSmEbsa0FIORehCABEVQhWAoA1vQGAN6ToWAVZP4dHk+a55KxvA++FoUHYeVk37ch+Afk9cNDYf6ZEBnQJAx3M87RKwW778I5ORCB0Sj0eA2XUQqeR7cr4p1ikh2vQZFjRkjSggADj/BRO+EurRPcuKh2gg6Lszi6j1LtD5X1an+ovaNeeik60EOHLdCS1B4TXaXX6fBaKaUzfo7HgHcWyqnI81vdfiTdSiBK6Y4Hzw24P0Asdck0j3SGt6zePaXEeeLdU0p8H9HDnvjGh2K5VfSxCS0kxeot7kWTvDphMXi8nXT3lIcOa9AhIiUR430KZe3uKaWfCe+eUvoXintRPEF0Uieod0+Z8HYVJW2BrN495YUhxEWI7YDYAhE6xKTYMc14RFbvnlIGmvDuKSUrWuA14Qk/ZdAyca2FJ573VAYfEQSb0I5Xhtyq3pbgocNvFOoQjTLsE7ySUbdOppvjJOke/IZHkoxIsXtvhCf8R6gO65L7YPQwAP1pkbYPyfbYgFA0pZIxrfBHlKg7USZiEdFsGeucCkiehWc1IqKFgVnv4fcjAAykF2tmYa5mAAOQVXIJokpqBgnET8kH09HVudjH2pdrJN8rUEVyIt1fjJkPAvY4XwMfC4X8CMf7GL0CQTrS+z4WeBRBcmnexwrfQJA8mg9QGM4CGPAY4jyOZbtfoltOUb7M8+gdt0S6vQBLJkBVZfAMvqQ16Bts0E2XtOq+weoeuKRV9w0W+vSShv87xP8ngCFU+/ckcs5FoWT//3oDIJZ834Yq52LmUGrgKoj09YO+uKzVGII1DrussTAEq1h2WWNhGBZ6GMCw02rJDnSRT0eUD5igOuKa8gzEP1n2g9TR8LzagnsS4v4BkdGx0alYKPEn6I9VqDgI0XSMm/kTaZBCRNYZkQ2XsWQuIHsenkWQHEi9NwwF8aGfNH4MQ2I/BjCAqsvGQoF4tWt4JaC6ATFZaLyyTtSaeGyNFP4kJA7GxIHEE7kTCeUADHcmgRxAH77oIvtjpkrCcBDoQF3V+4rWuAqsbfIVjXEVSMsKACPE1/qw0DkARW+8PQ/KBm0JwdtmUlDTHSfPeGKEQ5KrsGLdz1CyXAViEIDmViMwCIGbVKAAAaJxA1ZQ8TPeRofeDIHP/6yJ+UYXMY/EWyWRt4X+Bj7PH23LqIUAfgu5pcjH1URMKMfEndGYKEW+oiZgZKVLQsxPkLAbO9AL2bMLKw76BdxO5HkjThNPR9VCMBniojfp6JIOxPMl4Pi2tfbiX8S88TDqeGkYXgYkl4+UpEuBBr4qQJ0QDiS6XIas/69dhuwhLkPGS4s9qtZcdWmxh+ulxR46vQ7v6tUuIsbbMJkFX6EzLFLU2zCZheNtmLqW2zA53oapC5C3qpei4W2YOrMKco63YeoCVdCL4z0CuiAV9ON4G6YuWAUDOd6GqQtRwVCOt2HqQlUwnONtmLowFYzgeBumrqMKxnC8DVMXroI9+ACaW1QwjuNtmLou9HlCvCAOb8PURcpvKuKSVbwNU9dyGybH2zB1LbdhcrwNU9dTXiJuw+R4G6au5TZMjrdh6lpuw+R4G6bOKh8lzEM53oap6yN/oogL/vA2TJ1Nvl3chkmXJesGyzWSuNQPb8PUDVHBPI63YeqGquBEjrdh6oap4FSOt2HqWm7D5Hgbpq7lNkyOt2HqRspfKtptmCsgZMTO9cTLMHVP0RXOdBmm7jkTXoape14wRzLhZZi6FwRvdCa8DFPnehmmgmcdUCi8sFWI0vse7TJMiPC65BrbXTLEMvVyRiXQhJczKkGiUyQTvkqgBKuCY8LLGZWQWKZVhHgM+Uy9nFHpZMLLGZXOWmG8nFHpIrLrJJ8anG28cT26UMYRdQKeDTDqfOk2xJmY/CKAfqSgZuI1thcA9Adz0oE4An91OciBX9bwCUf9fBYHfa58GpBNNRt49181hKMR4TgA/XA7aTSyp+xXgW8M4qsBIABbJMD9mEaqcixmfQdAMy7r3OJBJmTQZTQh++vEZTrKIBmDLAhrUrKwJu3OsMAlkHAUbbTrxPU/Is9YzBMMtstY5E4Q7rkq41AyQsDMvh4JkEILsKrfsD2dxJoRtAfVz3ctbeqIWMJ+A5A2bTsigkIE6aPCHbHQE7+pLQ6nG05/h0T6wnA45r0ZQfrCcDiqi09+19rcGTP3/4PeRJa7IInjAQjDEYtcdgIl6+CRu3WIRw0aNg5vXoZQEJA3FB45ucNMADtMxJ8x8NPxPGje8FJdiyleLvgYi3z0QqBFAAMkI7bc6xbXyEDJuBjgTuhRsTtR0mW5E3pU7C4BSB1CUVEftqKifm6UJDVEA+YgVVFvSFEVtdCTmt/kZseTAe8RN6LVgNeJe7wnY4ybLa8TV3kvdLHdVVcKJwLjcUrQLPy41lweuiewE0gDiClBh/qep2GlOtT3vAovVNehoufVz5LT5KHD/DpU7XrL12jTP6Gpdr3FiKrd4C3HiTFmRNVuCJBPihFqRNVuMKsgN6JqNwSqoJcRVbshSAX9jKjaDcEqGGhE1W4IUcFQI6p2Q6gKhhtRtRvCVDDCiKrd0FEFY4woKIZwFexhRNVu6KSCcUZU7YYu8nmh2o2o2g2R8vdCtRtRtRui1Rb1M6JqN3RXQZsRVbuhp/yyUO1GVO2GeHmmUO1GVO0GYVOBajeiajdY5ctCtRtRtRv6yDrSQMOMqNoNNvmIUO1GVO2GwXKTUO1GVO2GISqYZ0TVbhiqghONqNoNw1RwqhFVu2G4LC68LzCiajfkqDQXGVG1G0bKnkyodtLnhqf4eU2fG4Q+Nzx/3kWfG1743kWfGw7EqfocbHUFLXaUBC9sCkqH94Okz0G+UJ93cI3tLunwxlsloytaFrpeeEs9Rsg6vAZWGW6j6IEYjRGy7zSm3gOqvOJH94D6iXtAyR3VdS7BO53XogrBXiX3uvVH4jhyyNPUxZnR09TFq6JpRjNUZ2ly8TR11gPq3OF1FAL4EMnoaWIN5GnqEjE+MFineZo64Wnq+geLC97NMyRd6kJXT1OX1k2neZoYWqshRk/zU6Z6mjo7pvFlOtXT1AlPU5f1Pmv1NHWD4qgWnRntVt3gZbpWT1M3pKnF00SmkaepG3aHDhmagtrwCRzj8hST1BfPT/wg6JU4BryS8WLFySa6SXbKRpFk8sWzNlMXqjyiY3fTBMRNtAU9/SedViUi99Kh8QJP8IOi/8fhbBKJkfJtotrb6jzUajGQCdVeJ99ioqMAt34ikgQRt3kSlGRKQdfu9kRxh6qJ7v+4I0ZPw08QeKcgKdN0AE+13LWHyg0y5WBaVQUROMLUGaFqkTPXRG8Gb4glLNcBnUhiUBNqOfku00ByOVT2mPCTf/JdTR7CTPDQEbe+83AR6QSJIz14CYkfM5s+QRtiW4VafClucGzXWEgU7uiv18YO4vFCsETSmBY0WY9k7BBk7FDZJcjYMVmvkYHxIc4Uuu8Nr+jx34SfYEXhDsCQ+EGmidFwj+gP7JvQNyDpumSs5AXZODQZ93JltRojMaZBVumVQpsh7+G+mLc/MxLvU5lgvmSkzfw0Nky1oELvBtvsryS8+zJbF0ZmUo4O4zAvvZg8Qkw+MBE4UBRG6lRZMlqwHaNU0Mv4LKaOVkE/473I0FwVDDRGY+oYFQw1PompY1Uw3PgDSss4FYww3o6p16lgDHDgM7xe9QWgaiTWeYRayjoSF95CJkjhJyBxAmKJk2UMs04dMLWXjD0vKcKOCv8TUhr6iPdsCUcnwhEpCyQzOZ4Qwy6TqVPkTrSrtk1GZdiJViu2yZipE7nm20l1dxZvlFCBLrRI8bAIE+MfkZHxYsfxUVGNh64AosK/ATzLsfYiUZlKSyFlEpU5XCpzUGWdqAKHfE9LxcWiMmrtLGptFxpDs6mBXeIRT4mMgtUlC9k6h8IRUuQetPaux6xZOsKBhs7D8NwNVlqUeB9Rhw1/BeBo5JwREh+ERx6qi+kBhMWE448fHjOcZkRjE7zgJIC+gALdMzmdDuk2Av6a/gXyhR/Kl6Jnw283wHEL4tklx2xDFJvx5xb8wTOaPUMBUY96zPgCXl4Ahbu/TtimdnsX/g5FbJ9w4VrH/gtq/gr77IhOVvvrLSK7FwnzWyTMnUiS39K19stRHfULSr78tg4HjBS3FPf7nciRZp28GwjMDzHw0n9p3PiR0D4AcLy434dQf4rphP5HQh/xpyRZkLf9QvF+L13MCTwsfQR/8MuZPXORS2cgNAIydr9I58sGQTlrgEmSPkRyPBTqjqlQ+Sl4nJAvirqRKdh12xCmrhTwEYATxAfHFdK31TyBJEan0NRS7ZVAQqNT7hEvIyVGp5DFioW/hcJdmugMK8GJM+keLgWH0F+QJvWeB2TFY211NFefBopYqIEH/CVJfZ7Cgk+KWqQ+z7pAuj5EggrxpAbEUI+SnbQYO2snjQTrAUB+GiX3iEJi7weYx8GTDtijqJ8OK9hPsxCm6eYt5SEouP4v3AfDJamjCs4C+DUIyToV5toIxDafCQ4Cph/guR9LE4dKGXLoTYATSGeWsoWC3Cgi9ybWRG6CLAmW3cQEy7z60lArY4g1B5ITaaiWM6QZX6vrcglhJ0MKUn7HBi5g96HCrS7qR7Kygd0MhMDQRzUefgCyLUSOfKKoeoba+hG1tRNR+hH1pVAJHys4g4jh/qlCMky8+Ix4Ib4m8ZcihUtgmj6MBXyZipaKexOZnajBPgznrE40A/tQ4wVaP2qaZJXBeluHsjZKoLiIXd0Bhj00UrBwBLHwEMKEcQRhCQbnSfBwJPFwpKzxcKQ7D0dTRatljYe5RNyrssbDMcRDwbTJLDTMwFM/hGYVQuQiHFB5LKbKC7/pAD9pi+DnZyjaswo1xgMAdXsMfkIUWbI9DYHPw/AokgXZfQwLT2RpX0E4FtJjPkIs78BPz/NY+JIXqZPeeF9DLHJnP4l7BLR9IDzDoIgQ9wY3cW9wE/cGTdzDMO0ADqikdSgNL1KQGvySkPzfoJ5XER4nRCAXKvkGnnKoKJ4keywN362KxlgBH1c0xo5VxzMXjL2OBENhwEhxhlBBbdWF6rxBwUrFwerxJFi9IJ9g8mLlGFQr2eN8wahBxXCSyRchpk9HA89gsjoMT5D9MBtgIW5fMCn8Lijhj7LygCZu9Am9+xjNlmRn3Ed2hpDu+xkWEOL2IBOaGPPUkACJ3q9lOD5EFfsZDBesNfwDKDcIK6p3Gy5PKoiwEyGpU1pleSdxQiB5BYZFLz+YkvrQZ4PV4sSgtQomdKKRtFZBt1LMHmuJcaKKdTQiBdpbXNDuUIA2zBZ5O9qGhxCfLGbRTODbhE4Gvgl5Rwj/YljRQYTxs9MAY2VXEKbKBRysA/jlJHKSEC5EmJgI7gAuLQEselqheeYLgFOI4Ywogbk2kWjWEdNSPLQOTtQlAjmpeMse9rEUhq8N6mJugHBMNvykpcPP9ZC9ZwIk9ZgOUI+58NN9Cb31OdW2Fv6eCseRlDoMv1AL4CJEEqqL8YSGpf0JEU4oH9OMKM9hHV0n4m2XiC4Y3yqJ8sMTzJshpTGMvmOTthfC27DMoxDoeRpzvgQh21u+aAhhXVLkB8jaqcjab1R9Dgl3wXMaCiaIa2dJ1mA0ii76lsQqhdjwHUmsnCtFLsRTlncj5wM9CE8V4GjobOBeeq2L/D2wi/oBnEBd5O9xUozrBOohDeQJ1EEBKuiVQP0T4EHGdLVfFL2cFeCBdTyAuB9GXGYPHKeNeq37gig9zqANpWQPKQM/cePAAXBZloVZe4nmSrLqfkKjLol2kq6QNWuNw1eskZIjgjEHoTHeXQx8tkFTHm+RFr4HYGELCBgbRLrjLVUpc6EfjpISjkZGvQWofoRHPsZiVgOcqUV0uwugVwBhj/sCSFValweCFGMLZwjJ9wMK+kQZ+JUWKqbrsNYorqkwAQ/kmgqbrnMjo4D8I2GTzdQh+mTiUKFwSJzXpRA/HOTNKc68xBE4ARWRnzAdkCY+h8nFBDsRPoLUzSJ4M8I/IebZBD+DME2DJQQ3IswRnkPweYRHoe6eSzA3AkyG9TyCeyB8O6aXEmxDOAKF9SaC1yJMVtt8HSr/ewHuMgnzL9ZVQsssD0CTOF5J/Lgupt4gHD00Q7024FccWxzLjGfxe6u96cJu1pEQfob4Oj6Abf1MR5PJtCCoAHH3FhouE3qhDh+j1hOJNHmcMGo9IWDmqfVEovtk0od0nQWShQORRMZhCtWZrGCloG5Ep/WluUWomiylFmqNxhY4IbAEHjlDiXkCvwNfS+fGwvHKDM++dPedq42SROafGMV95VZFmyVHREjh30OhUqTD4FbIQ7hK1It6uXUC4C4ukVG4RLS07Ul5BOIwOULqEBIMqgrxHienSPUoP0SsHamvP8QCEVLGEMg4GSfHb7RO+Jo6gQTwa8wk+uNr0R8/h0jSBeyztwW9u4ERuJQ8AhgaRRmPkDe3CPlPp4qFS4vjk04VH1VBLnrrKOV+qKW3jsqqKS966x2q5DXsrZPI2mMyEiDsq3eJR79gGplr7xFmIZnvU6uDTTCRpGNrPxC1OksSadHoQ/lfgCbbpE0kzfKP0I4BQ3GDF/hxDgCMkH+UY1IBjrHiTwye50s9CHlQKCM6kODGlOEnY/sB0GNlEF5gCT+DgR+payDfZwa0fvD9FDnmRxwIqQ9BLMpJkYhNexrCC4CMmMfw5d+e6xHPQTy7fwR/TuAxxzPidpPUj6Aoit9WLHpedhE9kspNUOlWeORvXZNg5KGx7kEDdyDuDujv/J42BAbi7oD+LgFIs0Jwd8DaBxfGdo2VpLH9DPxgtLo78E4qNDn1v76NaxTbuNMtELyVjprPAgEx0vWLtLlrrLr/qs1dI23uKvf2h+CGCa10KB8H4Hk4zK7s6QfBmgnUdr3uk9bdX8Nt8OerNGANj+N74S+PP6xuCziLCyRuWaItBiFkXaPu926CynjCEnW79xJCiWvU3d5JQDvvna5u9uIKOe8joGBeD4OKJ6WrO7+4XM6TBdSB34y19x2sbgPfhlCKgCIkpS4VF+kRNOTj+Rao8TpDb67vj6vzZ9Q96iBcM0/qqm4VT4Q2G5JfUneKEbtBxR7HxyO6FJGWQHUZ+om0JO5EnP1fUneJN2Na6mB1k9iC5dLq1T3ibEyz1atbxMuxPvttstgDrsW09MHqFvDjCGUIKFdSwnBz5nXsDsMd0JpzJAbxfCRKpeVDtTV/4sa9VT1JJym4r8QSUxD8Ci+MEhzGTSWWhNJhmKtTd3g8LZ64w2Nq2bz3xB0eU4C686DzxB0ek1kFuSfu8JgCVdDLE3d4TEEq6OeJOzymYBUM9MQdHlOICoZ64g6PKVQFwz1xh8cUpoIRnrjDY+qogjGeuMNjClfBHp7ocJk6qWCcJ+7wmLrIz9GabIIn7vCYIuUDBCZ54g6PqWXz3hN3eEwtm/eeuMNj6ilXiY7xRAE3tWzee+IOj6ll894Td3hMVvlVwjzUE3d4TH3k9wkc5ok7PCabvF30nCfKr2mwLDrlOk8UWdMQFczzxB0e01AVnOiJOzymYSo41RM9L1PL5r0n7vCYWjbvPXGHxzRSPqnTNu/LsTSS7oWbPaanDMgK2uwxPcdxs8f0vGCOxHGzx/SC4I2O42aPyWXzfhXdM7YTYr2xVYjS53l1834xRHhfcI3tLilXUrDoZSr2G54hi8MLJ5QU1G8xJg+M9odf33398H6CBAiu7Y+bPXH+tjQ8NFmI8ZISCX+UhWmUfwD8BszCDVv8MUv4Q1f/XPWDvNL2vQ2PQK7ziFkebiyZOVeSs7eI3S1j+TSHJOcISDGWSvKIR9TFfu9nPPDNI0kKpCYa3gZwB7QnU87FfGPeVrcyvD9V81GjMySDARfX+mPG6/kPONnfYNCrIw+bM96gLuMH7cC9tDEAGSHeT76RD8f0ifmKS+5JO8TGG/8Fd9EnC4gby4rmSPKUMXqx/6LXIQ2GdwAMg0IH5WKehK+azBLZpWAyW2bvEKdYAFvwM6losd4h5iMF5h46aTVHkJbJG7HquQix6FUyvx57bd47BK6W+aOYt/QzAm+XJW8MtTDAIHl/DzAyT2XcaJiMuwD1ofLN/DMsWqGSxd/Aaiq1Fr6PLVw92iBmgpVY5xqR5sUHI71rBeTH8YOn8jqRMxBaj5UbSgGMRsGS7+TnEfFdah9LIZvRRpbruIxWTV0AF7UfwBrqQrnoDQNG/wJREfJDfC6S+bCbjDyiych0Z6EkPyoq13F6G/kxdYgYp82HnI9/qE5f9OrwExPU6SsBq3vygk5MX+SG1ZUSllBoApKo1yENfnb4OZuKwrrX/xc8m+b/ARb1T++PZoOhEJIbcLqTj/As2sbQGlSCxtcRrUEht3HM9DZ/Et9MevtZo8j0JZ4qeXu/Ud22wejHgFuhwfJ+XoR8PXCH2jvJLpDMYxF6UeurF7E/XnrFKPpKRnYfFJCXOHf9cqNR7N/MX3STJL+Ci9cs+ryOj0M0r35PIPD+ODbgNRz4LHp/R+6LDX0decuiD3bkeqzlDXFw97WOnKT4TSSIRTd25H6IqlGAhzoGX8DMhzrjlivnmCH4VsR2OIQ2IA1UpDvmeetPqv1IR/4HZjji40liHm4snrcAbOLOAowTXfQ2sptFV8VB7yBD9TrkmF43HmTcG1uFwk6CHwqCDzByQcBaLFbn5ZIL67ve0ApjhdjnBP8leVsALtCGkywZhgP8Qz9sxEf8aRzWH6l9KYU5cKfhJDbqS3GgpwNJ2RcoZVLHeyG1Iyb+QLqShZfNkOTvsXAHGiD4zRepE3XzRfp+TOd3oMS8NDrkI4p0wSLhMpaJoDLhVE8krXx1Fp9Qi/oOSiGRaMMehqcWbOzoG9XLKWIy8EvV1f1oO0A+Bsn+MQb+FmTpSrQaFCT2Z4C7FYObJW4TH9OdOldAUV6y1APp8FSQDjDcEeMb/elqcvF1YcCYiQ/kjCWsIYQV6u96qwCxTImGKEwg0utQNno2IbqjSGC0QIeoJsBzWwu6qBZ0JINRCpZ5TkMXo6HDwj274fFdA5JvEeimAqol8BxvQRffgo6aGU/oFG8VnVVt5lxE9HYKXV0jPpMASDbCE+mtIeqnIYqlgdRPwZEE3h/hSVXxvIl4ZvSnS87FR+EAx4UYfOdP64QcwrMYYerZHGJ8A9ZDc5KAwY8kxCNVxHPwi3+7sfwZgfgiIGXdDPxUC+IvCLHeB+AX+xGME7YN4acx/UsFkaxAmDTpl8SKJ3xUVpylmiLxZQP5nIJ6rldRwXxJ/kpZDMWOQ7ZeM8Djkc8TfZcBjsPzXEqIeM//Z/o8ZJk39k0BHTy8CTv8c6T7Y7rqXnyd2g9ofgCeTr4anSEM6RwOsKg8jGHlkblIcwf6dD3R15EhfVRniKjTH+uMx8+JyeewS54RnJEjiB17iR1daArZq6Cei6Bm7yX6I2jaEeEuNOmoYZpWnlY+pGs2kbynFayBSHjWhUXPKa1UPk9Fe8ycD+x6gcIW8r4/UYAN2Lgo/PIYsmIrtPzB7iDu0FrrZYh4DgMSVPArBrwgYPeDQCgEbsZADAROYQC/wxjuDwEbBKZCIAG/t5cwDn4Sp8DP7RCVOBsCz0Cg90IIVEE9Us8C+hILNmSgKpEQ3bEHSCXki6Wl0gHKXFWySSAHqAKoi92RSuAsDyGPZM1lUWokfW9gkILYJe8yX2GKCiOkz/cAjsCiPWU5Amoyxhp4UIAsJSEPe5CCGwBgL9BBsUTSLIRmaVANQMk0WAXMnFUr+z7fAYzcvzCyP0U+hZkuIpwq303fC9myEhRgKPZwArb2L1n2g3rD4TkboI3hP2V1DEs9u+JKdR4imCILxQY511lAZYK13pX4MklGvtgRJs02SUYdNglhUk2TqNzLCBO5AvYJhNpeIQtS7krfWffDlk6lREugaKmANgAkGiXgdxGmiVjAP2BuZNo0YlpoEIA0x0+XceobAHDkhP50tzsaC5Hb+rWEe5EwFghdBvmS96K8z5R7+dMdqEtT6H3gS/LAWBq3yBZvfD8ap/h+NDnKUudCiBiHOGXXKUoiYiLJgBEiJfW/Dy+5REq8ICvlMomJjCRKfAomNZKsbD+iD3rgBnwt/g1sbaxQDVXA/Vv6wLwWpKm0ngwJuxKkqqhepAIEC+IYsiAuWFbVVDxDNTUC4O40Pi2kRUoQJkqtpEm2Apz8QiusOEd0p7lWgD9h9i9a4aAQgGmICzgZ4Y9a069HmLSKgJ0If4joExhqnM0IB2L+RIYMfAbhufiJk94Efwhw2psBoKWBf8c60NarbRSE+17sgJ+zhVCXUDyeav8VdxtgmrckGngBPPJzzFYBsA1vZEzXYhPvAKg3lcgYDOxtgrjc3gbenbrhENE4GJIzsWe/h8Q+kCgfYbaVANvK8RtEut4iNhF3yfIIlVC6cULpclS6PQPx9WUf5PMMIQJV0G9P9zXwBaFa300j/bsd4CQy9qYpODm8EqpNP9NIkejDIJ0Ui4DTw7R5cTrBd2I66WcB7wxTZaGAdHEv8A5nknL/MUxjvYBndYDBQZ5WoYICJ7rZQUjuxrSPWmEcnyJ0FFJ6kHwVKShfPUi2imkKTHMGij7wQyO/Qmnlf98eEEO8v9KBeuvRQHyrRZIeSjLwK/DI6xUXFr+oxhKLjR2pxEkogTakBDzsCI/8pGJ7FvE/if2rxSa+AlB3KpHGgkQdmR1pL7UVf9+pSA3iTqWc1Hv/Cqbe60lTZin23npsf57blDneZcoc7zJljhdTJnXLeJcpU4R7UPfmKzjrS1HPAm6UjoNArpRi4HlAQzR+uhW0bnQf+quLzqC/PDqH/npFj6e/fgNmBIlLLXp+h+SW9SOahYoBVLh2u7qjJl860g27AU4ignU04gLDNfnSkbQXIEzvUQm4MVyTJwH36wQwzfk6hnP++k6qfOmFrgHJMFDGE5AglCon+BuA054OFtP6KuwDP2Z7F6ZdWyP+vIQ/z+JPPf48hD/3w0/f3Xg3sfvUHdsZZnOcugfitC1JWci/84jSi9kexsX3B/FnM/7cgT9rcPn8GHDkJDwq0wpwIsZeblkT8pJMyEb68UaTqSXFUzIZAPaOc43kkikc4EE/4Kj+CB0jD7a/H+eD7kJuf0zrzuwgRAzG1XbPO3HhSpYH42q7510CAMdZ9tMHwG9XH7OJ+XTEg8bBEvNJNaWZhuO9wDEAmEzpYHfqIMhF0MNXMsEfPf7BXAazLJsxHxajyxIIg8dwcz+gythNwkyeGl5cJG2pAjPgFGTGLN6RkNMKGXzwNLMv5OKtufzMUMgG5rp/EGTv7oUFAjwItVmt30OgDyQ0eG5VjdeL+GALgQhgcX85QM4EZoCNoNWjABia5AaGtYLgGrpi0Mp39GhpDRYId0EHZHdKcmFnZ5OMpWA4tiDyaEUU4dHCN0QU6ZoHb4aMUjF7IKroJBcgJqmlpCR1NUE5SepmwpdGXXG0NrlHKyasqWeSW8WxLiC0oFeSW+Y4FxA/qOOpgmCdShasWrTQCl6yOdF8vT7PlA9dAb5XIn530CRfDzh6JwGEyPokUXSShgRmbHeKsd19PVxal4LpGV7XtglkREQiIf2pAvxyvycEMCatk9xKjc1Drd/uSfWnt3YSFspoBTO8UOQyXSMwx4BWqRAR/8+OJPdB5OvCPRcR9vNwa7//1e0PuLr9/882NwRiNHS+3i4E+XlLopA/6pYATZmYdW4UBPaA+HCYIIKEkgGlIVRMiLuKCXVna5imcTq4a5yOOhdywq+WXJTtTq6y3dk9h9Y7XTzcxmOEh9sAjGxvQES1pWOice8qxn0Id3XXBt3ch3939+Hfw1XvkOIYbk4imYh1V1+93JVKXNuayF19uKoxqzaeQXm465JEoUt6X6sp+rhqyCTXEZ/sqh36Cg2Z0qp1+gm91F+oo1RNPaUJ9WDTlIgdC2LGdE2/ZGiaJFNT7QNMuMEtKMYYUX+Wu4YZ1AqGQ/7BLiA4QUNcQBhYQ68ejsNa+XTNcOQwHHlHLoYj/4+HI29zOHJ1OFJ+ruX3ch8U3tro9NFGp6+aXx1Efu6j2d9VfwTo3FCbYVxyHJeBrZN/kBiZYlbn7gotxH0Sdp3Tcbi6FmmVRTzLInVUh9NVCMPdNWQnrbc7t854XVy4AT0e0VKJm8BHuo/eKPehGO0+1GPcFWJXV5QawquHq6aKeoCK4ygtPV1UF8THBrsMsl4urXUjM849oWW4WqRrIy2oU6B/BRsSXHVCouvw7u06aSJlbYptq6SyVknVaSLqIYRQ7y6pBnfJ466SZHTv0NYmerrLCAlziyi7Dh5vd+nxaY9nvu5d6+fetf5tczSgbTExawIW2LasBmmDK1gbXO0xU+Ugc22RrpXJHu4DTa8NNIPGcS44bmwdeJ5i4JmE9vByH9Te7oPaR6PTV6PTT5NLf3ftEeDeh+a22x3o3mlBrcMv2L2XQtwHbKjGz7D2xKGDu4bu2JZaCW8Rf5fITm1rjM5td+y/mczdB/PV2qE9yYuxyNdK1n8wutxlwqDJBHfvMaN7j3kKeTC5CppXq9R4C6nxcRcXX3dx8dPExV8TlwBNXMzuQz5QM9CC2haUYHdBCWmv21sFw11+OrTdqx3dpST8n6q0/9NR6M5x7s5xozvzPDXmmTTmeWnM89Z62KftZvm6N96vbZ76u4+pAI115vaYe/VodWdesJC2/9B4cefQ1TOB1m7NeLmWRe6c99Y47+I4mUzeJi8TuU+t4uwnxNnfXZwD3HvErPH/fyqt7t0R6s73sLY1Swd3zdLRXbOEu6uSTu6KpnNblkWX1iJ/Y2a2rVHcueqhcbXV1BT98X9Xo2id0t4c694pV08wbU0QoX+zLvAfWeYqu7TGGLXGeLoz2qQx2sudsd7ujP2/K9xtMs5du1+tjNuam69ZyAv/X2a+O6uNGqs93Vltcme1V1us9m5ltY9g9b9xjbR+D9D6/T/RLD7/zDFyNYz+/2y9StkGu2vXEHftGtp2X4RpE+bV8qxz8xzD3R3JTu5OYGd3r7xLUpv2pMllcehqvR7lPlFEax5jjLswdP1H6v8/6/d/0us+bfY69be76Pi0dr+v6H4/9+7/R/3tzt5gd+aHtN2xoe5cD3Pv3g7ufO2o+sQm9InD2xpxndrqtc7uEvePJ+d/Z3m20zvtmXRG96Z6urfN1DZ/vNwNGO+2jVAfd7b5uouCn3vfu/flVf5ii/2pDbigFgfJja7/lkS7yyHXhNnoPql5uregfdl20WiiN9qXbBX11TO1xhyzJuiBgkv/cJLwuGaSuNr8bM+DdpVzjflty7jrKOjctkB0aWscXO0xe/ytx9y6PhCjjfCubWv0bu05193dNWwPd+3c011f/J+OwvZ4qnfvGYN7z3B3jhtbW+upyaZJSJCXENm2ZkhVA7ZhKLctLP/VxeZ2XVvVX3NdlDNpFHppFHq7rse0UujTHjd9Pa51c68VO38xVgLcmdvegpT72A/Sxn6w++gOaU+6Qt3lN8xduju4i3NH1+XU8Nbe7tT22uLVpoLrjBuh9Xvkf7gqq/YsrRuJTjPgDtu/8ezcuWNqFUsvIZbe2mj10ej0dWe0n8Zof9dWBbjKodlVeAI14QmKvHbboO3DAG143m2sEV2zQtSe8IW7q9H/bNnQXS4iNVUb5S4+0e6qK6ZVYrr+7bKxe98x977TtXaWh+gsvZCD1iXjVhExav3o2SpBpvY45OXOfG935vtojWxrsaqNUew65bestrv3wX9oM/3DpSdN8jyF5P2NjfQ3jW9L1HzdW+Pnzhd/9zEW0O0qO8nj6pU6F0kJcpejYHc5utrbaVlCTZZaT8lcpYs6uuuicHe7upMmjp3b05NdgiQhcxGt4hcpxC+qbe1HJ2S0jaj/nnXcuiPi3v1XW3duk9W1+yLu7fd1507rHkl7QyXAXTzM7sITmPS3665t7pi2PYpC2+rLMHdh6eAuHa1231VLjm3Lffs97i6D7fT7teWi3Q20GE20urYtJv+7R1k0c8ZNByA1ml3mfq7E21UOfbRDKr6uE5lfC+DROsZVuQlw3ds1t56bCUSxDXIX0OBWfoYIfoa20tzqgYS5H5DpoB2Q6SjEOtyl2epahYscd776CFsX1+MuEe7LeJge6eHS/qhrD3hEe7R76q31MEe3tg7adPdw6dIeOPH1dK0es8S2fUSll/u5ljhxVCTe/ViMpb1TOFb3sZLgftYm0f2QTG9X+65PW+d36FBL67GSZHEUpq92CiXFfSj2a/tAUX/3kZVqEufj3E+s2LRhbE/SzsiJOjJcz9VkiqM0A8RBmYGuh4Oy3E/tDNLOzgxubVcrm4a464qhrqcuh7keoRzu2XL8JNv1pEGOh3oiZ0SrkTNSO7czSlviGu16DCi39YTRGO08z9irz9qM+5uzNq364m/NY3fNoHcfhq1G07Wjweg6GjxdWWJyP8fXthWBb2G2MsOnpdtM5AiJzvQTAuQvhDpAdLXZlbHuhjOqrmv37f4dI1zVaau3oFqNrXqIe7hMrP902eTaM4DuKtW37c0CP/dTu/7uE6irnahv3eD0+bsNTj0dR0A2Xr1TdNWau+vKR1tLwq0+hM/Vxw+uEZFOrmqts6u8dCH79xqKI9yPN0e6DXtxyFhIRrSQjBht2HZ1lZ9uLmrI9P/wcdC2+ejr3vd+7p3o786hq0XBbWxc2yFBrh0S7NohIa4DOLQ9iQq7ukM6iH7oKEQrXIzQTlerqf94MKquu+gR7t4RRveO+B/1QIsN425H+Gl2RBun+d3He6D7cA5ytYWChRES4mr2hLpbJGHuFkmHa3uso2uPhV9rc7gf0XWd4bq4GiCY9W8O47obEdHu03iM6OOu2ljrps213bV5qYfo955CCmKvtqt6udpFcW3P+vHupofFdRq3tm36JLgbL1dbK21r1j7urkmSq2JLdp/m+7obUVdbL67WUP9W+y7V3bBI0zRW6zHdtiyndGGiZFxt9bUe3L3aAhr4jwbZf91VaHulTJVfzW1oHYJtHbNVx5yf+5jz18ZcQOuYM4sxp20PCAc+uC1HIMR14IW6D8qwq7VZhKn1PErrjOaeHu6qHN1fk7l2EHZxFfAI1xEZ6ToIyWVIbHUFNaMwpu0h0dV9VHZzl87u7uLufvK9vYEe6/HvXp5pmT3i2/JTLK1ybtUEO0EM/kRNK/TWBL1tF8F9nCe7D6q+QoOkuBrC/TTzuP/VesXVNXB7eQYG2dXDJV0bSBmtRmemu54boKmzgWIwZrnqoEHuZtLga0bfK/gquFSJn1CTf/fxprec6Ssgknx9eXFJmWR1ls23Fs+dUeIsmCmAkuLpVseMGdbiPv36xs+fWVA0rTy+pHiuc5E1yZJo6d2auWTejGkl1tLisqJp8+cVLG4NxScmWpItfeKLCuOnlc6xFsxcUFh2bT0qYC1b7E6FdXpxedl/gN06r3Tm3LKyEkkqm1lWVjxvboFzTqkF3+mWysoLiueWW4qAJRgumFkIYSZJc2bOmTFtRtFMgPDStcWlM8sg6CEKzBP5gS1aUMsAMuGkOAjMgxqnQAJABkmauUANOGaWzytVawStpqw6qePsKVnezrwa2UIbM1pYeXYf/gEzFhKYx0MclfyQ0tWs/Q+8JoD/eU5LHIMfmZVmt13KJXPw04tiszPXsyWW2iYWkJfIyiu4Pd7a2+pw5LPF2ewemTdW19ZXsmapZvv0wll8YcGCT7YW7OR25qkMkvmTtzBnjXPbw8zJ85hfOftiuY3VKBb4W3iYf3WFLeT7uIMfYg8rSrw8M38d+3j5cb6GX+b5PC3y5l2sSuHlPNJ+Q2L/5JnWSqV7MCtu/IH9vLyR/SI3suHKAHlEQU0RX5jPopVYmU0/M4gtyuMTlNRQ/q0SF+Jg8/OYr4XdZLNOUJJ9mdnC5jSz4Dw2vZE9s5LX7S9IX5Xw08HJrLxmA69e2OsetuD4KbZT4dnM8zhbkFe1ly3Om6PEBzr5UcVqTrMWMy+et469ItUoseZ69uTKfaxDM/OsW89L4h3Mk+9j3rzwRT6ZD2SejdW/NGw7ynyamR+P+Kj6RTaVB/AMtncFt/FD/C1eX1QwgW9gcbwmnz0uA38altawh+RC9vGKfXzBWaVHIK9WLIEfw29U4Ce8mu3V1bCjSy3Mu5l9JvEa/hbzUTJlJDeCWRSrXF95Oa5o1mX2wIq61goOs2QewY+yp2Vec5kZm+tZ3L4mns/uXcktLAhKXWIHl+3jG3sV3/MjP8LtSpp5ZgO3ruOBzspdzkq2sI5577Ozd+QK9tSKwgPsiHycnzs0voEHM38eoUSb2ecSD2CPrqxii6r6wjObO9lNSg9ZSQ1mzipmssDvbObghWzVCsjYCRrayODnhxXQY0psMDMBml7ml6b1SXE0QYtiZDZBiZaRWyA12SyFBziblIQgSGfvyxb24opy9tdyng1llK5Bztq3ICGZrV0JvJ8HTTLyPLAVZBlvQ1Okj6U2tFj7ekWokf+JRpOmFzuKS6dMmzEDFMeMeXPL588rmVIyzzEFFEUZaBDp3+QowhwtOkZuVR9yq/qQW9XHVUoI1UPEj6AefOTy9KbKs7zWCXORLP+BFpP0kPyPGv+PlXfbnGpXJ8+dWV4Mj2QtmjdnprUwecYcK/wnbrir477JKQm9EyHHlOnO4pKCNtRz+Zyy8mnlLkp3hso2oL2VbRoLXVSzyDVtvkPwTqhe5sJEVM3Fc2a6c5m1BkG3l84rKRGh4rmqip83Y/a0goL5Ki6AZparxYhQod5Ly4vmz5xW4IK07b4lHY+deIciN1VvbKq+u6meHfQtt2WkOnIcRTzYZnc4a0ewbYvO8E0zcpw5lbzSuYC9uwzG9T2t8PPLAb67FX7Vm0fY7PnxI8/b7M70+BvZA6VVI1Izhtv77+JRbH/IGRgwXja2uHBTsZWFK6NkVsTLY4+MWLv3MLvpOAussw9nZRXswEolT+ZZbLEtCwZ843orK7JU8w35zjQHM5ZDVA2bV8P8FZt8bwNbxCuYlzJCZnWLeEBxf57RP8PK/BD3gkbQZ5XKhCB2g3KDzM9yZwK7CEqPv8IWZQ96aw2vvsLzL4/kl3OY93FWVsi889jCvCvrpvVhj6xo5uXMWMEz1ixji2xj2aLCSp7I8anNAX18hnVXLPIqdl05t/JEJSYQpq5gDPLDOUrPYJ7IvOt2NbDSRoirh5gQ0EE1kDEriN2xooY3JPbK6DOsaCoLL+d9EtgNZ/hetsSW+xE/ceKdWU3KM7J5Gy++pEwKZUsKJ7MbyqE9mbLSzexMqy9j7wGmufa7HFviipTuYfUD9m9g86q2wvwTVM86K/1k9o50hj210gZ/89julc0XeFgT86xgC2zMs6reOjOdV2+ew2tv2Y/s9DkDurBqEhta0/9GFlTHBvBCmEe/kJQcmdUAji8ARynWPxDmbhvzy2PbV5anp8JMbK7iZvaqBNx/dmUNzE5KhrzOCtp0DG9WxodyJx8O82Mfmf1ruTJRZj5VbH4h8znO5tcwn0IeZZ/psK6phckA+ummRiUuWLGE1bKHVior283bAfOWYF5+ie9Mc/KdCxZAdLlSLrOnVyq5oqCN+YASx5I2PvJQSwXdoIJgpWuIsk72YetXKPmQG6aH+Rb4E2F1FNkzePis/sWX0+OKHKxW5vuqV9vTHMXs1IozSp9QfreSGVjLzfE5s3nlWVZYxzrv0ynsjdlVOpk9EGhjUYUAvjK7DsAXA2soXAjhg4G8PM0K83NdJsTtorh3AwunA7B3dgQAHwTyurh0nvGCgwUfhw4rhI7Lq2SFvIp51e3EQvdRoXOiUA0VOg+FlOigFxxKiS8znZmDdLHNKwvZRShfBX9/lvbBGOub5lh3Kd7KQgqVhA58HZ+aZr+Z/byijlXKyhTZPt7Bptfx/HjrHKV7YFwC27qy7hyQcVaCsceuV4pkdqMyTWanVyhjZDSgqtjZ5WfY/UoEzJC2kXHsnfk1fBDYO7zjYZiRlZxAHsl8eR038/rJbG4NP+VURvmARTYWBAdsJrZ7mdJb5plKUvCzG7hDGREGOZ0H2eI6ttUI0s27gcG3h9lqFigpoa+yodCfl6t5/RgWgGZjQB3btSKbmTBjtbM6zTEHtEAVu0Xm2byBn2TzeR3IBxgmzSv4Gb4F7LumHL6Qm6v5Wl68nh9ucrAXVzbyehwEIPIJKBXBPHsB+1YqBJl9dkVd/kzrhzAckFxvpa9csIA9KytxMpu8j/2w3JbGa3kt26Dwug03nGAPr4RsZVZ2eMXxfParhGXvcrAKjGW79aCW+MSHeQmvjLc6amGMRSs9Zb6hAdRG3cRqHuMc1WskywSlxY/zKN4V2FaqzJKV3A4gyiDE3cD+8KoAcwbGzihlqAzp/ZXJchNffIlNAkysk5Iqs40o8NyWCZop+1jtofzVtbVN6QX2ytqzORmrZ53ld7MlNUpiKFjCzFTIfpoHJm0mP7QdB7voodIaMC6vAwLApgZO+iHtO3yVIaAfB/BA0noNP/FDP/FLOdCJwK4lNSN7HWBD6jYO5ZaMw2u49Sf+1hr2XtkZvmYBCwSiZ9UhaxfBqPIDqBwbmM3eWFbBv+Wr0f4PAI06txH6M1FmZY3KXLMyNoTnK2OD2SBQOm1nWtCaaTt0rI38j0JmtIER6wUcalrPG1g0lBmxb1N8rRWqjGDRx9kk+OX7dkJLl7LFNYotDKaUGmgjMM6ojJN5+pWhGf2LedbuhvicPgOcIHnWASl2h4OVVig9OrA5ynUye19SkmVbtbMLiAD92QYm8mS2pBwk1QTGYjWfA7zrAoKX23wkDWYFPx5wgu9+B+aZevCaLsN0U8LGN7MoJQFHQLrMHBgyQ/1g6NdzZ/oNtfXvszckaEZOWnVtPKtazm0vTp9Vupvn8MWvKokhb/Im9qJyphgQPrL8+FVJTvYYzmWFSkyw0i1sZi37Y1kFu4Xx4ywURqGd1/NcdnIZ9MZaBnL8sRJjBgrr2DRI7AqzUQBI2FCZnfHkFkdGP0cx3wUCvm6+UigDEpxFlsAoYP/yVOwy37shLn0uz4nPcbBFmMFvH4gPWwAS6HjTwTY4Cy+zm03HV/MJ7AGwnqExl+LZ4uPi76srji+exiNmQxtioPqpYC6blMEySCiv5otYCc87MrO2EuQyW9ToDVg3pC5hExtZDAgBX0u8v7B8H7S1G/RvxaF4awkwPgKQjRaMB5k5AdPv20rPQKjFpLL+BmhiNHL8JuR9IYY6A+9VxqO54XWcWQXzL8exOceLlehA9tKKchhVIFs9ZSUhFOqBQcsKsJ5K0G4BJ7lVyQrmRVTDrBrmi2hnK2kyq10Jg2T0NN6Hn2UR6EsUgJu5LG7rbJwMHdDS2ftYSCObVwdNDWBFOLoDsL33r1Sup3LTBvBK1gtqywcWeYGuVAqwfk+IKVSZBBIG4r4EhyrxKkAZLoPX6rybXd/IeuGQWdzINqyE9mIbTBBRz9ewXd7g+bw7H5gOQQuELMg/b+wMahcPw2FzzqkMDRGcKz4OQwXaNQvbtQfpEywhdMogpAolaWLz0ZbSPMEJrDdWgeyXsMIaGEFQvpsyQWZO5P58JQlFDYfenFq+y/HXWfBvt8bzoNSiH072V3oHbVRsZqUodD9YTP2L47b2KmZL9rHnykAOQYCNYAM0gXqIMqv8QYOvq6zM/4f8qW/lz+hGFoumzF0rlWFtokbW95KVJdeiLoTxsURx/FvUH3mi0p7Fduhh6LDzi4HaLXoLBApLgDgT4awgnGioDGnm9fUsDWIXnxGYAwEzGwJJfUAtDwbbCeb9/eWQgraDSekms83lvIKvXfEi9HCW3MT+8OMVi6bPmm7lh1MTbmF/zEUEq/0tELLMUZsxQ22GmVuoGddjM2zYjEEwwfAFD7FFjUr/QPaVXyG7FyYLCNSwN+dB3zXWljn2r2LOCjVQVtGYcf/Gw6vYfC2wxlQB8tuVHx7Ib0Q0ozqw0TyCog61Rn2xgkfkgjnLu2HsAbZoH8b+tnzf1RnPrVALHx6gxISwhWdAZcP0k9tS3D3+GQ9Q+cYIttDC8zIXT4grYvGFNA3UrwT+HZF4ecroeez5lXU4hc/KXwFGFoj1w2zw8UMsZR8bXs767qs9yYYcV1JDwL5fwythsuFN8KMMCHsPWBwFZkAoK7Mw73JWpkyXi5RYM1uMDoc3CpoZ+kDxA2+3Jy1hZrTr//6fuLz/xP+VCpPBs3cUz3UID3VeKXiD8+YUzxCu6Jhx5fNFaOb8+ej+g8NbeJWXKrc4pIqbQ1qYLMqI7C7uqbO8bO60Oeo6pIa31Dm9pLisaOZV1ZXPnFNaMq281TMWCOX2Vi3RNc006DmLlHl3pV+gY3V1Pj9cq1N4dBHfcGU1D2Z+FVfWVMNwmHmcR4NXlFjPPOvAvzTV1bPwChDnnRN4fjGPnAjDujijluc4J9fa+U4eeSM/+3KlEhcU+85qnuNIBE09pJDZj+sYO7Zi3waHYyt4NJ7Ndit3pvKvqll5OQTL+Aas6hG5mcdUgurayCM3FXM7/MWnoch+qjhh60l+qYgtqGC+FdzKOhXyyLM8tLKy9lDtwdrKs4fuvnCokls3VdeysHIY9Bb+VoMy2qykmhWb7zGY0NfywA3bee9KfiixOvEATN3FDXwS76pYzMy7mXet3niIBexrYr5VSoL5HrDaNtaCkRgABnDFAWisU+kVyDeAYu4Zys0OmObB6kWTvkgZHeRQYgMhmT0KVhhMdeaN/BI7xZpB+R9XeoStVhKD95NNvVDpHqwkBtGfNPCUcOnPoXQLAjuhvJ5HKjFh25Trg3+qVSYG/8Q891EjIjcqRWH1tTode3kJWOFWJckMfHrdo4pHFisDg+Y4isGe+8ZZBJp9Kf2yzuXnG8DHdgDzjzhWX+oNAcelw6cclYdq9zoq8484Kiu3OyodLzoqqzfhX95t/+oFDr7/Cu/W0NDwiKOyvvoUtzY4+NYr3Fq52rHLAYM1JrD6NwHxcwh8w2McfKSdBTTzBCUBuJAfsq36aR556vLWS5eVV+WwNTwHNOpfiwpnVYLsVGYA0b/rYeKIBJHYCFaVN8xmoJBOuvzfpeQH88gdPKZ+sxITtAme87z6V95nZ/6hXSCB0WY+wgHGw42OTTx/U/UmfqkWFxiZkUdcASPnLDAwNqi3Q7EGKf2C82mxbAOtFFraWimUHCXzpk8rURfy3Icgjo3SGBgbgbId/IJ9ct1Jx0vc3HSi6AA/sZEXbeQHNvL8t3iPaqWnmQ/7uPYrMIHtGy8lQuvs0DjetK2p/tBDTqtiN68CVdrEvlzOAxqUeLOiAA0P4l0r0jHpP1VhbaiEGa4qYca8uYXFDnc1UVxaWLzIPapgZll58dxp5cXz5v5TldKOLkK+7e4OfDPLLIhHOIAdGfk4eGo38k1nYcTN4dbah5BJO3hkCQzJJOizkhCUheJqkKu0kHq2sIp5H6/dMUvpH7TxUC10bsBsDC7Y6HAUof0Qko2+3IHDfNFZ50Z+tn5jJZtXBbVZall+DY88VM16VjgaTjmqd8621+Z/xGNwBEWZ8ZkDMutwLOAjnCdzlvJoJ2DkE+o31vIwHoVGqbFuTj11EKMOavjvdZAri2e0x8z/865pq8NJhi1Cv0eClwJ82F5ZXb0B2MEr6zeCcvMsdCjZgWxhc9MhZsqDQc5DHPzsdkc9z19AbKC7hKTCf7vO3lI/bdK1NLBl0VZLbllNla4u0kLx1ARBcfQGpbdZ6euXNpdn4h6L8qBsPrSBV26sPY8NqN1YuWkXyFMIyE+PwKa10H89AjdBG5sgAY3/oKpaUgCZeKGE5Pu/bS20NnFxGVgJ7sPQ1RC4ptPb7sj/iSi0NcpdOd2myYG8ruoDvA4n6cAVngheWaz0CFbelsNAca9aWafNNRVylaOoIZ+l2oDBCYo1GIdhRxhrMKc9osjs1hUVRcqNQazLGVTF3OFQBgTBFMpuaEb1XN+wEQY6TJhB3ApFnpFh4gKTsgFGWfUKmN+iHRsblJGBrEKB+Rwcoh1MZk+sqBOoHlEGmGGqD9ynTA1SupuV6CClr5n1bMTUg7X8m7O1MInubwBn4lFZVpaGsvelcmgPSEgRv8J/AvXRbM9fh3POZh5VpFTJodC035dXcGd9DrRsrVKVzvwbIYmbF7f+Vitb5JBZEGoiGQolbXDiv6cNispK2pGQf9qn/11tTsIwkNQ2jylSunVYWJ1/1LGxFpixwfGKsoO41qtZZdoN0IEbnPVbiTf5xJs3/nu8Kfyb8fO/P6+RChpEKkiTGwfPmZgODk4jdzq24fg4ROx4aGW5Nj4+k6rA3f5qtTIhzLGB+SrHQYKrVoLvGM0d/BIYkuB4NzCfKpi3Kg+cdfCNSo8gJc7MCgrtZ/MBVVCVytm3pKqGWpgZlW6BxFy6iU9687/H3LLSEufc2f9XuSvlAHeDZBpsi9QhF10Ek9G+y/wrGHkPkfaxcJvKk3FVOA6ZTw1f6NiA7H+N2J/dSNxXDMCUx4hNH/732DQDCP6/xSNXGlpnxVHAtNsU5Bp4aqygGSQzGrXcU7trmU8zsRGcHt69uPZAg5IadOBcdbVzAQdXq3qDco8cAgzbAu6+ytILsuCpf40DNPKdm2uZHyhzfvIAsrd7UPXGahDQWja53OE4B94Ti6oDlR4fuJh+mbGcR4MFsVHpFVSJhwB899XyYJ7L87+q/vFAw/5qJd2fGasc1h9n1R+ovPQij1xTfYin3s2FQT6a+qr5v9dXguvUWxQUJumM/6+6S9Q5Z1ppafFch7rlL+IKk6+KJi17PXTkSQnsG+eIWY6t1fRvA19XPTKHD2KetvxbhW5lnUFbjCiuZl6FOVNPnZ21EzeAcj/l50eiU/WJXG53gNe3gay0H8hKm/rfY+mcmXPmzV98rZ1K1v14aEAHGQZfd7ODR9mZua6I0wZsJD/k2FgJzrep0MEbjqgwmmuHqteCIVAOvtOujaAKQW4d66FljSDCZkdt5Uj7KR652lpZP6Okmpn2UWz1SPsih4M7AE1RU9NLPJM3odt4qbJW4dDAD0iKFv33mtzSwTP+mZ1GmmwisOI1SV5dpAw0/8yTclY7ivbzqGpw/8ybFGtoJZuLW2qhvM7JfBsdRWenQmN4LXiq1Xx/ET8LM0E1v/vsJzzBWeJ08F0cPMza+smOTeCXQNtPHuI/gbm7iUdXbnA07fyYR+0HD7i2AQx3/0Jun8DzZylZ5qkNSlJgcUYtuJbOyafsPL8IIieCww1GWKDSN/DlSn4y9p3VkOxIRNPpmZWF7G3pOPtkOc9rADuNLbLtY+D0xMB8xywV3HwWfaXap7l1ZINiC1GGBW5kzmzQMbW8B48cCcOZZwIZV5Re5o1sbjb5XVfQD84PqryNGfehR569tjinFrw58Ncrc9gSC/NszOEdwNADBy4u8GeHs8jKnRv49/dU1n4Mk11cEI8BcUZRPkqiPPe/16+ouP+9LY69eaxIj95E0QYeBD69Uhi03zmRL65VBgfudzLvPOiqIqUweAMbU876nFFyAmEYLmyxAAKqaNJmCyrATPY+g/1cT+rOQu5H2P+ni5UtZ3OuWcGcO2/ulPI5c64V8jZdhHYnP1dDlI7N6K45NuN6sHJmycwZ5eJwTRu6l445lcBI6imfqtzOIxt4dx5Zz3vDDxj5FvzTAb2Es46N9bVbUZ9k7vzoRVARG/mIs29VbqjdXalYzOARwuB5CqTz0hHw+kGhcOtXPJ+ZC/nADQd4zoGGbfxS9SW+sZpvgk5LCObWiSCfTdBpTUpu0KG7a0ErVda+5KiFWpKg4kLwhrdDp2+oh0Hi+PlGpWtoPXofw4L7crOSEuaoPfAbz7kEiily9cEjuH9VzvvwjOrE6sQX+SUkD1RVdGBl7QUetUDZK3dw7spBqvLXprOAxvQN+V+DfWlnpkZ+oYmP4BMUa5CDVJudJGZLmytWV01nohtBW/8D3wFy/SdOhcuZK+ywhIXQYd1k0VHYNUpCUD3wFnptlpIchH+LmuqZ7xmexHeCadekFITVb2SeSnd5Sy0fBYNlMHjrkWvrnzx/8uTOaubNA3h0LXdW3vFNLfR/dL0I4kbTrJydtRzKLs5mpjO13/DEp3g+1JcYuLGe3VTBy5i5phbG4ncruM3hqATnJRDG4wZcRX4KTPEqWcbs3N7ACqsgc+casDSrnKCIxgez+YV2fogFnOHdnKvTeNlsKOs44NzF93PnpQcTobdfbKhn8/ZBsSDcgYyRq6trv2G+3HJ5l7P6RPWhBXg+9xE+wXHAoczqcOBQw/4mpX+YYyrGFAEbDux3TIHwS1pMaxqEWFAeUCby4bN6//79B+bMwoY1LGhgj6wAch9gX8jNtcd477OOA3xCdTVPOAGe7u2KXA/SBRq1qxIb2LRxYz30w4Z531aKFY8tpEP7/70AtR60a6eHD66DHg6BHn5k2wb+066tlZu2wxAbDT1rdaAP49xYubUBTJCcnZW1p+z5a+21mfaG6rVgveDGvi/ofN5Y3cCr63uzkirWsUbQdlL+L5kqJPXXqLHWsUBG863QhI8leQEuyYJw1bIpZ+yVl9i8PAe3gvK2X2LpjbMhsQkMGK86XCCsZe9KlnV8I7+RR9vZcytR//BzvL6aN9Syx1byCDuU/EyqocXopo1gdIOfZ4GZ84BcMWfNan6WV9/+7Q4njOvsuc4FlTywsr7SwRYXMq8zs5UYsKlNMFEkVoKIgXSxcp6NR6nuXFnnVBLN7G65gnc9UcRP4cmrA0BE4rZaPlKJCqzdtAxXXA6sOG6vr2SvyzWOomQeyRbh2aVKwFkz0DnLDnrPwaLK10POKzyf5/Tmh/j+yUDK0DM8URljBoLBmvjUoSQGsfgqXJk9ynd+yjwL+dlNfCevrETa9tcyY7YDdCSMkkaHMiYQZ7au0HpQaTmV1ZW7avmgoq311bg3YSrkTT8B1o08Mp8mb3/SXCv+O5179ZJ2a9deldrmZH5xM3T9Ghj7vZWeQY79YGM31ALxrHIltzXVsr+kCrEklM5PqGYl8+eFKMaORTxyfz10eG9HPet1BtQ6tB3lHOwai+MeDuy28FHVDTsT2dwq0AtNbOOKfXbuYL6FaJGzz+Q8x4itJ3OYZ41jBDPW7OI5u3ZBZ+/KYatWZjua2JeQ3ckaZDCS0ZS/sCKvVW3FNkOGN6R9DhCs/Sur8M9H4KvF8AaYTvhloNKrfFGTEmNeA/Ycz69nS6pwnNUyBzqE1Wztcm6zV5IRHQkmClvLuKUYJrL6qdy+WokJbeLnHAf2H+aHwOVwNDQ0XToMeoT9tJxHNFXXNrDbFRtomOpDjve3HFL6BuG6RDTP2Xi4ko+p5Scg519LhaRW6iqAV47NMHZqad01B1Xwn0tr7E3QitU6MIAOHaqmET80jEb8vzutfM0J4//47DZkVA/skvyUzykuWKQJyzR1XVpkmDKtpGTejKuPaystGZn74eFWU0mUhuwz58/V1rBbDgm7SqWupZgLLjzMPGfaXNXLKClsOQHe1hsmc+ZPV5EWFM+fqRHYElYXdEu3gdg3KbLT+SYfyJbYktiS7Mnsd8lmS++cPiudrVca74ZoTBoI8gGqYhTkM/G8mOm9e4fvvidmSO/reifFbg/PZLcZmqN7JUKvPleWhytTXvtyilmEGncnxV2GuAzmbbMNgKgr88sh6nbvfTmZ/Xrvrubm8fZT9tou9vOFA0BH3A3T9xS2OC+Z7TLV2ZsqQcjLbRvG2IqW2mvZZaDPnjPHZk9nH4Jj21S5yLaB/UufzSaWb7z0o7OMBeThoSr/KjbXxgIs6HUE5LH79RawCGysNs+2kDV2L2ehFrYjr5Dt7F4+kfmfsdtz+Ex2q8zxMG7qAtCIs+dd4s40K760ML+GeXFQylX2Bh4MlXXIti3oXMSOTj9TzO0jFrFd3nVPgSJMYItAknkXdkbideWZ9SPxHG/NWFZSeOgd0L+Ly++cOrH0xpkQYKP+TfrEusaNoytH7GDOZmbKY04bkFHAqpfzM1UZSg8zn8SW1CSxl6UaZ5r9XM7EJ4pYcQ2419WjmKPOkVboOBeXYM2f9JyjiBWCncOjHIvYHn2dvboL23MTt4yIW8Ctd+XEj7wUb1+UZufVDQVRcen8jaXs21LMfqKenZabN6dkpCu9glkPbonuf7I/dNr9y/Bc7Xlmw/WhZXj+9WvGswG4e5mFgELW28JG8QBw7HQMdBUkyuxBmZ8ZpQzHVbhblvEzEPMLK1ybsKqIj9Dp2NZlKAhnWCGEH1hWiNu+nxNQu6yqkj+Y0avecXYQRL7GaiBy/zJwkQHRkDwAEvA1H0+wsyD5BJV5jOg4wWzs1oi6KmasYt7ZGeymGlAF1g18fjovSlV6m4vZ+Rl5PCB/E09npma2qBEQ7lyoJCGew3jSKJub02r5V2wJptQtRJI/0PM6nr255+yk1/iR+9gWM7e8eOme/jnO9LIMHhlvT2A7FpbDlIhb2HMbcRPE/wzquLkWCttKmOdxPppdKOWFDfFWx1l2vy9IFAw5J/xbsOCbBHZ9DetVx663sV55bFHeHlbYyLuy+Y18Q1w62+7DI7aI8+41g2B8ONLsMDyys4BCPJMawSNgVBayYJ7HkrPZ7yua2VF8ieitFXVsahWLLEyzxr/NHwKjm89hwfuczIfvAzca308CkAVXsagqsKD5jqdr2eEVvJEdAwHmTjawEeaSYew1fKnHh1cA/nKewR5aCcV8eB17T+L7ijEBcf2xghdeZj3PsAQOfMCeyeR4hv0MC0QAlAYUb2RJPABz3wAocCt+hNJLZjl4LO8NCbL6lLNd+PJOMgzDwfAk82Yo0cyWgGGVwYrA/hkF2JdQSg1/iJ0FOgszcLTPsYm/e5bawMyx2e3xdr6WdW/mh9m4Qm61j7c6HMxcwQJ5xIjFbMFxNlmJknkUnoxmJjxX109mo2ysdw2bVcVmYROAuiV4fqw7r6KUcjaniqoOg1SMAIVTxRL5GdtAntOFbTdyWzHYUGHs5tl1s/o19h7NQ/ioZzPZ/Ajmmdf7NfaakVfBoI+3JijdOsxgj5l4hQPNtK+WVezLYkenZMOIGaJYUAgvRwB7pmezzlVseiHrY0ngBRNYTh6Ls/Czd7OR5axPBXtwdmGdne0sL2THTUpvuTIn6352TgFembPZnLwK8GQ37z/AfpaA4NtXNvIi1oyvBEAQXI/LlXyskh7IZ7Hex9kBMFPZmxIMI75JsZr5oTRrCZ5SMAPrgMYmXhmfc/Oaj1ntysbfmR06KfcMeKr+oCZBENfHOxzcbi/rA8zNm1kL1u7IOhbFbXh+PTkNdOopFlHBZttYkI3NzgPPvJxNLq9n4ypYlzoWDvIAtTeyx+ZDZyxIzc6FATEiE8bxvUtRxcTbIDjOBgyp9DgDwSeXYvhDnQXC9UttZxcBdFJX2H8kwI8uLRRpOcO3Ou1pGQvYDRUQ/ecSjK7wKBy7vSCdLcg7AJqJ1+byygEu+GwibI23ogLQQR+w0HLmqGH1Cj9eNQjGHRDzxyLMfLsBw5cpfIehDsKXFmVT2BJvZ16FRR/w1TwyzTGT/4QbOCPi+AReO4vnXgZhHFmzENmSwDpVcVwOenDRGWCVpTYnzZ4PKJ4x4KsLjYs4vqxwkgMVPGDq5Bx2WqoBV6KOnZAaZ1rxNYTaePtsZjzOwivsbOPSqtp4a9Hh1BHsa115vD1xYhlbBKPTxuYjod8sqAFkm40WCiPRT0D7I0exm1dWsLVyFftthcUOo6hxIesMA2EAviGxfiHm+4WXt4R/52e4fXQ+VNQHKLEBJVXpqRjKT7ODw1TIpuyDQVHHtsugnEf1y87slwk6LrEoPsd6I3od9b68Mea6if3ugRk9cwIkJQ9zZpCE8BH5lVvxvQX2eHnz5p4D5uAbGjfxZnxFw6eOhTVz88oll9Ii0+w331hfzyZWMCNIytID9WfL4tkG5z52K6g9DhnGr31qZxEUXntTBZT9ywdVzpIK5q30AAvBaR/POpXzaOaZXV1ZaWU/BZ4BBZ+DJ6qsQWzEcbAmijpPYF9PqWFjs5mlsJCNtbE+Spx8KQdmiM/9q/joS2lWGJ73z0Fp+jaAFwKwaY6FAEuSkmJOs87hc1kJ6MkQXr6WTW6Ent3HyhrZYtB76xfyOjJ6tpfhXHca7KBR/XqzWzsju6uvx1dHfoi1WAjACn6M3cf+uLGqEIt8TOL1uMEyFIBTizimV/fieYtTMPXr63Buuq9XxUY2nVtsRaxmRvm+TLbHWcNO4/HSrc5CNgIoCOPH2R+euLpcCwbFBU988SGKzaxj55bx7DqU8EGboXtLYHSkVbI9i8+AmiqCHEf1x9f2Hs+c5czcDMM1wrqRFdXUsprl2U52Qakqmw00fFGOMlJjsrSEt5n2rWb5Z9gcUDi9eA32/77yjKdoluxayM1rWF7FuXPg855jftm1bNZxyJnH7SwGf4557YN+K5zFt2byekD523iODLqzh20NyBIYJot5QN0cDvr9CKRunswDkH2RIELxNjau/CBbUt6NBeaxworqorPx9j718fZiXo9T9CwcrZOQYfdEld/ECm2sQwQrzIPYByajXbMmqm4BTCEgTBD166QK5kRZegC02S62pM65DvjFe7AZNpAlJ4kkK6thjTAjzCqtOu/cZLdXDlmYMXhAP3w7aOsMLHsu3MZPQFl2swzSYMQ3PF5SooLZguzaBiW6wyNJMJ3z/WxjES/cyxbbShZMYftWVFQj7wPZqzJMQo0wQ0xii8pBtbCCPN7EOuclrGIvwMTwU1Ejuy3EAn9xoB+ejxb2C951FPcMHrF9S6IATuY1jiK+E43fsjPged41qWLhQvZDFKCvOes8h9TeiNQ+751Xye4LqarfxaJ5IdBrq2SrJxeyPyIL4S8MSpyfeuD8tC+KV61l363AeftuGeb/buayyEvshxXg8mr/QL0UToYZ4jK7qY5NV7rJYCqzd6cVFtsdl8F5Dsi2p9lXx7HbQ6v28RG8L4jg3BJ86YktbsznDlCmnffhuwCfr0B1HNxcnebgPwOpH07jOIb2dMYXu96elkdhmG8S4opKmuIds3h3thhUxKHLDvajBFpgZrEjNS0zJcNu55vZeyuOAzeOb3xkZpGjqHQAW1KYmWrPKEhXeoQ6VwO+jdNQ87zWGdo1o7h/xiWIapqGovF453IKl1O4kMJ5FLZRGEflS6CvNzywoWD1nUXVSow/+yZcSZfBuHasAXOzpiA9dcT8ooYnYfCEK8kUfxZflrxvBkjucQnm+xPh2exF7LgxZ1g6RDrxLaf7dbxwD8yKJbzh7Ch+LhVcDAvzLXyA/ank8eAh5xPojfaaiQ2jX5q2ePAkXIhuHGiPd1iLga738nEq2dmNZ3Mw7yHio3wk+t1uFWx8XUMuSnk+zg93dLPZ463M03IpPqcI+nI4CJwSiwOBORu3suA6iANgPXtcOUNHustBNthCW75zqRKFr6iFWKpnRt58o3MNm1nDYRqdBXQaz+Dr4saIS+CuwH9WbsM3TMurHHw/dK8V3y87NofX1aFzmZVWWZZzYz/7wl4ZzAxG3tNyHjuywoKrHg87J+Sz3SsqlIzQSqWr/7d8IHfUKikhqQlNSjd/ZmzkB3+66a8pu9m0vHrWAfTa3MfBngP1kD8LKIGfE8MduLFkTbMePQVT8yZ7GrS7vgi16gchqLPqilBnHQ+hCe/dImTZvhBeAQPlmIS+zVkHpt8faqNwdj1M1w5UuqHlTU1pkTPtN69hO3Hh7xCvrh0+or4+PbWofi2+IzuHKkKR+SSEB2Tx6jJWyvMc4/OVqCAWm80KoFD+KF7d5Kh2OreC70AqyVL5AimgZgd2zdFQEP/GjXzkSlbcGH19eYYTGuPcwP6aD1rduzmHj+brhiVU8i+ZN1jw7OBCUPT5oPi/4cAKlN8/y1DhVXrZnGjD0Pxzixe29OcyC4XxNZBHFhayzzkau/sWNrNDXLHKvJb5lStdA8EZwt+e2QdZAxghUVVKt8DRvHq0M63y7CFeix+GABt268pmdlGqo5ccL0p5bO/KPPYtU7rLdbPAhe7DrVDh+XmkyLf7Vaxhi3Hm+24etvB9X54tPjnB8x+8xFfywzvw7cpSynzRF8faI6Uotrf5VaxlL+CXCgKAJ2CpOtGEYF4WJTqYfafj2fuYad9mJTHQMb4yHmfrf9FsvT6AoyNWORtVXGUQr7g0C63cfJrQf6U5/HaY0NfjJxZOrOb5zFHBLDyikpvRriqIWgWFj89CAp4NqmPXNbKwKjajGfJNbWSNErD74zn72EMBhQ5HGftoDpL70zIyYDYFNVNRakh9UPnLeL7tkh+4UDnMs5AtqmOTOfhX01cfXpXwEq8ecWUBe1gGK/weFJ1L6alQ+Ps8bMGm7jy7lh+GcXbf0sKDMKfNhaSDk1AqD0aVU7hQhDP6t6S8GlUOg8mTV+wHZWujWSuCgddbyYx5S3hlmrU3WqCU9csoC6/EWXASkfoVTAxNwM78NZWTwBkgYXw7D7n3XPcKCB/KQ/f2oe4VbG6jM74ylyjbtLQOjHSQycw6aKCTW/mI1PT57PDcuvMO56baASOWs8dW8Ih9YITtWVkOc1MF2w2ycgxk5ZmVhTxlHZ+3bh6fBL2Cm2ngph0/wCw1OHXtYSfwUxFNUnZ+fD7bNW8fyPdxVukPxgyPrHbOB4rOzcZm7AhU+shKtnmZkhqG6wrgxOBcddqM5v2OElTjn5gLKaWwuJJfnnEID/7h0sLv5jp2dkUjz2KbZN4IOdaU4KD5yFy3blrJg3Z8d2XLSm4Dm8i6f5bSM5AtqmCeYOK8KjXCnNaZ7+OrIcsqGB534rtL51ags7IZrR91ceJDqvfJEguFbeybpc3IlkPIlrMeKJ7fFdNSyX3BPFuYmudLsE9rzWRqfk4la82WPqzXmSuQ/Zli7I93gutYdiN9MyPajMZ5UM2N+O7FaMjxYjE24VCwDd92TXAC625sZp14lXN8Pnt5IS9fBL0yesE09gg4YQdTFq9nLwH5S8qdiyE7i6gCk/rmNTmsU0UuuyXfxn7pBi7mV7ugrxrBkrLOUuJA7c/iD7PL46t27WI7u9e9CD0EbT+8AkfAQ+OxQzbEgiqHiIZ4x89gV8U7cE56eDyqoH/1PL41dQHOAw52egU/zmHqBi1qASSF7PGVNge4FTBrqdK3cTy2dn1sBRjVoNqW8+yiggULgOURqL/fBAOROVFt1/VAHf3BeOTczh48G6e8Y0TKboBK7enOSzA1JoDCEnibCO+uHo0L6nl95Sq2vghaeYZ52sbjd21mZ/S34rB4Yh72zHG/8nQak4/NQ4Sn/LCqR9Tw8YY0K1qXz8+rAN+TpoejfuXj629lpY3Mz0KlcNC84YdfNDlk3Nd13FMwEHmdfdii/hms/DjzKmfleaDLYJos4jnQBb6WpZf4zZHWBxY5K7eC97+lNI/dsRwrvZOcz7OewNw7llvYJcWGCWAApYNSQ4t5D2V4mzxVEW4yVOAijx996MfG/ApZaXY1M4F+bkizN3AzThSVi/ahSBny4u00b9Cq13peDj13qYtiCdoEUyhvgoFtxjXJMN7MK9egSbEQuB/Fm5uYbzabb0mzO8F4xwU9Q0W8HT2UheSy7OE1OAEdJaw/eaLWOuRE0p7ztLFbViKLDi6wtMC23izAxuaCqgcPCsfHwwuQuk9guo9swmorFuB4/tyzbitMIFWVYMkycHVMFrZ7Th7OH7csIl32nbE5n5ubRgK9VQsh+kcnRUM5tnU54r1ABG3xPI5zzgLs6PNGXnMRlCR7YUmN5lq/5lEXby+ahA4xOdS/Ix12tndFBDsi29jTYKocBZNl7wqbnSKWFOLL3XMK6RtD2A3VC1A+fzCWUxjbfasn+NRrSe9edOJ0scETcLIHV9jYGcDwAKD+Ev4+CKgBTsMEB8QU4otxJpQiM6oWmGycQsV8YcTIN3AZhy1pVGIkWS6gjd2ebW7siu2Nq3c6cE8g19vAWYLMI+yVzLMc7PgFzayo+Wy8dRG/PNPO/LPZTBvraMHf0DqqZwRt0g7896f+xa6EWmnLBoXrwX863OEDBPSRI+Pzx5dbR88YNT0nl8Ufr3JYZz+Tw+2OATBz9mWnpTM8s/pkr0QrP7qYLWgE43V3+cCRKYtL0qz9LzuBXWBcBYIZ6lnHcxx25wI2n1sa4u29q59lB6WKCnuOPcexKiGuj31mPpteMbJXesPw3uC1YJbarbh0YOW2jSh++FUtGGoRuFxYvSMxA/dCXt/Yn91ow293gKiyVeDc7R9WVMzuAgX2o2SDvzb4a4G/FWCD5oBFVM7mn6G8v0pVwNLOdWuPQK2shDfWo94uQH+bvS5Z6HhqBvFzz//614rcd7NmtO5GXbPB9T/6BtGqAOi/s5JcVezkLywEQ2lG86Z+mRu4NdeOr+J5WtgCi3Xy63xqrQNMygoYkArrgUNiBo/IV5LN+awjfmsAlXp2LnoTkN69EDVyYnpaPChhOy7TOSzoVy8u51b72RxWDm6uL7jYhTAVokheZn9/Av+/zML5M+fMnO+Y6cpD1929a7b82pT9/zGjpSBg9CscVNaSqjRn5Qg2ovzusleAJ0fsN+fwDawsm6UUPs7u86hiT8jcUuVYw89yK8vjFvwAxi5eCy6o3cEnQOxb/DALQ38z7ziL5AH8G3brkjNVzGSz81BeApNS/qxZu/oz1PW+eez25c0lfEPnKLZFd3xziq0Pr2/CT7NkV8xlodySAJ4KB/OgD5jj/dPB757FysvZEBiPEVl4Qgtc2EZ268o8IAJtjV9goIwFk9vGxlpGpObYrcyax9aAnXGgV2ISr9+aai+6HJfeh4exxZZkB/tEamSfLuGFg3hlF3YX45YK9EWNZ/hINHT6lPAru1hBFftN4YXVIx3cuXUNWD0W3s3pqJyFpgvzh0nF4qgsdoK3Ov4MeCw2GJ84Vm1IzU9gf1xeZmO3Mxv+bYi39kZHAA32VQymz1M8gd21nBfydGhgbVo6fselWbakZa7MAB87YTbQBx78DlAEnwDSJ5bXsQsKj+DmNOvs1AU/9+yDDkxA+YDK/J/Zg0oVj8i8hU/hxWngooaOcWyrnIVLht41bBr0QTe+FIwi05lb2IRGtnc5r6pgdUts9krrqtHsfY/G+jVgbe5j5qqM/jemp8Is9UX6sPQJ3FE/P4rfMImPSk0v68JMeeAPpdkvp+5MTZ+wpl9C6va3eH6XCQvSomtpnWxxMyixbTBHsecXFbKPDDYt2AjBQAubl52aXs+8YXSBfco6NStdgx6M5AVruTW9IP2D1Up8sH2mfUBKepo9bUD/jP4DYmexURVsx1IlWX4FV3TYojODkK2PgKHymZKndA0BLQjWvCePSNxK3XEnTHDrlTr22oozbDaI1+xCFlTOZpeD3jBW3WXX5lX4a1mQms5+W97M1oLF89tyGxSznWU/L89mdyr7cCENRvksetf77P9s3LfzAcn/kSKYU1o8peWIEQDXDm+XgXztl8fwQGTRHBFZXDrjmkME7X8s7GA0KIEvZDn6+kS2XanIzrppYZNjGA/hMbaMHB49Cn4PbKefjP34YYPsYujDc8PzWZVcxcfwDXFFyujQtOpLZY4k507njczJA+w3199nLXOwGB5wYVh6Yqoz5+xq3ovfBE6Q0kOuultJDuNzUu2j+9nT59tnb1jLt1Uvxm9BvsWMjakT2JcrQKfnVO4E+76eN7HPl/OIXQtvyoCpewSPXI7vZ37EDys20BAOR1ol+IpO5lXHG+wzP6wdvqOSFeH3aQp/B6UUxp6SebktvQv7bEUVXzaJrZPzJrHfVjQq8UGpI3jD5dSEJPClL4MvuRa/IsPx0G1v3lDpeNJhtd/FTHVKWkgOe0/ax/auBPFFMS63oJFdZnGwwzA+BykJchZbXHgz86u4FG/fX1v7zFJeWa3EhRU7m/KHF9U7rPGV1Q5c5/Xl5dX4vbCUC7yhuszKcuoOWKedzcU3y6urgVURbDCM8yDrtF/ZtwoPqAIvgv+2ocwJBNnPLUizvmDNSLM/aGfPL0UbUccjIO0nfnjb9RmzubUsvTptNX6JzD48f1Zl/tI0+05ciTDtgwHWUF1UaS9jj4Ke+hTsiO0rs/HbQd9JzTu5nUeuLrOzhiWNOXiY+DWPfQ3OrWyBEi8z/2Z+6yH22pKagq0Oe6WDPefBG3nIAfBNK1jSGQdW5wfuB5uTzQLK81lYIftmyT52SFfInltqg782VGQRYJBOaWTGfSwEP2+xa+UZ9g0amGVOVrucN25RUjocBQLAJOI17FfQmutAa/66rCqHnwDVvO+y0t28AARi/XJuKdhaa29wsAcZLhlPrmGeVWyBrTqNPn9mWTwkM2fRc9sqt4IST1jIL+F8gWuFFvoFf8UCNlw9u7SMWxaw2xgHE3lZndqwB1Ersy+h8geZBf7msXsww86V0LXF/QesAtUECB+VLVWb2VMrzyiWMF4yPCO9NCezX/rsrWtZOm9mCyvYsRV19rR0tlMuZ++Bttkp8+PMWMcG2li6BVzjPPayBK7nS9AJL4PcDMxTgiTULH4wBv+Cf7IkL+NeOt16vIJHWNISfqp1HPwd4MPXKAO9PQasZUMqYaAHqumnIT1E15oeocZLn+r4Gtdy61jWWt2QSg+IC1WzVEGeONc8lUzSyh+EtJns6vJZVF7Lk/CFjm+W3fIMXasbTnk0+o99qeNPutQxfC0bjvTHae07Azi8JGmQlywZdfIQaL4LumGr9ZUeayF7mzzCdsTAX/xe5XiXOgZBO9rKjzy7Dv7ipxHDtPwjvT20+K3txB+E+I5txJ+G+EiXerV4v2Ydj3aJD1fjMyG+yCV+iNqXWvruf5MecantdK3eKkg3t0HP7ksu7YL4UDX+GMSnuMQPBb5pdfld1vHRLn07eq1uHYOe1dKn/qTjxS7pWdhP61rLH7ui41Nd0kEqxmAGLT3hFx0f7CoX6xiJjpa+CtJ/ckkfjelQf4SW/quO1ytty2dLHX/o+CQXHAMrdWuZS3oVpL/ogmPIOjYcK9HSc//S8d917bcxV+fBN7jyqNLjRtc2XvTw4PFK++kR3IP/7M7jSo88l3RPD/6r/tr6tX6N8PdwkzOtX3Mh3uSuM1r7DdLmKn/Tb2YPnv43/eoX5MEP611lUDccBUNLP93Rg0904dlALJ3Vmp4Z4cF7/w3+VZEe/P6/SY+I9uBd5L/BH+PB73QbI7psV/qOQfpWd32EQ6gFf2lXD/6jq9xe1b7S7tAnspvcuslMaU8PPo+132en4zzcxqIWL8W7x7e0F+Jj3fXwIETZ0tcJHm46yLWvV0Ha2+5jbATSqtWZm+jBY9qocxXEv9lGuRa57+3BfTyubaNG09QUD979Kpq0tKo20jS8ByFtkHJV3w5vpdcvtW0eJaT+PY+m2q+ts0VnQlqvNnAehPhRfzNO/DI9eCd3/TMMs7TQNNADnDw3/edWfupgD/7c3+CPGAZy9nfpOR7c8jfpuSM9+LPsb+gf4wFmdfvpF6/z4O/+nZ4Y78GXtsHzlvpv9OB2F75mo/521b3/Jv3Yv0n3m/j36bmQvs+9z4e6zqV+k/4+/RikH/yb9KrJf18+dwroyb9Jj5j69+kXIf0bTY8OauV/e3ZQnCfoPoOeb7rKDgpU005DWvlVcwXGT+V6nnNVGS1tN6RZ2kk7DWmH5Lbr2u2p532v0nEYf9HTvS4tPtOk5wPboK0K4ie1056LJvf2aPGlXnpe0gau0xD/11W4wrU0b72bzh+s2gktZX31fEg7fEjw0/MP28Hr56/nvsq1eLX0CLOeL5Tc0te5pm+F9CMudA27qnxpkJ7f7pI+xGWMYroUoud7pPbrPwjpo9qoX2ubX6ieT22H/6WQ1qcNPu+G+NGuZda18koKaz8tF9I6X+WLtNQFaV3b6OutEB/RRvxBiB/URrxfB73bPNAifxAf1Eb8VIgPbSN+FcQHt0UPxIe1Rc9V+VvkCuJvaEeuMjvqua0d3q+CtKvnbeI9xA/9m/6WwvV83d/IWxWkr/8beYjo5D6uXWV9KqTt/7uynfU8sx19MbWLng9oS5Yg/rp2+OMXoecT5bbTSiP1/JF26IyIAln6m7GeG63nAfI/8yW3+kJdMXoeclWfY3xVzLUygvG7If71q9qK8au6uusCjT+YJnUD3rVRJrObu65zLbMb0nq0UeY0xLuuCwxa21qmtLuep7mktTfXbIEE/N7aH230DaX10LutK7imne7hrjdc0yJ66vnqNtpDOCFty1X8xPjcWD2f1kb8QYi/86r2U/5eev5xO/UnxF0732n4pkJaYBv1rIL48Dbit16VX6vjIMSvaqf+zHg9n9JO2lZIm9lOmp/Fvd9c6c6FNPM/6NOSAOh/yJvURh2YthvStrZRB6blWvV87FU8oDIQ36mN+GMQH9lGvJTgLrNafALEJ/yDNiRAQ/FLbhvaaAOmSYl6/nN7ab313NlO2qre7vOka9qx3u5zbHv6AvMfg/z49bOkNnQTph2DtHC5bf2N6ReT2p6vA9X0zGQ973KVzGH8VIhf1gb9mHYa0tLb0MuYFpGi5zPawFeVcq1+1dIy++l5fTtpFyHt/XbSjvVve1xgWm6qnjfIbaf52fR8cTtpVXY9f6edtKkZen631Ha7pUw992yj3X4QH99euyFtZ3vtbqNcC48H6LlHG3UlQLy1HXxT/yatCtKOtVdu4LV6uT1ZXQaTF36cLb8NujHtIqR1vIpujPfL0vPjbdRPZbLa5h+mRQzSu/lzfzfvhsKEi59Lu7qPML50UNu8xrStg67VRxh/cNC1fYDxxyC+i3ztWMW0i4PbHotaeuYQPa9QrvX/W3AP0/MDbfAC06qG6918T9c25Gbrr1nLpXZn/027s93tWK3MQYhP/4fycDv+5LQtd5iW8DdpUyEtSm47rWpE2zKBaQdHtG1HYNpFSAtro28wzW9U233TXtuKgKH4rbO2bHFMOwhpC9pJyxzddrsxrRTSVsttp0lj2m43piWMubbdgRqdkNbvqr7E+K0Q/1k7ZVaN1bvtj2jxp8e62w1afMQ49/gWHkH85nZolq6DsSW77yVoaRHX63nxP5Szyx1AJiD/9jbagmmZN1w77jE+94Zr9UcLvhva5g2mlY7X8/7/xrYguQJlh18hm9jO/IvpfnnufmqoGp+Z17YfjWlb2ylzLE9/zZ6WlpaQ3/a6DKZNhbQX2kmLmKDnw9pJK4W07HbSDkJaRjv0Sze2TX8CxKe2YedQXZB2s3TtukV7vCelPdGdH4PXtupbTJ8K6Z5t2E6BanrpJHfdH6rGV0E8b0OPYNrWycDndnxFTD82pW1+YlrEVD0vldrGWwVpzcq17ddorZrhvk6ixZ+ece36Bcb7FbiPCS0+osCdZ1r9qwrc16yubtfUmW3P4ZiWWajn29pp18VCd5tK66MWXjuu1bH/P86uPraS66qPdzfvDRRaA0VEQYCVVm1aSNa7STYVH5K99vPuU/2FP5KNhHQ9b2be8+D52pl5z+ttCZYiUmhS6qQl22xCcLqbkJSPLkKKigLIoqgCNSQGRKFBSIvoH0URYpFAlD8iOOfce2funQ83Qq3i9T0z956P3/mdc++M35O63hpUzycpbpv6WY56zwHI3vMu9gXnoSnGD1pjx6p6o2xyq/kcDOW7W9U6+X4hO9jS91fynptbVfw39TPfhuvxw8jKNRrHp3z9rEfGAmUxyD7QINs/QnZ4hMwIWuagJr60XqD39up5I9kQ6vsMNf6kU6hzrfQjym6G1f0y6RO1zOUGfZZB9rMNeYTyvYv6vlHedwDjH27ozVB+Ky2dUyprTmUt8x8asEI+GLbMbzf4dnxUf75A8470HlSOL49alWf6FItRNedxfLc0j9R7b6Tn5tx3eZ7wyTshL7brcYKyDZA92iC7BbLVBtnypZb2zoH0Lcr2QHasgW9Rvr9TfR4gZcbl+v07ynZB5jTperl6rvJ+aeMn9P2v1PMQxr9q1Nca0vOT1ecZtBaM3z1Wr8fEI6V68Vihx94jrcpzfhw/gPErY/W+3NhtmW+dqD9LQPnUr7TMV8fqcUz+/BTsud9lz/YyEBR+cltdXUBZ/Kst85sN/kL58q9VsYzjGzD+vprxGMbvKPkDx/dg/M/epc6/AE0LflTboMbnKDv8dHWviOO3Pq3ve+X4+OPVZwg4PgnjeyUM4fjB4/rZtsqVKJ94ov4sFGU3nqjWCtL5CR2v6j1Tn6n6GMeXYfyRmvFDGH+mZo3411vm4zW5hDLjs6U6+VghmwLZ+bF63fb2qs9ZyM49vb+S48aTLfP76mLwZEMMntT7hNwnMP6HNbExnmqZrzTglfR6Sq9jOTae0mOa+/hzLfP5uuth/P46fT+vn7tIH+59vn5fRLb8Rsv8UM1cMYxffhf7G/8u0AeuvdZgN8r3n67mHY4fPF3dy+ZzPl3f68s5d69UcYnje1f0mMm19mF8pu4cGte6Uu3FcHz8C6W8eExZH2SP1aw//kz1XB/HJ5/RbZXjG8/UnF2jHc9U84vmv1p9PkTzX61iG8enrtacpeO6V/VaI8dvNMx/eLX6jJJ8d7V6rkR6Ptsyf7numQDaBrKv1eQ76fVcyzzdEKf956rPQwlHz9XzF/nlN/X9vcRXDONzY834OnheP5/Jcfm8npNqr0G2/VbLfLbB7sn9Es8p68X79Xje3defreY4eKEes5MvVJ/pNOXuXT8F676g6zT92PEZ+W4oym+8UOVAHD+AcbPkHxw/hPHrDXmL8t0vKpx9vphv/4vKs52FYvwQxu80ivdZ5LhxTXlmoYxPXNP57HYxvnxN74XkewKkE8h+sMaW/Wv6+xszJVtuXavWdBwfv94y31szPnG93peT16v9Co5PXa/mNNnSMM/G9Xp9dkv6SPv2rus5KmMvfTb+YsvcKvlM3rv7oo7zcpwnXmqZP1Bn00v1vll+SY+BHI9f0s8u8ti8pD87xHfI5bt7hI/fbplXa/KQ7q2RyXmnXm6ZPfX9MOU9T8qHl/UzuTllD0g+e6X+/QuyEWQfqbFl9xW9/s+LNeV9N0v35Tj7Uj1uJ2H8VaP6jl2O2y/pHJvf9zst7d3quUdPzCG55XqC/Ofk/rfz/fjKMb1bLeUHv9cybzTs8ymWv98yv6O9Qwt3d/h7yyT/su77FZQr99/8su57idc8djdaZn+sef0bfwB77FYzZve/onN+zkFfqdYCwtgfQZ95rHm+5deqz6vJj6/pfWDuv9f0s6wFtH/uU8cltqb+uP65GukOso/W8TGMa+/ylnyy/yct86JR/64Y5fGftszbbtOwtCDf1yTMfBU4ZKz67m3u8z9vma1jzTE5+FrLbB8rvc/fKe4//As9z8v6Tf5ly/xdKT9XvO+fYwbk/zTWnK8HX9ffH1O54ObX9VxW3/Mn37zeMj9Tg+e8dr5e3W+RTa/re3aVV6f+qmX+dM175Dl23qie5dJabyh9mFIPD9/Q3xvIeepNfQ+h8dSben2Rum3A+DtHYGnjUMfCTMnXN/9a38+rvj74m8o7ZFqcl/+2ZX7PsSrf52v/nb7HWS3hYPwb+jsEZRze+oaeJ+X5D/6+Zc42/P0Azf/NlnkwVvVNHoe3qvsCWvctnSOkryb+Ue+rNYyA7NnbmuNw86Ze10nXuULXjX/Wn0uC6Dy6K78f5L90hK0b/wJ7eSnvVte/9S3I+VazL4239WeR5Ro79bZyDniuwMKE5CyQX6n8jVnx92M0x78DHx6Bl/g/gNeON/tw9z/1Zx3dUu5v/FfLjI7gtcP/bpm/qNV0uLlb1Lqp77TMhYa/2aLeDORvnzhCv3f08+3y/Ycg/0LN35tIfMX/q787qeUiyB49Yu3lE23zvcrc86Vc27itbf5bu4hf97s8p7sBYMAP/nizhmub7vkW3IOf1fEzCuctKZyB8g2QP9iQ8yg/ALlv1PMVyiff166cGch7d0H22YZeBuXj423t2ae6T0T5Msg3a/Kb9ALZq2Pv/jnnLWgm8HMvLjTYivKbIN89Qr7xQ23zc2P632dh89W0poMPqX64bb7YMCfKb4D8lbFm+caPtLUzJrV/QvlNkJf/HhLHx2/X46L2qTTv7Xps1FqC8lsgv1PXq4sLy3Un7mgXe05l3WUYf7YhpjTvHbpeMqYom/rRtnlHzd8Myns3fqxdeR9E3rsHsp8cq//bOZQf/Hhb45KyveM/AX483hyHqTv1PID559X5b4D8PWPVv6lsei65C00TfjLA9yocfrsYP4Tx6Zp9OMomPtiuvJeP41MwfkfN+EbD+C6Ml89GcHwfxrs18UHZLbxHr99dWRNRPv6htvlEzR5NyvdB/k5DLpD8w23zE0Z9DMn2u9rmv45V65W0afyjbe0sYELeB+ODExoPzVGxV3Tbu6dt/s+JZt327m2bHzxen4cUyzNt7T1yeZ/xQNtcqcnvoRdmZ+5jmTGyfOa7obHl7sA/afze0zDuhgMvdFmaGckwZOlmtO178IudXWKpd9k1WHeJpdbIZW7oGIHNtj3fsa3EYQMXP+4mjWEOOwpD18YvP0yNzoPLbGHWiO1NK6GbtxMvc1nPSl0jilmcuH3vEqw6YoHDaJUMP9TCTRJSwHF9N3MNKxmMjMS1WWDHhQo0SeJexC8W68O6zB4mzI78YRAa2aaXgsYOfV9GNMxSY9NKGcxjpG6agmoMLGdoOk4XWMmWmxiB5YUG2JxkE8Mw9Qah60yAYwzG0tPkLXTTx2Clnh/ZW9whThSiJfhZPo57iWab6853jGFqDVwjn4bsV5Y2bLDXsTKL5gW9bIOlYAc5bPnjnYfZzNoFI44in+EnBRkJeFaYSY5KfGM98/z0pJjTGQbxPTbN6mMAcdY4iQahFbhGP3HdIlIYpVyVkZWkpDRZlBkQRv574loOi7PEOElfrH0y9lIwIXJ2in/dferUPfffc+/dm/27rTg4mQVgkBtE4Ukrdoxzi+sTMxP0aSgTpycnPzb5wOR9E3etgCvOWxkfv/u+Mx/hgQrA+jhK+eeiGGFkb7r2lmFlWYIhGroCRuQTEay0Fn1GZ/Fcd7Fj9HYyF+LvQvBoAbROizz6ByYg36ahFUPUM4oLog6vFshjLLac+wEZaeYmdEEUuwl9s6eBoTVY37cG6Wk5GcJQeo/wiUaAV0MGWGTs4hDGMyOG7PHCgeFH4YABeChV+h4oheFike+wqN9P3cxwvIGbEgJP0dUT9B8EZZzAf/ETuaRdTk+mkxeNXBuBvM0AnaCMHSUOd2fPywIrVjIR8zgBW0HXVCYLiQFt3AIbhOEwlpGKBUfQt9q45BLuK0o38tcp/uM0/3Ev/3GfgZ4CZSFLwSSe3/yb5BC8AGtIf3D0JcgkNoR1AcqUYe4IeAJjJuih74WQtmnUzwDqgQcRDuK44gSKcOExLZ+H+MFbp85grNDPRB2bmPuO2xsOuPWWvTWMuQMYUQImJ2YhcgaHF/h1xGmyyEE+I1GsIDXQOPR6Pd/NvYouH7mJ199B1KDVnHOIakaZBdfK8GPcyRKZ2DlvYKYCPY4820VoIedKx8U4ZY5CHmCkTsQFTcZv41gj1EUGhBYM8xxpC6wDXh9iRiIgYFGeiCLUlE84HTkodLdVSCFrcMPIwxDtoZ8hRyL9Al8PvcR1eEjxo4yIwsNhIKDB11H4SURyQGZjjep5Ay9mlm3DNWB3lgBJghy/fe40mmMMY8ciJQfkKXlv040M7wTyjK0k8yizj1rB6VGaAPoh2oVaQF4W61uB5+8YCzPs7PQsm56dXemsroILtqA4wA9RsEZASymGFuGNhG4jf/Uolfi/C2KDsdRYW1hdm15jK2xh+gKwTqiss7i00FmADAgQBCjC786EqCU4TdqTPAc5A6xNU8de7BKSAACINExjKPGendJtMsBwH2Ohe4nUg3IMesJyWJjOdhenVx5mq52fR1HPKwiVyhX1C3BpZ2VFWJPq5rBN1wcOBSjZvACzaDuE33MrFzsPdVbX8GaaMFMkS8Dt4jf4X+fCWv5Je9E2YOYieSFLssiXnpRAAp8n5F6gBwi0Kw2FfDK8kGsCUjGqhAL/CZ5AUBcrdxdAw+mFZXlRAAj3mAJaFOC0YqK0rIl0AjhqtbN2ls1Ak4Q5g2lMVgfDDNoJzeUUH5wJdQZOzTYpweWHCLKUXM84a0LAYUngNPdSDPmm6COX5sHzowiJjnAmcLv28HIHke0DUn0cnJlezTVUfYp2Mp5aBMU1trq2tNKZLQIGyqNCsRdSvbZBYfR53iBSQKAFgSIF1EqwBDzPTM+c77Du4gwuStqg5TY0cLJs60pAO9jHUj0IhxjIHIKznZkVxbMwydDOyAKbiDmhjImBe4vQnu/OznYW8Q5yLvbJ+O1odubvsH4SBfRFp8bJzShwT/bvt4OT8H+iC70ZOnP/A5OnT8EVwPgA/pNn17vzs/ixcYEb0DdkWrEn+ieDf7Rmklg72rK0GiqKfR9YN7e+OLPWXVpkLP+SXAhpniY4S8qoehjCPHKXSBDO9jloCCuMaqd0KiFG9pkG5jUkE1W6PMmGWMXIA3APZy6ISq8mySKegYIdyC57hORE4KVEU5IjgXIoUSGvRbTitdDnRFBWdiQGOKflCFtdX5CwVGDFmczGz9+EJglvEACd7cx31gChKfVCEv2cBIg7qWRReVO4Is2iBNp5ui5HyvriavfcYmdWALLGC9TGamrtpFgxMolh7HYSN0s8l5IPEJ/jVS7NxSO+tuR1sqgfJYFFU+GcPFmF73TSlXeSkvgLdnI0gvFQUgrn6Q9Du7ARMkjhQfQY8mQc+X4/16YnQ0r/1itXnsxAcloy8+okbkSaWltYmz473ykFBpXjzZY1sjyfwE3Khk5eXHS3E/sPJf2nZYWkmlXC5kys0pzCle4l6DMRfIVrgJMV8DpequBXjavMLK328oQyZDYS2XNYiEqdqldLpXVLsejb0TBE8ppZmhd1Gu1YX5ztrMzNLz2UL57XFWUJUerK/QBeKq8sSJPKDhAwYcm2oAWJEs7XawsrfKEcPQKESoGt1g1J2dyAugqZVzsBUIFrHdbcZuhfq0VBDiHJgE+WPi7L29zSysL0mpxSJwECOTT6OXp0lXiwIiindCvypKKZUAj9gIGQmwTLycuXuKI2RSXU8jYS8MD7aWuAexPGy5pO93bkpyKDeKB52zCU+xvRP0yvznS7hiw999g5/1SyAEMK0eE1IrZsN4dQGS50LMA4o+VTO1r/SaHLaZugY/F2IS834vSGrgLGF4SNl2LMHixgPGjqoGQtBAdhX86zyIpxi001MIvUIhrCBilJS/VBEqQsT7x7ZeurHWoQLrtJBLfC9mgQSvah62hTJkxUAABZA5Sgwx20CHjBE3ZnuQ/KqY7oSIvZJDFzgheVmPZNTb2n9EyxbeBUVWSzqK3UAuUUDUDR6FkqICuRnilFr1zKOcS5njU5ZRb1Mi+shZ0iZLCXpAMsNWywOcTfQTE8NFExTbuQlIOOLyO6KR8RvIPzq8vJniKLMsufUamn6kRBUDpFp0qj2LmgqI3ne5rOhX+qScaPg2ifjNdTMPNgzcx3pleg8M5Nr8+vqcor6ISGnApVXoElCosUEqxZ3X4RupfmSHfHkfTYXXxwet4Q3bC65VpaKXoHuYrC7AzPF9AQmGNtaels95zBgcrY8kpnbe1htW0FV0ZZJk5C6JR0HoDdDfuRsUZenpXbdQ/H0miYAAHZEH1ANHWCfcs2tKMc8UHLkoccPCzDSc/5Uc8CbsyIbkSQ+qFBv2ozqFfbURB7vkvHKX0j/25w2FnieQ30oNqdQTqg/SZX0/Gox7MA8DakiQcFNUnwxIChUl7Izwy1CZRbYvBMBGxuYD/h2a5+IanTdCvZ3CSUOvTT3K1NlxZOaroijf1huCUNztwg9i3cHiiXyEF9DrAOD2b4JuTi0B3i9hsyi58Y0KgX46HdkYbKuSX+4IdVCgltfftekorvKtCldLREpId1Hn9uR4mTGoLWwHJ+BZ2RIVCk9/By8h2pAJwiTzxEpCkEomvhzlEQVxigKYMsAdAqPICFzM0qjuOwqDqGzmZyOWogmimhU5ZYYUrZXGBr2CMw8vWgZvegcyX2gf15ZoWIYrdvAV8xkWtFCuTOx74WZg488fUFuCEg+/F4zy3FWi7NIH/4sWIUBFGYL8MfGBhO4mETjY9ramMM9BdaBveStIGnaO49WDPDyi4tSXVv8eDovoUdXSqm5ttcHOEQIvDwg5QS3cjZ+X2532jHuGmFDu2Qh/KgH0z3wsjJuyXYwWDzwQASAVyH7TLyIpYjNCjDmNKBnGOgC/mvrOdvkSodH0+Wp7HYQRvj4KFXvjf3UnG64uQ9Aj/ew74JUFCMw10MnwjpX+qBE4DvgeNcUbYpF/L5we+pnXg9l06M5ajjJbgzhykdah1TBo0HHcYxNvAcOmBQF/EtmZni6RkedKOJATlEXAwMAevTf3OvaEbZUbzDv58Gv2IjGrm6GC2k6dHfjAegcJPwi+YT9DSeom9CpQQYXjL61hbNgz6/9zR7CB+gwGSuzw9YRHlc6Kyc67Dp+XkMNJckbl/kof4dIPi0wMPDbojZ5UIGgUg3tch4WOqkJxyX05hyARZt3A047qhwb+oOqOo7VgAYBrOwFabnLkCysHnFAjQg+FXWYhLg3D4yuuzNHAU8JmGUa76+CKU9R8MwiMVN5PSUjbzUy6JEXhDgs6cUNhj2JiOWFu7tbOKmAYPFcVKYVfhPAJAelqlG0ENUAgS0WrAHKbbXQtsk8v1h/P89suNTyaM65TCN+7ZGURFoRUVwFvxKmzVGTka4cNrCIzXoz7LN/DGgvFA+yCaUU75CayygBYtv4hMTLENKvMjpuCvf4qF2ObkXueraEIwdrjls4IG3+pbn43M6QTEFovhcIn74NAvSAh+nQq4OPerFRkjTNBXnpfOW39fu5l9oA2qnkGkKvTEoqiORa9S5Q3DJHIkS7kYFduiuPj5DIXDB8lthtB2Kw06dYQoUoXqQKGfxLEO9Rkc3NnDWCPTj5wgFTeTH6hSnQhEeFB51rK4S4g6/kAJUZi1ukSx6SsSOAve25W8x7iVSVaN6GoZ9hHgWjfuPkBI/4E5hLMD4Qf+UZnLhKkxEELjPMBJZtS7gexOhYosd0b6N+MZATIUyi6kwaanHdZFp0S/xijvw6Km6YPNiUbbtWlt4A7lK+ojYhdyblhN8O49CYGW2xqdOEsXQbmQW9fWINHz6hsVBS1BeREb4/DQHiGh+oBL38VDYQcKCEhvIMkEvfKBrSM3V9bOrMyvdsx2+syliJWpkhgXRcMlTSHfSLNrWcasQ5vi0VdEMGgw3ga0GGEBEpyNB8TJuz7HH5Lm4vFmEAqexg1gsjS+FoBC0IrwS7Ol9Gp6ujDI3zdQCCvUQHYelOs8KoQhMTlkD1wChuMi/BqYmfx5HIKHT6gFypcPxQJPS9DE1E0U9xBcMpKX8gUUtYgQpguoQcTSPTsZo0KBzYlJZJmlOCHVlgacmhNjqi0SXz3Yx14lg7YI/INaJZWfa1EQVgARKPnQg+voITgIkQQIy7CWJUJGBTxXo0eem6LOcEhQ2UKiZZ59Kv3HqDp2IR56aQmPbCgUNVWtnoS9RDq1M7MuJQjlcEQ3P8vrZ+e6MgNoF3ENpWvPKXl6GNzY0Rq9SeINN7MGJP8rNGfiKn1Vo/MlLJ77XxXs3/q6I0txRMe1Zqfd/tf0HfFVF+j+OXyC5OUDU0BQQFUQUGwYCAVQ0VEEpKZBY0JuQQiIpl9yEYgNX17UL9i5YV1ddLOvaFxdXXSss9rKiuLvWXRDbupb/+z3Pc87MOffCx3z/r19eDO955nnmmZln+py551THeO/FWEuT8AWD2k3V2mdjUk53GElEc2Ry4E434FTVsS0m5QZQeHh0Flp24UyWnx1jVDHgrLrIwCg7zSCZjKO8nX8iU42s+NBbMVY1O73AyUVj2rqMG6rWFj7nTnEAbGmuSSXCrZwL99Ayzxi31drQ2J5zRUtoEpM685tUkFnm0p1XzcLW9FHuTs3UlGqt1vmjWfdNfvc1xfZHNbMRktWmGQqCPVjK1KuMzxy5ao2x/eHPKZt0SHNlxzb42lQqaATahaJNIkO91JmnOqHObycTadNyZM+lnEnbzM6LdL+ZxG6xeqk00iTmISxyeEjBKZytvglSta3ukjNY0vmBNk9oA9Iui0snY4Mya+L42ZPN9M4rSnWhzSA1yVZAFmiyPjc1bo4Fp01KzCqddtS0meFmGhqgg/blKk7CjHw8FpqJosZ0lz4J2VTIgMZ+wYWuP1+bYwRzOUgOeIz9RNRMd2b3GpkgdcNEMuWviZNmIvNHlvZm7kmizRBD7viyxMzJkyfxWbEYhHMKr3+ZZw3ugJm+TTIPfdJ2rCERJ6a23jQjIRNmOaOLfrNIr9b7u0n/hpizJjTDC782hwm1taUl4LVLh3L3LmbJZbqGOfOYiDbC5qEr4iVB+WTG4BRVECpP2uieNrWYQYwRw3NXaGvsz58pbE6NHdxpNOms2+2xttPAZfQ0O/N5LS0LFqBp8/GArA0kHdO6pZtVtbWnuMBr5gLPLntjdeiXkRZgZ1Yn0C82lfOxTdpwIIcn0S2M6bxEtl7ZG3CFx8HN2Qb4g2mC5/ztzVj51oKqhi2kkGZ/zJu71c6NDr3lZnb6PLiuam1IwSzICvrdIh3vnLFOlqJykyWURlsTlzi61pBJ09wYDrdLjhLukK3HM/40wDMczrAJbg+57zCjL9rVpMjiKbSBSPG0qV6WmjznaqlekOKXDPVbqdWhmU6OhZw1ULCG5hXVVrs3kDlORHTI9Rue7XAy2IdaszucmgWmXOSomt8QZMR5ei/zoE4Wod1ZyLpJfXCYlM14puciSd6PtRXV3syhMFjsNtanr6hkuNZzG/QXHri5uaprrTL2lZ6ScBWbqbHKXGdNyFSL2mrBcqyh2cw8PM/1xyyaTE6FxG86rFqSDymrI5OR7QB2vRFarcaCsRIV758JaxQz9qMPbPegp9YG8xSRJ4ahgQQ15ieTks4lB4S62yMhc4F84hr5HaFjje6yhPD3CvTLoYPxmgHbHmsgSyhyS7s0H6OED/t9aT1g9TdUIaXu+CIfvrYaZSiMmXNSJzEmnvZd5vAmQ+Ytneyc8PAM5wc6QdKMZbEiTy/80VN7l98aOMSYA0y9UxwMclL9tam0M0//+DKsqbY51Q5Feupd396MPi+EkfLPtU2IGYgMLcdqomJ4NCEZkbVzc1seHKxIgfyD06B92OBgphhudmRLIoUXESm68BtkdyuTHNOK5EXGZTTRhfVpy+ZY0C9q0hdvqsDcEGjAoHFKrbmQMpz/jQgyxIeJTeYWJS0n+2hrN3taYp6RyGIrbH5T374hwoeWYsdQzbZVtfqW1aV1JEokDckV+gIn1khosAWOqDAnj9EcaWalBQVc/4GUaz43v+ILRhvbhuRxgxwhhTZMfjGYw2jGki1YttPWkf2S2xZj9rgyUB0udrQXmJHEVaENXNdSTmw9IY2Jnoy9UlaKmY1nRi///pcevi7Ux0rhLEqndrql7SCpjPk2DL9zas7qMV+1zG+talIdTu2Geu8IFnWE3wfD/dU022hvDWXJP3jSatOCaWGiVWtPDmNUmLGSVJOtJb+A4UFJ0zXdWubjUD+RQoaHRH0WHEko8xIz+FI8vxiN6ds8vknVLuRnn+WiLML5ixMzDybqucNgkFzMa2zkD1ZirUuCcPPjFCy3GrD9Is0Hr3wg2Y5Elyw0QYurFtS2J2Pz2lOqXcN9dbxK5cfkSqm63tAtSUzStYu4523G3r51iS59U/VNZlKujc0onpaYMblsamJ4YqaJMq+a4yAFmqva2lSPXOIMJ5AwlwNSwm+pa6vmjyf4OxEtE9g0/BIe59q48jOhJW1cHMvtAmNAR43YyzRTXudARpK1rU2Gj4G9yv9Mt1ztUrv46imOJW1NypSLx2CTE8Wzpk+fNvMo/qiwPpZEP0WeFupYrJViLcTkqo1h2mz9NHGj287htrpdfjdlls0mNuSdPJhKb2hZFGPfNUv7oOBGic3VtEnTJWuSQsqcdFTz2DnUeEyG/CZlSmy0L5Ehm4HNLW38dZLJeDKIbozPJmvNr82CgjWmhP+PT9ma7G14swngRg5K0ViQHv43dwtN4/UbKe8gO19XlwLzsExtyB+nGZ/8GCBkI2vA1iqeNNWz4udj1yzWr6pB3xcTJPhDurYlZiUWtOopc2BhRmqkbVhTVqE/G0oU0dfS3hg0KmyPeAXR/EROfCMCX0HgGxn4RkkHiJmrcVTZXLvYNMq2JfPQmtEoW32PdF3sORrNmGEaOHJpjqRMr6iRlmw+0szvk3aOtWURu4jfI5YZf7sXc/56Gvliwp7GW86fOJeI1xfiF7P2MEFl/IF+sXh9Lt8NVaVJEqs1SeLirHCSlE1Jki93jsVe62y8Pnc5pM/MEk3Es8Rv3orBtyG5mih7dZaJfivgdvE+BXgtK03plSaolPAn4614SlXCmy5YcqVNMOmzz0PYk4ZdbiMHJrra5uEPgEe2m508xOuRLWUk9hK/Rzw8UkbK7m7SKSYcmh2yexHfRaOaiBNVE/E2L6yJsm2iqU3ZWbH2Hz44NV2glJAVN6YZDbhSvB8B9s4x3kMAM8S7CTDYM94CwETxtniShGNcq7+E0NkoLaf+ceKl0ulGaXkPRJ1gopdbTeWuppfiLN5Kgx/FpajEq3IknLgpR8KJYo6VQav/EDpavHD9MuwSk5eyVYBDTV7KGHuzeAmfGG/xJ4G37EvAlxJK+FpCOzHPJt/FhBzjLZsMmOeFKvF7pMqiozbO/vDUCTmSL6F8GWblGNHbFczxYQ2peKDhuw+MhsmeTzGxloDyY+wFmX1yQkY9JR4q/CGS2jXhYjpl6xrOwxqQ93nSFIkPiN8jTu4WboqU/VBMQ9i9q8nInoDh3Yx3ZDeJ5GTPxin9UFWiSBd+GRSpB6JTBSv0VODIbuHKZVjPbqE8b4Wi/ibxsqFdRQJeCuWLoM1HEKcYZEk3KSexTPwe8X+RclJ2mYleTFghmq4F3CPe9wCfhfVfAPJqCXoG8J54KfRFWDDWHRboLhkhdutuuhahuwYTdxK/R7xit8joj7CzDX+hQfJh1McfX5xBIsuReNhK9EJoca7p6K2App3EC7h3Z+P9/S6x2Ns9jLcr5pievY23GVC+W2h8OAJxFpjoZWcDzhHv1YBrxTsGCk/cWQSglIrh7Z+H5pxnvPsDZop3FlJsNKmW3dLDz0DZhwBmAt7f9orFepu8lA0D5Iv3z4DnxfsNX8LRx3hzAbuKtxjwjXhju8Zi/XY13gMAT4p3PAqVMAUrawcsE+8Fu4ntnPqjOQfsZMz59OOLq+BrDSiW59o8n2JZWAihWJQhPX2K2Srq41O+7n9C9365JvS5xxffmSsWEmppnphDKFpDK/U5G/8EyCw0hiymQL+eofnLzyuaUuN7alH63ZKtM62xjPC88RYTjpCKZOSzxctavlq8rOVxUr1lgGPFywp/Wrys8P5SvSzO/uJlhZeIlyYrkZpuVJvBy8J+KF7a7VCp/7dQvd9ITdOGxVKnrNqYVCSr9gDxsmrHh2vvCGuDmnHaLun3Gxv9d2lbob9MWwj9ro5GU/bysqBplzfs7Dftcttyyz8NWmN5edCWgsFx91ypb2p3c1a2nZz12E16XzQ3Gq/eiVfv9yT6HR31f0QHohHpp52KpXT1UX1oWS8+vtjXKJSvUyhfq1BH9RS9QsW06wnlp6O8DHXhltjJeaj0PyKF7r3ETzymlzHmMbZANU6BAgNRtN6IlvhBu4Dc3wSV7h9wS31uZ5C7maDiYwJusbv03t4yvSLDMt2V3Vllif0isly8D1JZ4jCVJY6NyJp3C6kscabKEk+Ipa/bt7fGPzMiy+8nrFRZ4mUqS3wgIsvv5j2lssR1Kksc2iksmw96eCeRJRaI3yNeHZFdBXq1yhJvUVmi1zmyygbdo7OuyIG9OuuKHDg4IpsPerjKEgtUljgtIlsMukRliWUqS/xNRHYF6JUqS7xMZYnvd0mXfbazLGiJb8smirC3ihIP7mKCCTvQ4BEHGtEKgmrI21ujOVP0XyC50aRV2gecPl0C726S1BGAY8R7PKBOBJoB53YJtf4+NqH6Qpu/YPTYBPqDLmIN4mbxe8RpkT0SZftmiTWIB+uOkzhdw4kvazjxbQ0nZtLXWfhZxDbZ8rVZFbnEjRJM2KbBxCzZFRJUcW4GxR7xDImWRzwHLgf+y7IqLssisUmZm1R/wNxms5wXNGDVgLo6F/CieF9WNfAy0lHhzS5NlS8706MBJeJlnA3iZZx4dqjaikGW6IaTWKYbTuKaeKTxI6w9W8zcvh1+THZxWUTl52aI7xFfluwT1mvx16tap1TrLDv5nU012AaQvi+u+xTgA3HdpwC/juQwxt1Ojg67wC45OkTrTigqe5HuPS/aMT/L4edm4HsOPy8DP5d4rey+r7WivYMign5Y9qPrdRfsVOFwkM/I1o/cf4d3gTHdtZoiA7voNo54T2R7Q9nDvfCkBnKA7NIIxeETABuhhDDFS0v6Id2lP7Sd5JSf5fBzXf7LXcVCROX3dvlVws+rsvy+GfT3dvQPyMDv6/BPcvl9TNjKAX26Bfx9fPaD4D8t5urV1d94FicALeI9B3CNeF8EvCvebwHdZBN5MuAU8V4B+G23kO2zIJgjcbgX7iVebmHHhgXXgLxPt7DEB3QLS5TtorNVR1i8e1r0V7qFVjoMerNbaGmUh0g9dB9K7KX7UOLLO0WmX4QVdpeaJzaaBCsIzZofYpHsLQmTVAPx5Z1CjWw9yA07ScLEjeL3iC/0DCdM2c47S8LETPwRedLkiKvypMkRt2o4sbusLHOJomNlVoY0PCeNoGPfi7X+X8x6v/gnQBfZdp0BTSvN0r/4AcAT4m1D3F+FN2O/RpzrJDqFXhDB3hDaOyz4KfLRxQhW5ADiJp0KD3C9eFmoL8TLMr3QM2TWbsj6hWaHUnof4AnxUtNORmlpHmBX8bIcntFUSquVitc3FLz7AUb1CDWhgTSRbHuodLx4qSnbRC+nwjzxUul08VLpfrJFosIzeoSGFNp7oGyrPrH6mdMp4iXMEetR/whRSkt8Ll6/Rh2l60Fu6KkNDLixpzYw4LzekQaEsIG9pIERo/yJCDtXth9/APxFvO8BfhLvhN4SyUk/CXJhb0mfmBK/R7xh17B+yq7tLemvzcAfiK3VwbJFTa4C/q1PeLZcBfnVu+oiGnjLrrqIBl7VN7LgRtjnu0pan2fig17dV3UBb+mruoDX7JUu+1JfUy8vKbsL9nwt6fxSh/9cBn6Jw386xB/UT/JKzJS+8rMcfq7LX7y7dGri8AHSqYlHD5BwYu4eEk784x4STtxpTwknnrOnhBNnSTp5RElzZZCnI5CP5n6mIO+2XK7KDeFrNATV/NsnMsTd1NLeP4i7ycRV82wKiTf2M/3/Nk0IXj8ZeJnIhXuGj+9snAYk8GJ/4yX8z3iLq2CnU3Y3oYQ7d5elJ/QzDYRS95GilAUo3StNf3M/OWn6a//AtI2OORt33TOoquA0agTiLDD5Kmf0W8R7JFKfYXJQPhtQJd4/ISNPDZDnNoDvjbe8yx6+CcpHAo4UbzHgRvHerrUL7yuADcZbTPhUQvlgrbMpWTFBjFju1xS8P2vdO918FcjVe2l3Ad6yl3YX4LpIc10PeoPKEjeqLPGdDLLv7BWaGmxQaXpQMKNvAvmBJkLcrIkQZ+4d2UKRN1An1oHp/J0Q9ulAU97dBsVi7w2SJwB7i6RjhXcgRAnW6FjgBepnjD33Dtf0x4HSYkJvUepLOkr3BLeP4VZQtyQZNLRikCV76x4HWLa37nGAFw+O7GEQtnRvKefSDPyrEbbHYJM4YS/jLSbMkNDiwRLJyd1vaAUTVGG5Qe5WgFw5WI8JgJcN1mMC4PEHRDb5CHtksOSO+LMkRMjaR0SJjOakT8nZwp70IbBhiPj33A+7jv3E/w7wr0PF/9D+sdg+kvIkX8etTHUfk3GTgnj5eUNqg/cLKJg51HifHiq6+FgRqi7Z33hXA27fP1R0J2PJ2UOCjCVXDg0yk3QyE0xiA4aIc1q8o2r6VlvG6U4Zp8+0aqc7aqf7Og7bNxY7aV+Tw4sAjMrHHYD7xcuSrN5uEaY+YdOdesi+QVpTL9GS0++kOzWTGRwdyaFWR9LRkdEk9yPeU1IptyH6U1IpnaAhR0r0IhQdInmnnofESzXSWoISVYKsOkCPBYHVB+ixIPDxYZEjRIQtMdGLCc0Hmna38ECRdJrg2eC2GG4FufeK90nAWuMtJsw/2IS+Afjs4FCe7kf0ByUdwp+Mt2Qc4kww0UsYJ9skWZIE/HFYaKBbC/KpYXoiCVw3TE8kgV8eEjm9RFj/Q6SLEU8/xKgifKiixC8PSUuhTWJltR0SaA2WF8tAn2miFBNuNd7yOwDvHxIy1OfDfMFyJvOfMDeWDzJfN/PALvm6mQdeNzyyu0bYvvlSkH0z8PdE2MB8kyXCCuOtuFQlHeOXI6jacMsJtRKHcImEMo5n4pQfP9yPHuR5rHLZWn12aEUKevVwnRaBtwzXaRH4pxGRVRzCnhgueyPLrnTZfzPsUsK74YxYbokbdMwIsRExU3rKz3L4QbVOA33SCJOfWwB/GBEak55nyUxQxS0a2THrWpBPjdBGCVw3QhslcGZBpFEi7DtR/p1lJ9PZpYTpBWkJCTco9xaQRxWErFMMsqRAJ0lgWYFOksAtkexQttlELyZcIJouAmwQ70bAv9P1LzdBpb8G/F68DwGeES/jbC4IrVkYp9UElTDOXeJlnIfFyzivFYSK9usgQ8U3AG4rCFUJS7JVS0ncpqUkfjAqXErKzhwpjYPYPFLWnIDUSBEl3i3BhPs0mEhtTvEdZVkzRwaJ5br8vUbJ/oCo/LwM/FyHH5yFHQ2d001OigkLjbeC+fu9eG2egoaxBeTWUWoM4LZRagzgJ6MjxkDYzEI1BnBhoQzmgFShGgP4ewkm3KfBRGqLJKzKsmYWBonluvynhe89bfmBMY5G2PRCKSyg2XjLmf7d4mWaT4t3MOIOMckXEyQntlpAbh2tJgBuG60mACYOi5gAYX3GGE0EZRe77LwxcnJi2dNd9iDDLhlk2VNd9qIxYl/i2jGSOPFdDSeuGCvhxOfHSjgxmtndxgayjbWHxmIHHhZeWjv8eodfn4Ff4/BrMvArHX6ly993rDyGVbZ7+dDGbmXs3x8qfuJDhxoTP2SVtrrRphqlFUcDLhZvdaA/aGD7BKkXE46SjDDORWNDGTkOJk2aWqkgnCfV6yh/Xu3M+w6ANyWUySXCSR4yJigwBY8xpSi3gkGSlSCrDtP1FbD6MF1fAZdGanE56DNVlniWyhKviciuAr1aZYm3qCzx+SPSZZ8x2SomTB0nNh0nkk6pKPiiESx90eqZ7bK/NOySLy272GXfc7g0UmKvcZIN4pPjJJz4bw0njj9CwomZsv3lYTJuOOkF48ZAxD9adB27PEij/VifzzhHjZO2EJQ1qJheNnbSiZ0stTkJZtz1oDccoftz4MYjdH8O3BrJdexIJHOkLtqAXY7URRvw5SPTZY88Uixw5I75WQ4/sMBhoMcdaSqWkDDe8hrADeK9GfDikeHjT5AbNH/EjZo/4lfR9IsQtUjLAuxSpGUBPluULntkkZZlx/wsh2/LAnpckZQFkCiSsgBuEO/NgL8UhcsCcoPmj7hR80f8++TIuQnCfhb9Pyu7S6z9zRaXnz3etH2C8l8N8bsbfkl3y18f4k+YKOUn/naipE8smyThxEz5mj1e7EI8d4LYhXjNBAknarxcN169xPOIb4+XWZOYK/E8ourLc/R5RM1fHvEtybdH1HSC2fdy6LvSlLuY8KbxVlDDpgmhwWM0Ih86MbT+2gRdH0zWIyfg5sl65ATMmRJ5iAS6xxR94ATsNUUfOAFHR2SLQI9XWeJElSWePTVddsYUky3CHcZbfhdjTZVnCIAzp4YvKIN76pTQ4tQGlZyqqaD6Pz7d5X89RaqZOEWzQZQs2bvLp4O/TLJE+K3xVjBLk0w+KhjpV1ND1t2gOpHo50GiKxCwcqoeJgEvm6qHScA7I3ZYA/o+lSU+oLLEt49Jl/2bSb+YUHG0ycpxR4ukkysKvmkES9+0eo512VsNu2SrZc922Q9ME9sQ9z5a774AXz5awok/aTix5BgJJ2bKturLcvTlOvqyHH25jr4sR1+uq88TfR6xYpp0DeJSDSdqvKDLML3jJI3kiiDt9uRsyN0kssl7bHrBNEMblRtbl1tbB43yEKt1rqN1btDZIP7BMdrZgJuP0c4GzJke6Wyge0zXzgbsNV07G/CwiGwR6PEqS5yossSLZ6bLLpsuNUR8bYZpLoQ3ZogokdHcXxZAco3EyiL+LDnIJQ6ZIeFDZgSp2WMW8KfMkE4MmG28xYRXJdSmFVjxHpuVxhywJswMr5RXgF45U7sU8LKZ2qWA9xRHzmcR9tJM/R3DjvlZDj/I/wsIO3eW6dNbTqdn5Sw5XAA8IN7XAW+J9wTEbigOja+fQMFPUr5+EBpiuOUUvKc4fPse5H3F2vmBDxRr5wduKov0IoT9p1hKRdy1xFQWoW+JiBLnlZlgQo1qIK6SYMLNGkzcVBYeN2waWf+xeQgs8xnCvpCyEvqYLJQz2Vmlxks40XiLCVVlsloA3CRem2hghO5aAjOE5mu+DeELhwZXR3zL6SNKAvEtrviWQJwBH5Rp9wNuLtPuB7yqPPJ4BWFDZ4uJiW/PMdYhvDtHRImM5hiNse6TWFnE2Bw1GnDMHAkfMydILTdDPM+Jl+fE85x4eRni5Trxejvxcp14vTPEy3Pi9XXi5Tnxggs8tMSs2abK7gT8zniLCfsa+5Qz0lviteYJqvd+a73GPIQeUx7u2bMCneX7ak7c40L4Vpfrfgp4S7nup4DXHBfZmCDs43KpPuKsY009EUqOFVEio7mbK0gWV0g1EW+qkGoivqHhRE0tN0M8z4mX58TznHh5GeLlOvF6O/FynXi9M8TLc+L1deLlOfGC6qMldqkwRp0KOLpCNteAv0goI30qXsLPIkCYaQxYbo0WVMtga9PGd4D9jgtX6irQq4/TagPecpxWG/DlEyLVhrCnjpNqeyoDP/v4WOzA403ywwGHi3dfSDWeYLyXA64+IZQ/yjeZoArLDar8e6TScoK5775p66kXqoBQwToeIRtO0D0McOMJuocBnpOI7BUQ9vMJUgJiy1z5sR5g4VwRJT5zkgkmPHeSBBOzEvJADxBXxcRzEuH7VzaNLOKUuTLBzg1i5RKnJqSmE0Euc10NN8+VhknUPOQRpyYk3ImX58brfaI0TGLDidIwiZdqOFH19Xb05Tr6goZco2Yxo/oKNYYhfOnQeD9prl/YYkKzlJsKfn+i8RKeOFEeRwD+YqxcbpSGjeG0DycPW05fOTfIwxY3D3YSWYGAlQldfQAvS+jqAzi/OrK6QNifpPgGD6mUZ7CA4ZUiSrxjngkm3DlPgon/kGDCvzSYyETcp9U2jSxi3KRRTtBYucT9TaxyguYy19XQXqm3gIHTqqTSicdXSThR85Z3p6pjuKMvaCT7aPFM1S3UQhnClw5Valaln+liwjDJPxW0i/dVwOsiQDi1yoQSzjPeYsLt82RWAnw0L1RUp6qdnG05/ZjKIGdb3JzZqk4iYGG1XgMDpqr1GhhwfF3kGhjCPhOjGDy6RvjEVI2EE3cQL8uJl+vEy3Li2avboEvq9OkQsKxOnw4BX2iIPB1C2MI6YyrCIQ2mAQ1vEEn3Xga4jxnBUsJXdcYgH7XQs9t8s0k8GDBBvK/NFwVGJF1FyWN1AX9TiL98vtiD+Np8ySvxJw0nPlkv4cT/1OtSF5jUsiUb/HLaTbujO8vRnevoznJ05zq6sxzduY7urGi52OgfszbOy8DPdfj2anSD6OeJRGAMCnrGmOW06+71xkvY33iLCcMapEOoAj7XA1zaEH4Ojei5RlPpYMCQ+fJ8BXCohDLqaQ3hC0ggNzTotAbc2KDTGnCnkyO7UdA9TtbdKLDXybobBc6IyBaDLlFZYpnKEi+KyK4AvVJliZepLPGliOx60BtUlrhRZYnnL0iX3WmBVCFR+bkZ+J7DD6qz+wJxzk5uMMiDTVD5eMC5C0IVsALkygVaEOBlC7QgwKMbI4VG2EuauZcsPzcD33P4QeZeWCDOydxmkF9IjjpBempj+FEvyJJGrRFgWaPWCDCvKVJ7CLuoUX9FYfm5Gfieww8yd0GjOCdzd4F8UHL0LGDnplDmqKBHkzYtYK8mbVrA5yOZo+yMJsncDMvPzcD3HH6QuWOaxDmZqwbZJDk6E/BcOHPrQW7QzBE3auaI1zZH2hzCdmrWNtcc8HMz8D2Hb9tcszj3lyQgD2uWlTfg6ubwhgjk6mZdWQNvadaVNfDklsjKGmHvaebes/zcDHzP4QeZe6dZnJO5ThDp3mJyNAhQ3xK+Qw1yYYtOnsB28XvEE9oikyDCHm6RwZx4dVL4xDNaJZz4UErCiV6bhBMz6btd9GUR/2SyVvEnqzqX+HRSbscBPtVg4tEL5eHbwkBxYCVqeEmUnQ/JK62Cj8V7nuaS9/41Y+6ZimYAk8CFyx6GZ5+FSjRpYob4Jb9fvTzyG89VcKtVlniLyhJ7R363ORD0IP3dJnGw/m6TuCAimwS9UGWJKZUl3tiB34M2RH4dmQS9UH99SEzprw+Jt0dk14C+T2WJD6gs8X8R2Rh/WKdvtyF20bfbECdE3pNTrL/JM8MisExlifdEZNeAvk9liQ+oLHGfyK8b80EP15/wEQv0J3zE6yOyq0CvVlniLSpLvCnyYzm+NGS1/rCOeIv+sI64MvIumlXwrdZfmRFv0V+ZEf8Zkd3iyYs6zJ0L4DaVJf6la2SQA72hqw6IwI1ddUAEvh/5ZdMm0B/oD5SIm/UHSsSK3MjFRdBVufoQHlidqw/hgQftHLEv6OE7q32BBTurfYGP7xK5qAX6qV30Uhdw3S56qQvYmhd5uA/6zDx9uA88K08f7gNfjsiuB71BZYkbVZaY3yOSX9DDe2h+gQU9NL/A6ohsEvRClSWmVJb4p4jsWtBPqSxxncoSd4n8zioPdA/9SQ2xl/6khjgsIpsPerjKEgtUljgnIlsJukplidUqS1wekSV9psoSz1JZ4tM903/Ws72fAH0bkY3xhzy9tM8Du/TSPg/s0ysy9oEepLLEwSpLHBORLQI9XmWJE1WWWB6RrQRdpbLEapUlLo3ILgd9psoSz1JZ4pUR2VWgV6ss8RaVJX4TkY3xV0z6syViF/3ZEvHwyM+iikCPV1niRJUl1vRO/4nT9n4O9ceILH8C9ZTKEtepLPGoPpHxF3RJHx1/gWV9dPwFvhmR3QT6A5UlblZZ4q7Rn1yBHqQ/qSIO1p9UEd+NyG4C/YHKEjerLHFg5OdVpAfpz6uIg/XnVcSqiGwS9EKVJaZUlvh0RHY96A0qS9yossSD+kf6Jujh/bVvAgv6a98Evh6R3QT6A5UlblZZYvaAyPgAuscAHR+AvQbo+ADce48dvyvDXZfs9n+8K2OwyhIL/493ZUxUWWJ2ZK2RB7qHrjWIvXStQfxNRHYF6JUqS7xMZYnrI7KkN6gscaPKEg+PvE+iCPR4fZ8EcaK+T4JYH5FNgl6ossSUyhK/jsjSoJ10vUPsousd4mFdfnld/BB9xwkEOmnZiF20bMSDOvAekOoOrBG/isjG+G4LtQOxi9qBeHXEDqtAr1ZZ4i0qS+wUsUMe6B5qM2IvtRnxxojsKtCrVZZ4i8oST8tKfwPi9t6WeG8H1ohPR2TX60sgTDvTV12Ydgb8PCK7BfRWld0avAsD6zN9F0b0bYbbe/Phiogs6ZUqS7xMZYn/ichuAb1VZYnbVJY4J7JOrQRdpetUYrWuU4nXdWBN+0D8l7f1kR0YSzZFZEl/oLLEzSpLHBFpv0Wgx2tbJ07Utk48MSJbCbpKZauCfgM7AM/swBj1cER2LeinVJa4TmWJWzr9cptd2oE95FUd2Ov1ifTjgaAHaT8eFLzvB3MAsLkD4+TeXf6/aQ9zO1Bv90Zk14C+T2WJD6gs8ZUOzC3TO/Beo4ujbxoCvVLHM+JlOp4Rt3Vgf3x7B8azEyPjQyXoKh0fiNU6PhALIv24CPR47fPEidrniWsjsqSfUlniOpUlnhrZxy6H70zdxxLP0n0s8b+RfWyM79LQN3QQu+gbOoivRPax60Fv0H0scaPuY4l1kX1sEvRC3ccSU7qPJZ4SkV0O+kyVJZ6lssR7IrJrQN+nssQHVJZ4UuRlH5U7yRsETV0Aq/X9HMSLIrIrQK9UWeJlKku8IiK7CvRqlSXeorLEV3ZKf6/H9t4R8nNEli9b66T7eWIX3c8T10f2/qQ3qCxxo8oSf9j5l48Px3Xg3WunRmSXB+9jQ70Bz1JZYnkHxpKLOjAHvNSBcb1bJL88xO2hsj1kuyxrAuC4DoyTJ3bAZrURWd6gXKiyC/X91KZfAC/pgB3+HpHdBPoDlSVuVlnivMh4lgS9UMczYkrHM+LBHTjD29KBtVHXyHiWB7qHjmfEXjqe9dKXNP/ScfLYDqy5buzAOuqQSL3l8ymEyhILVJaY6EB7+FUH6viJDqx3Po/Icv2zVWWJ21SW2LUDe4aTOrDWKO+AHV7vwNpzlw7seS/vwN7ppYjsetAbVHaDvn/QjKnAHzqwNx0TsVkR6PEqS5yossS9In1zIOhB2jeJg7VvEhd3YE/2WER2LeinVJa4TmWJ/4vIxvj6O+3HxC7aj4lXdODc/okOrGH2z/nl7ezmSNtZA3efyt4XvPcTawLgox14B+iPHTgneL8D42+/zr+8bHM70Id+3YF3oW6JyJLeqrLEbSpL7NOB52SLI7LLgz0d2iTwLJU9q4N7hoYO7IcejsiuBf2UyhLXqSyxWwfGvlkR2WLQJSpLLFNZYntEdjnoM1WWeJbKEh+NyK4F/ZTKEtepLHF81i9vOxUdaDsnd+DsqiPrs46cXb0cscN60BvUDsSNaoeNwVtXf9k4uSIiS3qlyhIvU1niryLjzgrQK/VFnMTL9EWcxPcjsnzd5Qcq+4F+usH0+Rz5CEOoncHXQ/dkxF66JyP2j8gOhG+QyhIHqyxxcQf2enMie73Krv5rKdEegNX6zJJYGHkFZhHo8bovJE7UfSHxg4jsFtBbVZa4TWWJ50T2kCtAr9Q9JPEy3UMS/xmR3QJ6q8oSt6kssaYD+80HI7JrQT+lssR1Kkt8IfeX97dEpK1Xgq7Stk6s1rZOvDciuwb0fSpLfEBlif+OyG4BvVVlidtUltilA+PZ0R1Yy/XtwPOLSRHZYv2ojxkng08BYZwM9ju/bA95Swfm+Y0dWE8eFRnPikGX6HhGLNPxjPhjB87tT4vU23LQZ6os8SyVJT7SgTnr1YjsJtAfqCxxs8oS8yN1THq4tgdigbYHYmNkLZcEvVDXcsSUruWIqzqw7ns2Mk7y5b8bdJwkbtRxkrhXB8a+7yKyMb53VsczYhcdz4gfR8a+LaC3qixxm8oS94yMZwNBD9LxjDhYxzPikIgsP98yXGWJBSpbEIyZ4Y+0bO+DLsdHZCtBV6kssVplibUR2STohSpLTKlsSt+o+0v7/OAO7Hk78m79Xh1YT1Z04NxoXgfWiB3Z603uwLrvwQ6s5YZE1iV8JfpwXZcQC3RdUhCsUZz+Bnq1yhJvUVlidQf68f0R2bWgn1JZ4jqVJX4R2b9tAb1V92/Ebbp/I1ZG+jzpKu3zxGrt88SzOrDm2i/Sj/P56Sbtx8QC7cfEbpFzzzzQPfSMlNhLz0iJz0TuR60HvUHvRxE36v0o4gV5v7wPre7AnHVeB9bV13bgudPvO7DPer4Dz2Yu7cA+dn4Hzj0v6sA+9ncdsO9fIrLr+XICld0QrBlQNh1nfum482AHzuUmdeB5VkfuSmzswJrg0w6sJ5s7cD+1a2SM4qcheugYReylYxTxug6MZ3+PyPLDEh+oLHGzyhKHRsaofNDDdYwiFugYRZwa/SwE6BKVJZapLPHqDjyfvzsiu6MPP/wlIrse9AaVJW5UWeI7EdlNoD9QWeJmlSVeFhlTV4FerWMq8RYdU4nTIusofjuhRNdcxDJdcxHPi8iu8Pw7tuibwMtUlvhRB+7TXhwZ11eAXqnjOvEyHdeJHbl7u38H1md/i8huCva2sC9ws8puzrCO2tFHB87vwJqrI3uc5zswnnXkLPPM/4/mod91YB7a1oF9Vq8O3Ks4qwPfPto1MvbxE0WDdOwjDtaxj3h4B874mzowpl7dgTtae3bgTKwwIluU5Z8tIr/AiSo7MfiS0S/7fUBTB54t3t+BZxKvd2AO+G8Hnl/0i6x/B4IepLLEwSpLvKkDe966yFidBL1Qx2piSsdq4s0dmC+e6cB8URCZA4pAj9c5gDhR5wDi6RHZ5aDPVNkzgzV6m0d8JjKur4dvg47rxI06rhN/7sAe/cbIuL4K9GqVJd6issTDOnA+eUZEdjnoM1WWeJbKEs+PyPLLqStVlniZyhL7Rsb1gaAH6RxAHKxzALEgIlsEerzKEieqLPHUDswXR8TSZbsZeZ4umO06P1DCl5zFwj8v1A19p1jZKL1z7H7eeQfXHY7pwPHesR14BJHVKV22VYrSatlJl90YC/1y1waVtAMWi3exjdzoSv4zJr+UI36v+fw+kLU/n3ZksxzZXEc2K4Os58jmObJB+Xi8eb6Y/UZ/RrY1wAPPc6R4DwE+DJf0I75CSWxD1T/Hwp/5jjwQ76cTK3FohofnvTuFokfvOB+h0Y8IzkXD96EPl+iE6Z1C7zgmd3Kn8KuSO4lz0ovurWo1PeKvMuzDTpboy5XtaCKnbbvc6DrmCk3nigx75BW6tkH0e5TtaCLn1u1yd7SueT3DGuhRbXCP6h0PvqUjg6i/FQf7NcBr4UQZ41kJ+ls6d0ePo7t0Tn90vVWiE34Kt8sdfbBy7w58sHJRBtki/bAkcbJ8WHJyBtFjQNcZdllLZ9kWOxnc0Sn7dR14GtmRJzSPdeD0/pUOnDy+24Fd/Wcd2NV378BToj07sAq+KYPs4fL5TcKlXeQ1/IArJPRKXeIi9Gr9RYLTannwulg+5PkbwIXiXaEJOYNKKhAstoJGeURji14JRnsh96ouoaazo8V196z0hbj8+HalwYdFFeEJtcIT+iVRBH+wHQ1/Ew1Zf7P84EfVd+nVAA4HgDfE+w7g7+FCPWwFyfk0nfuEmOtzTcWxHLmPhfPodvYdnOD8LsNpzwH6bdMDtsOfod82naEfDWVxzwme0K/MIl6j4dcEOuz06ujwHB15jg7P0ZHn6AjycQjok8UIvwKcLV8cPVslHdOMAjlauISL5KOrKwLBYCk1TXMFwfmAZeJlni4QL+NcnxV+gwHIi+UDqVZj8IP4sSAvlKog945wrezo/vlTHfg9TUfO1b7swJ5qvw7cGf1VBtkp8uXXY7LlOr27MgF5pAkqPVK/cgurTdPPwSK0TFU6tqSgfH+2LBFwy1zuVPluruWW/5JfAh0QT//V0J360Vni05IQ4Rkt5DMazUnfiZV1p9UaDAJ3IOxJMQJj/1W8bwE2R0yzg4PO5zMcik6T798arJE8Efx9a51Gc7LqxMqaZrUGWT0K9EkmSjFjN4h3KeCsePijXzvYs47ISd/ffqpZJXYxH40tI3RVUWJfCSYM1GDiiJxQCRxlWcQvTb5KCaost6tqQLCvIPSuEqvBI+bIN2xzbHbyiHtK8J42O3k2O0Hr+goK/iumIXdI+Gu5O9qtr8qwsy/XTwATTxBVJ2xHtFa/Bkxs0xISz9dw4uUafnmgww7DfIC3QkxL9vVhK1fr4zu+dhBwQ7jQOzqIfjfDofVaLdbaHfOzHH5uBr5H/KtklPCCVgvxbQl+22oIXu/yJOh1YswXlO2uqndw4aurl345rJN+Y5i4A36Www/K8j34XviTxzu6Q1aT4b7ZoZr8oTvmZzn83Ax8j3iUyUoZYbqI5hETEpywGvIyaMglHi3fYD7aauhNnCfB86yG4F1hhaDHiAnGKNuZrpMgF6o1iCm1BvGaSGkpe7Fa4+Id87McfmCNC/WpBz+HDLg6XC87esfI/ZGU1sL3lMoS16kscVHXdNkPJSlCa9dQt+Op3O4mqOJkQFvX0Cz4lidnbc7mfPd0qeUgz9QTN+JZeuJGvD+SG8re1jVUcBtU6gZdFE53LcinNBHiOk2EmB05fqPsJ+FEGPRjOBEbZD8CDUU99NyOuKue2xFnRO70UXaKfKh6irL5JsYzXP654c9Ol4OcK1H26B6LHRb+TjW587sZLT+cwZO/P3dX4l/dA/0/nJFB2V2AD8U7DaLT0vUmDLfsJNUKr6/TaQvleisIVTs/EKywghUZcnrhsiab0wuXOTm1b156qLu4zGU9d9lvrIZzjYZDc5UIjn8QUKJ3LYlleteSGIv8/o2y8jvClQYbpJANwXXOdnOd82UJJvxPg/+n2hyTOMo8q6zUUZZHPE2CT7PZycugIbdOr5fyy1JWQ+9UkG5gYSaQNJLl/P3ir423mPDH3NDE6AiS86J4Pw002ncaktSfEBK76E8Iid9Ff0IIeo+dpJ0CjhFNxYCKdKV9TVApYYwUgoLniPc1wDfholnlJXvYtIMD2r1AT5VKoJ6XxPuaSjpVcz7ItTuFui/TnympnaO/koT3myBukId/7CTOaZE7+tnkvJ3Tf2I5VD/DPtTykxn4WQ6/MQPfI06Qj5NPsKJ5GURziflGtJgwSkR7E8dJ8DiroXcGDXlD9f1OMEWB1dCXOFeC51oNwYuuk6AXqmmIKTVNKsMvSim7TDJDeGnnUJ2Re74UlvDyzuHXA+7g16iFeem/XP2PVsF/dszPdfiBVd7eJRZ7f5dQCzgQ5GPymfU3AZ+KtzMi7pIXyudD4DwicXmx61XxfhzEKeZjks4mTnFOEN2u/5Cdr8UIT0L+L7uE5ojN4HwpBrTcIO7xu8hLuVBTNo/2uxJIaLy+Ros4UV+jRRy6W2RFj7Br88SAxF31dVjEQT30S+M9Msd7WOJlPWzj5Trxsoi3yWulcolP9ZRwourLdfXVij6v1uYzLwM/1+EnfP4ZCHvXGLjsB8AePYyXOTi0p/G26vuw4P0n4LTeco4HeFy8bwF+EO+QPrHYvX2M9znABvF+DBi3q/HOAZwk3kW7Smac5j0O+o/qKa/m1DduuR/ZCbgVzwfcoO4uQeY/MuUoZTl2MuUoZTmOEu/tNK6JU9oPMEO8LN0q8dLSj4uXhn5DvHvq67PgPQXwmnhHoryjTZlLpwPOFi+N8rR4aZQsU/xSGmWoeOsBvxHvbYD7xEtTvSpemmqXXWUjrO+KYmqAIvHSgMeKlwa8ULw3AG4R7/2AP4j3ecB68f5dXywF738BP4i3N8zff7dQ92FzOMc2hy7GdsUEbRms3uf6hKrNsfd9AfeXa2Qr+TiskXHOk0GDcfbsIa/eDgR/uXK2uzm7/gLltO9UMcvUIE75L06HjXrRrtszS1XADXKeD7sP301PjoAFu+nJETARGTMqQVepLLFaZYmXRGRXgF6pssTLVJb4Zr902cd3k7GKmKOvAiMO6SvhxDUaj7i2n54M9NuhvixHX66jL8vRl+voy3L05br67hF93j02/8HYxjSO7muMPhPwiHh/AAzrZ7wVgIXiPRvwsHj9pJy6ugma1khPYKYe7xeqK6bzoXB7QPlwk07paMA48TL1OvG2An4l3hsBD4qXeYqL0t6A4eJl9urFy+xdJF5m7y/hDHyGxLfAxWPll2VVXJZ1mCbt09PgP8ahT4a/1aEvhv9Gh94G/38d2kNyzJdPV6ndfPpU+M906Avgv9qhb+0nlerTf4T/CYf+q1rcp4OpHGEf9NOjHODmfnqUw+JH3h+XB7qHvj+O2EvfH0eclkF2XH9pqON2zM9y+Pa10qBLNC1imaZFfDqii7L1/c14QLjGeMtuBtwt3oc0krstAnlyf9qj9LKsEtQX/IsNXWzos+C/2eHTf6fDp/8hh79Wk/DpYBWHsA1aDuJGLQdx/90jKz6EfaY2I/bZ3WSZsJuKEvffPXy4a2NlfWa1BpbsAbq3iVK8XxDbHp+DHL67DoLAgt11EAQeH8lfJegqlSVWqyxx2IB02dTu+p0D4Csm2XLCFlVL/EGCCXurBiK1OWM/Y70m+f4M8Jl49xggkeA9KIgTFOxRCP1ZBN+2cYLFsw3qjHhxidsTsFtYzQu7+9xSyy21eSx18/i61AyVfy7en3b382gfJ4Acrm9WJBbomxWJqyNWpOykAWJF4kViF8IlKnqJRnPMtRzkBVKMmwKuvaUB8j5Nn/iApk/8w6DIs3+EvSjRX1Q2v6CZiPKjrZ7hH++pn1sCHreX6CX2HyThxHGaHnG5hhNv1HDiHwaFryU9At05e5iVZ1fAJPFOIexpvEWAFeKdjfR+v5d8XhuwVbxMbdIg412kCfNjQJqus6L9AUkxDX5VNNG+R2CAVxMZJN5MLLMSbwYSr9M8Jo/lFJwoXmb3wz3lu4HI1FKTsfIrAfeK9z61FLzjgjyW+/ZwKvtD6J8iOXg3Md/m4N1MedyUOM9KbMok8VHiMivxUSaJLYmL95QcG2KpzXPewFhsxEC5hQS4W7wvAV4Vb381vIlIz4xBIq2mN+FuktnGWmV3Z6xcwuK9ZC8EuEe8Tj2fhVQfMSlXMBNizgq/3XFpCjhSQifZNjEPsEi8y4M2UZbBEh8nbrC2+jiTrT5P3GElPg8knPIcYsvDnJ8l2f0L4KWBQWPVPFbYjG3HSD8YTWVsUpkt8614+0D3wUZ/2WxAhRTxxKB1pZUWAx3172/0l44A3CLePaHwQKO0mKlevJdswwC3ipep/lG8fwZ8LF7W0M4mA6X7AY4WL1vNZvGy2PMGySIuyFapmy3tVCv2zNR9+gfVWW7rMOgz05HGYmmSTOPUQaEB8gLbdv8B+Jd4CduMt4TwtYQSeproJQRpYsVO07b67XMAkE8N0ucAwHWD9DkAa3pw5DkAwp4XTYQ5e5tyHLu3SDpFouBrYqTXrJ46l/2JZOMTyw4+Fv9fhM02uss2AT7cWx62AHJNMmW7AQYNDjWNfyBOuRGssPkJGuYfELRW1GwAbBAvVYwaHLJ28d5B0qcClon36iAXZX0G+8ptq0TSTJMnlu9qJun3c+meZObuLc59wgyR8YP1kAk4cbAeMgGnDIkcFiFsluR4lmVPd9mnDJZLNfvEYpfvE/4CMThzDLdkjo081We32cizELFUIi8B/Eq8qwG37CMfGAXcK6GvAj4Q7x7QuPeQUJrNgyU6T2vP2ydINDi5PdPyZ99r+cEXfochbNk+dqNAmfgQSzO5KUPSNxLzrd4TnHRPCNZH+4hzqx4iJUN0jQ8sG6JrfGDFfpE1PsIaTEmLGyz7WJe9VAxB+JXxVhDOkVDC9RJ6I+BF8V67r6hyv3kFTovhlhCWGW854WwJJVwloTcO8aMH/XCpCvIzvyuBN6r/HpvpuVFZdkpk5LN9ZYUL2MsoLTkMcMR+ocHD0Z98DXjrvuLP3k9iuU3fscSLKuoU1NHUuNFqavx530BT0GgWgH/aENnFAy4XL8u2TrzvBZkuIxy2X6i/OgVlnt8X706IM9HkqeQ4wOJ9QwUtZdWIRVhLN4n3dcA7+4ZakVVeOj9QE3SHD8DZLO2GsJMkQqEzw+kxY2+K4I+AgyWRuYCEeBnnnHDSFDpMgo4AjA9z7wD5qAStBazbbrZ/Doxnb/SDrNpPt1rA6v10qwW8P9I1KHvOfrJIJt4kxifcrKI3azSnTpxYWedYrbkZ+B5xlbTzVVZrntUaNP9zLLvtNqu1zef/CvTZ+8nNQ8CdUuo1gSL7aBvkU2oA4nNqAGLj0MgkibBv1ADf7JifRawYKsspwHEimktsHBrqH19C8ivJKqFkqCytAsHAku+CO3uorOUDrv3uEciFQ/XREzA1VB89AWccEHn0hLCzh4p1AJdI5hqJl0rwpTZW0DlvRNi+B5i8Dz1A2E4xnt4fK4j9Q03vSUR4y+grfZdJGG5pDqCneE8EnLd/qD5ug+Dt+4dK9geQ+5jEymy69oAFZMkBOrgDyw7QwR3YHC036IUqS0ypLPHuDLLnHKCtHXiXFPeuDKIXgb7jgPBXtUHepykRH9CUiOMOjGx+Efa0iV5MGHVg+DIqgrqYoFLCYQeGv+wUcEsIYw4MP0cBOf5AXYAAJx6oCxDgsZFcUPboA6W8xBlGVTGhXEXLNZr70xKQVZoCsVpTIK6PpEDZBzSFBzLw7wP9rKh/VtnupUaQGzQl4kZNidjt4MgBF8JiB+l2HnjcQdJrAL85SESJN0kw4UENJr4lwYRMiheJ4qxFVlsu8e8aTvxKw78KdNjLfd9Bx/dSNsLdJrUyJvy6eP+ukZxG0A9BuxtuMeH+g2T3BnhXvDZO0DRORlDrQeELbZDocbAerAJ7HawHq8DRkaJStv/BeoQC3ONgOQzLIDoc9AhhFwIKDw4lyhj7SVBBOrcI5HjNEnGyZol4XCQdypZqlkoz8CtBV6kuYrXqIl6eQfZS1XXpdvhNwveIqYP1DgvwVFOE0lNttLwManMdtcHDdF8Vf2ahbGfwu+Bgce5dN5CrtUzEW7RMxNcieabs01qmp3fMzyJulEa20YoGs/ITB4tzH8aD/EBzQtysOSF+FklpC+itKkvcprLEL4aly3YdJrkmvjXMNGPCOypK/GJY+FvUIF8fJgvZgGsvKIB8Y1ioC20BuXWYZgm4bZhmCdiSH8kSox5iNBKUXe+ydzLs0p0suyadXUIYYbxlhHOMt+JmwF8k9K+AvfJNKGGM8ZaVAcryQ+U9CoIPSpwHA2/xn8Ka/iVewqciEFHakh/+FeohwuVi3me7C/t+4O8uigjjpMxM+yHxvhYkWkw9R+bLjwQAlfmhCmmG0NVGsJzRnxHvXw/xc1ducxfMXncH5Sxlcn8V7x75vsVKC4PClc4MLFZ6cqCp1DVeqdTIbEC55Jhwh4RS90bxUvfe+aEl+7fgZEt5PED3cNGSIBfm66ICmMrXRQVw2vDIogJhv86Xtk68X+qD8KC2wQc1mlNNryLoLUn0X4DPxdsJQn2Gyx0nwKTh4T0vyJLhuiwClg3XZRHwzUiuKFszXHJF/LNRVU54WkWf1mjux11trCziU5Lpp2ysXBsrKMt9w8W5AwvIDzSrxM2aVeInBZFb3AjLHmGiE5R9bDq7lHBmgZzPAq4T7w0FEsnpWTZOiaMyOKcoRdjwAnnyDFgmXqq8RrxU+Yh43w202+Upoi8vkOuJgHPEa7MRmPOzEeLc3zDZ9IKxBeTWAh3FgNsKdBQDXjoyMoohrP9IORAfGbCT6exSh92Yzi5x2PUue8hIvTgAPMOIlhPO0nycpdGcQjqxsohnGnbFmTZWro0V1FDFSHHutAhy9UidFoG3jNRpEZgaFZn2EPajZpWYo3zioaP0yj5wuoYTF2o4MZM+5Wc5/NwMfM/h57n8RyU/uY/a/AZrhDmgG0aFRiBmu9soGWcBR4mXGS0dFf6B9ihxTtCfEXeqCSpjhFmjwr/mBXnmKL2RDjxrlN5IB84sjNxIR9gqUU6YXGhq6ahCkXSvuYN7sREsXRnEKV1lVVamqyxx2HNddk6hVAWxn+aoX6Eva5/XMX6/QnmSBZgkXpu7oBFmg+xmgooPA0wQ7/RAMLAci/CWmGs3cCYWyk8yAsHAiA9A6A9iGEJnwy05MhAM6pHadpO446zGYKwAWVKoYzawrFDHbODloyNjNsLmS3YJx482RTxxtEi6wzS4NUawtMbqaUxnlxCOGy2nD4ATjLfCqgzlc8posT7xRM2bL+rWyuuFgaZUoCloKG3grpC20wxOKsxlwU6TMlJ15ehQ7bxXGKScTAUp2/FtFejVo3WIAN4yWocIqhob6dII+6PmnDh6rLEh4VAVJVaODf/UCpLDxshAQDxERHMPCaKtzPKjhQYIxDtb4nnEFWNkgCCKrP017VCEDR9jCk5V48aGfxACTuHYUOX8CkFjxobsSJ1VY3VfBKweq/si4GkRSywHfabKEs9SWeLqDLI3RTIUBJW6QReODXWDNSDv00SID2gixL9GElkPeoPKEjeqLHHBkemy30mGvlM2n5ie4fL7HiqX8AFbjpCnz2fQ8/URJpyg8T4Kxetl4pUQlL8pjc/mQ5x7qNwQB5x8qGSRWHWYCSY8f5gEE/c43AQT9jpcgokHSzDhbQ0m/kuCCcy2ueAC7HakCSb0U6sQD5ZgQiZj7S2ZziKOlJzmEks1vFQLw/C5h/o67FmGX0I+UD/jYC2XIXpoaYSjZTCEn3ND/HyE5FfEjgxsuyWw7QCon2/sWc6UEsaG5UxngLFEubVV+W2AmnHGawsfdNeBiF5nNJVR0zLxUtO7h4W6kFNvjU5lNTpV0ejYv9ExeqNj6cYMVlq+zLHF8mVdxwW2WL7MVyNi1hbLl2VQ9INr1B/OiFlFP5zhKPrBNar9RZSj6DtX0XdnODn6zlX0navou0yKLjRFk5ooI0w/XMOpc8wRStAz3fS1shmAY8V7JuAJ8X5+hOQAXif9C41FpEbLCKOPjPx2Kh/JjTlcb86VXpb1R+h46ghLZ6jd+oSt0XqXrw0uoZWvTettaWX/sq0sgxm+OuPRQ4N+8NUZQ21r/8rYU034VSYTnuu2jnPd1nGu2zrOdVuH/elXEgELj9SNKDB1pG5Egf+JdH7KnmGMWUz4WHrKZyrpPlYAea4JKj3X6kmms0scdtDy7wC95sjQDHEVyGsl6H7AK+IlvCrJvAP4ZzjOZSA/kZHsiyCLwfR2Bch/HRneJoHcqqYgblNTEOuKItskhHlFsrsH7Gm8ZYT9JJRQJqGE4ySUMLcoLdVdTVApQRNKumxRWUIoKArNiX5kziFO7MYM/CziIBO9YpDmkyM0cZoET9OMmmdOwBoJrrGKczMo9oi7G9Hy3a3iPOIUCZ5iFecRExKcsIqDfc4o0MVirOLAbqWEqqLwCQrIhUXacIGpIm24wC/GRxouws6S6IT3JfkPmdnxxjtnvERy2zC4F0nqhL9LrTHOgPHyWxVAi3ivANw/PvxTLAjeGK4sBr2olfXidnKp/CyHnxvNEW1O3CTVQ/hQrfhhkV+Oigyxci+yWoON4ysIe0NsMxqsiSZ28VTAHPH+CnCueP8MeEa86wFvifeDwHhB5bxolW4B/CxemummsODzRZIDbu+cnPxgI60ObBvSrvXBCrgibPlXLPfJIGe2u4HcOl47OfB78XvEUydGOjnCLpwgFUbMxB8r/Kyxlh9UGMMmTDDJlwMWiHcloGZiKFOjEDR6gtQBoNF4y1tUpdMoqbHJcCvOBpwjcc4JBCtcwaIJMkcRJ4skoUWDrwMOkhzXE/cxGooJNRPDs9tYG63mugkBPzi8nmBLFyzgIXLmRN0SAM+aqFsC4DnTIlsChK2U1FcqG3PUmmUu/yrDL73K8u8O8R8x/BLCFjFFfBIyfZTxXgyomGq8ZwCeFe+8aaLLPYNA1NcnSo0TN0tBZxOpj7n+dFJQgtluvHUSL4s4cKq0hKXAM9TvJ+e2ECee58TLc2SDkfE98LtMMs3hm8nYskyWLQthigkl9DbeYoIULWg6ThGS+8Meq48S/1E2i8kHpwbJJt14X4kZGr9SHagIR0VjlargMb+al8HE9ySYkC+KG4ljTd5Kx9piBlMWzf6OVOZmWwOVm23F1qLIN5rSlzwF+Eq8zFCLZKiyRTMH4ZNs8Sqd4lW6ybFIaFCPL9s0KWhdjy9zDfCFtE7CT+J9AhZ+RYy9H1IqNKkVzwHUiZfp3yHe/kh3f2OIYlq7Rrz3A54Q7/uAj8RLkxw+LTTcOTVX75i9Ps8Wpz5aHIRN/Mg21IkZdE0qmxLwJ/n8Aug+weS6zHaPoFMz9QLhPhj0o7IjIDQvLLgC5Mpp+isz4GXT9FdmwOcivX896A0qS3xTZYmDjw7LdgM96OhQu84HOfxo/cUCsOBo/cUC8NkZkV8sIGzS0XILFnDtdDlXB9w+w3jvnCGRIvqnmTilhOumyyMBwB1GsMLGCYaRc8ClBPvRh8CLZ4T71KWW33jIjIAf9IETwDt9uly1AZwr3tsBz4r3ZcBG8X4O+HF6qMH46nmeYrUHbWQ96A0z1ODAjTP0cAT4/axI5SDs4xnyA2zLnuqyNxt26WbLnpQeu4Rw0ExjpWGAP4j3bcC4WcZ7JOBc8X4M+HJWyKKfIfoXkg/Cd8ZbNgDRDzCayqj0fvFS6WEmehmVfj8r1DQZdUDGOENsnGfEy4x8EY7eZ6Y4x9zURlU8g26cGVhhrssfIPxjiWqGVk2SwUS1A23wsXg/C3JfkSGtZKtNK5mBP7vW8mdn4Bc78YOytP5SO+w+S1xmO0ynjiNF9/RLtET0+0VyrylTQ6difTUEsEuxvhoCmF0WeTUEwgYVy3VtZWfF2lc9ucwV2K9Y7u4DppYageufXEbfvFLDIGjM623M+RBvENWEbka2IrdUlPClLRrNqY67IfiwxHkU8Jp4f4sl/8MlIdvcrXlhXVHPd6XheiP/XROl7CuAZ1Iss4mX+ZGcKjgRcVaaFMtX2nwciOgjJfFTAOeI915AVxO9fAjgsFJ5CABYJ6HrAm/xd0FS5YRYWagk79rsBZNOqTj30hCYPcr00hCwV5leGgL+I1KnlD2wTBZdxJFiY0KhihZqNMf0jDVVYmVNtVqDpRU1DTdRyi8IYttniiC3av6I2zR/xER5ZJmPsHGz9deis3fIzyK+MNtYh/DjHMkUcU65bBvLAw25roba2fqSBuCtEi2P+I85Ek5UdXnEQ8v1vV9WX14GfbmOvt6OvlxHX29HX66jr3eGEuYRX5otv1uyqvsS75hjgu+wmvvaglc4Be+bQXFvx7QDfP5fEP2FOaGWxYTWSNB6wDvizUPEA8ulAwDyy0NPE06kapPnYsKHJk65bwF445o3p4Ww+i4x3DIm+ZB4meQH4rXR7dbTVnnSKW7Qy39t+cVHWn5QNhpUjbgRsFm8NqHAhk4/aJkjzjHRQzaTwdMcRKoq16c5wOpyfZoDfD7SnteD3qCyxI0qS9yjIl32a2k5BnMrjBEJO6socY+K8JtoGKNCegwxLqK58SDayiw/mttPPke8rkZVmdUalNHYpCJkiYEgB1Xoa5GBgyv0tcjA7nMjr0VG2CiJPkrZ2Ac8mHD5Rxh+6RGWvyaNT1MQ12n511nh34aEC4+THkwccbz0YGLqeAknPqrhxFEnSDjx0hMknLhBw4laqLwM6eQ66fR20sl10untpJPrpNPbSSfXSScYIS5EvFuPD3W6yUHS7Y3El44ztUUYIqk1EkccLzfdAGdoMPF+Cb4/yE97I/GiE0ww4WsN/lqz47SET5H0vscakz+cOOBYScQQzcdLmQzxADwP+4RfKkMETQpxBx9r2i7VVBwnM2iQ7fL71XbwvgR45Xg5mNZcO01+A4LeEu47gM/FuyeEhp4QarKzwZl7fCio27FBcR5PXHNcUJzHE37VGaLuhKBsj7vFeTyRQdHaxG1W0VpX0VpX0VpX0dpMip5O3GcVPe0qetpV9LSr6OlAUd/jxUVK201s3k3NjyjPJf6IZN45Tol3jguqIKVNWb2a+HMm8TqpBCcfz5l8bJDwDdqMTLib/j7HyuvVglQqUkFFV/ja4PUVuOsSFLHHXF35AHvN1ZUPsDIy5FB21FwZMoizTDMuJ5SoaIlGcz8SAnKyxMoiThPR3GlBtJVZJTa13AzxPCdenhPPc+IFY8hBoKdLB7O5CfraxLni3Pv9IKvUBMRqNQHxuxMjV6YRdsyJYgLiccon3qThxCc0nPjdiZFvgUDHbVpw4icmOxUGJFouccKJJniCTSWX2CzBzTaRXOIbEvxGkJ415A1QfJMUmfBfMQiTuMFEKvMz6ZjpSQitlThrgyyWfxKOfoyJU+7bAaHXBUqLb9AMIvTPgf6gUTiFTR5pS5h0ipV0yhIsSc44UZz7qr6TQJ6k+zFgl5N0PwYcf1JkPwZ6yEl6Nw94kPBziSM0fISNF5hwZ9D5J8nIr2zHWINBDjVBxeQeelL4lirIEs0fsUzzR9w4L3LjCWFPn6S324G7J4RPnJWQcGKySsKJv67Su7ZVmfU1a7mabXq5Lv9d0esRT6uUvkR8oVLCiZpenpOe56QX9L2roe9aKT7hFuMtJ+QnzLh1a6IAHjqEX6slMeHtqhrhvmYT7qs+HUqWhy37G02C0yrxXsMuJTygwcQ/STDhWQ0mbpRgwoNi5kbiP0zeSv9hrdFIvKPSBN9hjdHoGCA4Crv4pIBf7/CDwyxms0BSq7nWVmSNIxs8pvgtZDdJS2P9H5IINbq3wfk+bA8qH26kKq5Q3fD6qp1Bn4K3S9w7gyIXfwH4Rrws8U2Vacp/K7nheyVWVMqukSYy6ZTtAThEvNOq/NSD7B4BclJVmsaChK40nbbw24TTAOwa1DFdpWO6Ssd0lRkyy6I4mV0v3s4ZM0tVk4ypyioBl88LFcHJ7xo3v2vc/K7JlN+5Tn7nOvmd+4vzm9m4dwIeE+8EaJxi8ltcCjhBvCxFUkrBwmxML9AOUz0kvR7//8/pJJunDJa927Xs3a5l7w4suwkBH8zTy/TAzfP0Mj3w39WRy/QI61MtIyRxbLUZYgiZROeLaC7x1mo9hgDep+H32XjBZuJbxPt9tbx2BPCkeNeqpNPttoDcWq2nOMDvxO8R31sQOaVB2O41km9iJv6QGp3JgP+skZGdWF4r4USNl5shnkc8SeLlEZdq+FKrL4+YEH0eMbdOwomVdRJOXKDhxB7zJZz4eL2EE/9eL+FEzVdehvLmOuUNjDwQYXNqTN0xq+eJ9wnA5prQymIGEi2fL48dkM6G+vDdTQh/VBP+7b6WloPNsq5qMkNEJTjQl1sbNO5aF+SzMYO2VcvGWW2rQtqWShYIy9NKwiTOrpWn5oAbjLd8DWCNhK7RPPDtJYBUnZzEA+4S7xeA5vmyTgScY7zl7wB2MeYo54TUbrwVhN9L6P2AlyX0Za0udpUGrFka5AdMgbeiBsU6d4EkDLh7QfjNDdYK1y/zTWaIKXWBSa5flkH86mUzrdGuDiQK68Q5VVk3X5wTVN0gzgn6cr44920BSOnKGln5Aj4UL+1wrylx2WbA7kZNmS18mS1mWYaGUc/490tjrx+osei/F/jdyXq1AdFrpMHUU5U2nvoMdnh82RBVaAhfoyGaG0SNIXw9oYfAtmFVsMbXSKWyQrX6fBVafe8t2F6XeHhZts3Hw8t8FYZw8vHwsnNtPh4O8sEyjJceOAlwlHjrAEvEmwUVvaTGaOrDxUvFp4j3VsB94i2GFctOlks+gOtPTqvV9FFhoG28pwF+FO9oRL3URC8fgCwXpTfe9PZhNZXdDvi3eCdDy+qT5ZVQgAdO3l77KPJs+yjyrUi/b0T6z7VtoigY+MA/wCRW8ijgcbEF4auG0H0tCo4U7uuAb8P9gI1seb2sj8F5oEFeHQXYyeS5dDCg5eTQkZjTJVjcyVI4vxE75WSt1El1NAJOTa8ZbU3Ll7Xb1rR82VjbqpcvY0x2FEM4rXp5pmHiblfR3a6iu11Fd7uK7A0c/VJmxo+hvhJL/xjqHvqVT2KBfG2TME5Fx2k093DXxsoiHmbYFYfZWLk2VtDv9rHs5DTg72KRN8lH8p2t+c7WFKL57i+f9CSMjYXaeH/L3SfInv3Bemz7X269MpIOZeeofYjnSUKEC1WUeJkEX7ZjDVlE+Z5pxflWQy7xcgm+3GoIFjXsA+dKBVDy0nBdrIJbraUh3qKlIeZGPz0O96AYg/CDaoJUvFOaUhEsfdDqSaazSxx2Y5RNoxF/krL9pBVscgTs1kl+8NApPaOM9aPWKVhdO4XP3CIfb+2ln+oklmX4eGuhfj2UOFY+2zl2O6J76tdqicPks6zDAg3tucQpEjzFash1NRyt37A92vKDZSBVFUgGpgJm7Pgjr9VaLOJ/Mnzk9UyJTlgj1cfPo74ooS9qJPexUxCnlPCwmP/RQDDoqFfqF1ch+GnADcbNLfrxU7POD75D3+YRD4l+YRNhP6v1iXubD5GWE4aqKPFgCSZENXQG3Vs+dLoroL98ybS/KkDo0MAbFDRXv27vvkp1B99ZvTrDd1aT+p1V4tnKJ16o4RfuOF6WEy/XiZflxAtaTSHo8yW7Ptvtijv4AGt5VvrHWh/SHD60HX5v/Z4m8TD5DGcucbOGE2P+dzaz5GOQDCceoeHEWRpOLI98l/M76PiffGNztrKddv5m50BTsRM74L9j+bMdfnBt5kPLP9bhBz8h52dpf+oiLTpIPWjcn4C7q5R7LnGK5HNPSO0j+XR0BkcY/HTsefIR0LWAH/SrqGoTeGcFKZW5cf4rjZSJ1ElCa9XWjkE+swWqdBKvdPkXyCdg+WXWH8VrEy+3iZe7cbZ1ljcGQr5BPm+6Lki89JesFo7NMOvuqgM7sVwG9vIdi2btqlMg7/Zb0aC19OSDtvCkxqJv7yPom2LpH0FfpJlatGN+FvHvkum/W9EgJ/yI+nuS0feU7WRqCS/chIMugrtWJtT7+YGx8EKD8T/QUhA3aymIqeh3i+H+p6Ug1siUR2jQsZ/4kgQT/qbBxFTnUOVT2RSdyYhLdJ5aEnzSe2UWcZaORMRU5/APAx0dHvEknctOCnK00uRIdectCbK00mTpLQ1/q1OgO1Nhc4knyfxjVbf3Jq6X4PVWW2/iFxJM2EsK0Js4rrO8BbdzUK7efrncd0XYYuU5xerrFCvPKVZfp1h5TrH6OsXKc3WLvpW9nbIMaAgm8JW9/2NzPcDPtblwY7M9wKmO4ISIab+h6wWwsjuHWtpJunTgp1o083wwD7hE4hCel9C/acVH1vPbGwNuy9Cx99KGulcG/iFwx0k/OJOXj8V7gy4L3bdKqTCCLrKC1/GRXlhwX13VOrW4b7DmLyNMkKUq2/+yWGh0W8MXlmjJiA9oyYjHRT9fDveslow4StoZob+KEiukQRF2oCGLuJt0y906BxpyieUSXG415Loa9tJeRJQ1S3ve8EDW9qLdwO8n1UvY1S6NhoertxJklS4hiNW6hCC+HSkCZdt0CUF8U0r75o5Fs9osPygLvzz/ejgnS0G+ERmrdvDB9i4d+Ah7WQbZcTLPEkq6hLcQAde+SBNklSonVqty4n8iyil7pn7anHiuaCecr6LEdySY8J4Gv6fanLw4yrwzrYY84m2y0LjN5iEYbc4CfY4U8ItAadBpqOg3EvmWQE8x4W0JtRmxP8cCuVUtQNymFiD2jHyFmrJ99VvmxCGyyiLsp6tOYlKCCe0aTOwZ/gA1lVXrepLYJAuxJhsr14/lTlFOHry+NuE84v6yFts/iGYNR9G9ZbU0BZAS71eAbyRdQlf5zPXO2X5my93oe4n2CYBJEoewQEJtAcvcOJq75EE2S8GGuhBhReFvq/tRsMcuUzu4x2FQMEg/u00crJ/dJk6IVFUx6BKVLdEPgZtH9MDPMsierJ/oJr4u5SC8paJvaTT3dSIgb9TKIa4X0dz1QQq20q4Ffb18mJvwhhj374HSwM6rbZrBS2G3gN6qRSFu06IQCyKf8Kbsz5IQYbh8qtv/8Ld7HgRyvH5smzhRP7ZNPD7yMVrKJvRj28THjaoKwpOa/pMazf1WHYJ+rV/V/rXVmuvyr9NvZl9nVeURv9ZwYrV+e5nYRz81TDw+8iFhR1+uo683cY5+YHiOjdfbjfcbiZf3m0BHe1/i2/KV6DxiF4nXt0ugwy6CzrRfMyc8ImZnyq+K921Ak3xP+m+AV+WD0a+qWr7G3fMNGDQwGu0hE738L4F5y12uFnHuc9a8czPwKzdr6vQ7pgv2Wn8LMlpM2CZ5psHrJc9NQZ7LmN8+4YxWgqzSjxUTq/VjxcRLIm1phX4i2fwuC3iZyhIf65oue49+jpmYb77lW04YpaLEoySYMF2DiaslmHC7BhMf6xoyI9OY11WWncSVIjpgZVc/P3Y56uSnLzFXvrSca/MzkDhJgifZ/Aycrpr541ubn4E2P4Et4yAL5OvL1HW0eOd0lVzCeyHgVvH+LogedLodfUR5pwwfUf6bFNFgd/Nl4HJCVPRlsF+V7y0TXpc8EzZJ6EeAf4U/yBz91HIv/dQysWCn9E8tN3STrDTsmJ/l8IOxZAHCHukWMuTfQXYXsbk9dwqiBP3jH5Zf2c/ygz5xA5R/Gf588uc2Ss1AGyW43bPN8uv3s/zgWeD3lt84zPIbM/CDSfIh1oZ8WrkKcK982/k7wE6SuT0Ae8vXgwkTJLS7qnfqg9q7hr+SyyAv/MHfIpDj9SvCxIn6FWHi3ZFaoWz7TlJrxLtE+107Fs0i3iqp3mpFg7pcCDolWSfcEf4o8BqQ92n+iA9o/oiPRT5VS9nL9ROyxLuUT3xs5/ANTsr+UzKY+0+rK+j7DPtEcrUV8K14x0PqOPmW66WagGPxpwPB8h9UpftlIgR9JGoIX0k5KThYvqmbCDSWubn4QVtIvS1R8pGgRLblbLVKqfAM0eSXfQcbYU+3i8RukY0uZ7weKkvspbK99JFNVHY/3VoSZ8nedVYG0SFwB8gGeKay3WcEOzgYW57h4Otk3Y2erHz3rV6crFUV8SxVdZaeaYVeCqAPrqjq/ODMq/SXPIN6NJb+DOouVXWX8t23+cM9paqI61QVcWMs/cxse+dr+3dKl/1aa+Br3WTzExSAQSpK3FuCCTvQkPW1puCsyPO5W9fHIsP1OY95wgCcGH1SYA+bDN4uqm5Xr5mfNVokBY2V1aBHUfykLx9V6dabOFq23ISJkR05NXyspwvEnfV0YedAdmUoj9+LbO73Vra3IxvonQ/+R3Iy6bOd3m2OzCRT5PYJ58/dRoAs0aMAYpkeBRDfjZiQsvV6TkG8SGxFuEZFr9FoCH43g4YdHTy81yVd9ntNjXiz7OBv1p01Re3WuvztLpk1tOojFuIN+ujlhkDFyiziCxr+QqDDOZK1OjxHR56jw3N05Dk6MpUkl7hUjgCW2pL0Jq6T4HVWW2/iWxL8li1g7wyK84gr5AnMCqu4723BkUiFcyTSN0PxejvFG+AUr7dTvAFO8UK5uFLC+l5pdQy8wcoG6c0H/Wt7LvJ78bLIz4TPUg4FOV6CLgVcI16qXCXeNwFvhuNsAvmBnqV8EDxeQ+sCnhB5LFcJuipLB/Us/ygEgzpwWjxdtlWOHAjvyUHK+9ki6SxozgJ3uOyozwKsEC/hXfEyzjfhLffVwYY8GI8PyfbVFA+3al6xar4JkrYvLAVZohtqYpluqIlzo+UBXaWyxGqVJT7bLV32B918/7Ad/um6zT5dt7KwCOFySTaX2Jwjl8QA62QnmEvcV7YPhAGiOJf4bLfwmzhtGh7xIin6RTaNPOKvc+Suv00jjyjKyl1lt8q+OtdJN2jNfs75ScBTKfiGUVsaR5F7ePLhJ8Aq8d4M+EC8u6gyE5GeAd3ki1RBgYJZ5SjdsaKCTwbcLF7Kz+0mL70AnC/eK4PoQTv/DjmKS5zdAQVe+DcMyPz5soX+DvC9bKwJR4b3zZ2gZk85CRgLmCHe3KCcmTQy2d1FzTjP11hM2FU2ZTd29bNblh69mMkNlnRGAsaK9yTAEvHuGugv3i0wof2aCcgNuqcjbtQ9HfGvu0R+mIuwT3RPR7xClr+Eq3UhTmQ0p3Uc1j1gT7pj50DrpAz8qQ5/qss/SFa9PwF2l6Xuip1lJwDvHUGaZW6ccrOxqjgBMEi2MYWASaJpznY13Wo0VRBuTVeqGS12MlqcgT/b4c/OwD/W4R+bgT/X4c/NwK90+JUZ+DUOP9jMDrP8BQ5/gRt/hmxMTwcsF+8/sTwqk03Nv3fir6zkSQ3iHmDMU7wQ0LZL+AI3op7VPRTUirinh7ev/aDqyp3DH5cAuUBSSAFOCe++1iOVDbtoWwVu3EXbKvCrnpG2irDPd5G2+vl2+Ct7yCBLvKaHjJXEezScmNNTvyff09dhFzLUcWYPfeIBfLynXqMHrhdZb30Qz55rMt4eeTJeEkVHe++VNr3eB/cM9PUmPiP6cp+x+npnKGueU9a+GfLZm8h0+F40m+UBTpZ7O1kOXppQ2EMct6PEI4yKsvMBlxhvySU9fIO2J32DQoLwgkgQPpNQlnKnnvL2gyDl9qSfstPp/MR46pK0Ga53MmlfmApb/j5PTmCIf80z5SRotEbHfI1uEof3kKM4wKM95XF9kBc7aUJRdV6oSXZChP3FnFT9Qs8Q9yiQ08NBy0DeIkH3A/4Y5nL33amXbtyBXXrpE2xgUa/IAQzo8SpLnKiyxEt7p8tW9ZLeYLC3GaIJ2SpKnC3BhAoNJp4iwYTTNZh4ae/wORP0vitpZBF/7KXvKenla1uZVWFV5BJ/o+G/6R3kOTdDnj1iF5NcRReb5zziHAmeY/OcRzxVgk+1CebZPFdkSCOXuLmX/LagV5BGb2KeiVWWZ9PoTVwqwUttGr39QiHYKVPvDDbKc2zU17FRnmOjvo6N8hx9fTPo6+3oG+Do6+3oG+Do6+3oC7o5S1jWO9QBb4aqu3rJgodnQr3l52uAUvEuCSxR/Kug9EGL3oA42yQ6M1IlXAqdHxZcwCcacPPQaFvgirF62QSXQtghOfZcKypXpXKUPw5u7xyR7wzXC+5qyH4JdyHcJXHRd07c6rsWk1IZ5pk7d43FnoQrhrsZrqgPZrhdw3LfwVUpn3IVcC+r3PnAp+HmwZ0GdwxcMXFn0d8dbhwc1zBddrZ6T4T/Vxigy3fDggruUzYWxDsbYb/f5f9Nrnrn7cu1qJ7/S/5mlb8Q7nK46XBLOMnADePiCHHehLtYZ3Hq/Y1TLsbdK09sSt1ueC+ET9tNwo+EGw+3D9xYuDjcXnAvIt4nrv0Rp7GH2Jq2Zx53hRvSU/PsyH0Hd2RE7m+9RW4M3PNw/0CjzO8t8d+AP9FD9HeHK4H7CTq69LB6KVfey+qbC/+iXpZ/JPjje6bzX9J49wAfhDsH7lK4U+DO7ClzRGVPq6exP2wJtwLut3DL4c7vb/l/g/9NuPfh/ueEL98duuEugrtzdxt+916x2GNwj8Ot28uGP7WPfF/4If2o5Tv7xWJPDMX2BXjtflbuPci9D/cPlXsM+B7cH4aK/PlwK+F20U95bkLcHOAc1UN90+EO1O8Z7we3P9zu+iXnD/mJ5CE2Pco8NUTSOv4A+QYn8/hXfh90fys3aF/RzTDKMK3H9wvz3983nf+1xgte/Au9g/ZPT8//mzY+FquH++1ElI0O/twJlr9tgvDumRyL/R2uDBubSyaH+T9MsPzrlX8p8Fq4+XBnwU2YKHoOghsBtx/cAXA/I273iVbfPL7PCe5OuN/NtuFP8/epcO/D/aPahp+F9f8zcO/Uon3WxWK1wGW12+cvjvD/hbBF85HfBixv4JJw58ItQdgp863cvyH3VV263BDIHAw3EG4w3Pf8RLsT728t6JdwXZJow86PaHL0Xt0Y/bnNCLiRzvONsZ1RFr1h2A7XANfc2fJ532mFHnPdCHcZ3BVdwvzfZOBfqPE6KncX/A/DrdXTwWj4GxpO/t+2E+/ZXxDOsEdVV/es/zu8H/wD4FbA3QE3GO4chz8dhj4f7nK4K5159mnMrc/AvQS3zbk2yTOZnnB94Bq72vBh3WKx4XAz4WbDjYab3s3yZ2E/OKe7PM6cDLcrXBHcvxD2OVwT3J/huF+v6f7L4/1B4zH+7Rnin4359hx9MMf5O3jwhrnqa7hv4b535q0pmJ+mwh0Nt8iZJ6dhPpgONwhzwlDMTyfCvyv8xcDj86zcSMw5k+Gmws105q/HMSb/BW5vLLYOgNsC/5dwL8C95IzXK/bEOgbj9PJBaG9wA+GGwPWH22OQlXtpoITNGySy/t/78H8I9w+4r5zwb+H/L9y7e2OZNzgWex34FtwQuP3gfgCv796/XL773mH5UsjMgZsP1wB3LFz1YMv/AON8XMf8Kc54zy/LXwPHb57zi+z+J835IfLafTsux2+t+99Az3LC+enyQ+BGwB3hhPOj5ffC3Qe31gnfAv82fiEec0W3/f7vcIb9d18J6/ULwmsOjMVOhkvB3XSgM7AdFIvtdpD90q7/x2/SToQ7Bq7iYBvOD7m2wJ2vX3H1//gF0yHD5Auk44c59YRB1f/25GmHOPUN/3/hfoDjxyX9v/tG2c+KbRzlrBsLsWbSL1/xq1fzCuUrWr+Uz29qtSp/3mgbfrF+ieteuIcd+afhz1ddlzvyT8C/Du4juNwxNpzfVep/qHy2h182CR4OwL/+MPlOEb9cspd+F8Xl//dQ4fPrJr/Vr8BcDLeSX3GBuwDuc0xK/4Hj91g+AZ4CPB2uHq5Nvzk0D27aYZLeeLiJcPw4UQHcELj94H5CWj0Pc9qLph8N74k0+sGNhJsMdyDcMLiBcPuOs3LkMT+vMY9HhMNL4DbAvQH3V7hX4H4H9wzcErgz4I6Fa3H09fXLe0TYTgwvzxB+qn7Q5Wy4D4604UVTYrFJcEfDrZrijGP60vO/wX3qhB90FPrrUfIWcL4ynO8I56vQg/lfX2ruvync/5t0DNbUcCfBNcLNgZt7jOWPmYk6mIXxWd8a7IY/O1NeT8zwP8M9rXJ3w/WfJfFeh4znxJuh8Si3SOUGZpBrVbnt8a9S/k8aTv6mmZbPOEP09cmfOflbpPnz//iq35/hHtCX7/p/KfiXwl1aKrzg3YDY6bfB+S+0PRPuPOcmCd/1ev4c7G/K5a2rH8O/ZU6YvxBumvIpN8mRa54j8Q+Hmws3mu+FJQ9x9pwj7y99F2453K+c9ezF8F+ha9z74a6Du9nh3wb/b2f/3/r/qPqp40En/noN322OyAXjLPwTNd/tTjhf2LpR3zybKHf6VQXaQIW89HGDvsXvTri1+r5Gvuuv5nh5tSHf93hShfx2rAx4bIXV49O+ntWqZ8AJoocveux9grwOki9+fAHuJX2vI/WPg5vipPOqpvOUvjb0cbg/wa2G+yPcpXDXwrXCnVIh+apx8sN3Ql4P9+MJPFmVPP3vBHktIl+meZ++c5OvfPzdcb883m7HSzzGz84Qny/be3yufbld8JsLfRuY/7KhAn0DUbD/PUle7OXzf6cvAePLwO6EO09fhLQM8c4Bngo8HW6avrVtMtxRCXkzGtO58iR5U1pw+1bj/V/6/T++s+tdfW/XFwlnfIe/u6OHb2SaDX+PSnmXmf/3TUTuW5X7D3ArXJXKHwd3AtwQuFFwe8Dt5ehpVrnpVRLf//svwn529PNlW3tk4N+h/JuAq+FWwl2tr4G7AG4njcf4nhP/Gfj/Cvcp3M9O+P7Ym+bDTYArhjsc7khnv9oC/4VwfDXTR0443ylxmb5O4r0F/3f4Jwj/vEbegsFXdpTpntR/fw5fIvQd9qFdgPHa7cebF4m3db7EewbuQ7havj8J7hi4MrjecLvB3aTvWOJ7lxbCTYU7Bm4U3JFwe8PtWyf56FuXno+p8B+jL+XpAcc37pQ7fL4v6Or5Np/Xwn+Ps68mzw/7gxO+AX6+ZMgvl//3P4T9NF900Y5JfeUJX4PCN3d4+jaiGFx2/fbjPXeyxFsOfBKuJxxf9nEVdZwsei/ha1UaRO/n0PWVvsiI7/Sp0XRmwpXXS7qTdpBu50i4/w4V6p7klO9h+P13s3zghO+JPA2COxBuOBxfsTL05F/O52tVjoc7Ucvp/22E/3W4f8BthXsX7n24N+De/n+Q40H51XrxkK8c8X9h6P8l9EpllF+t8dwXWlfrEczZTnhc31DA39/1dc5R+AP8z/TH9Edkhc9F1mr4nk44f7F1Nhx/4n2fnp2c55xf3NkJ+YO7B+7ZTjY8V++e7h4p1776Q8xl+toSltHpBrGdoKMn8jhQfzDo//XpJD8t9MNHqBx/Y3iAky5/xzRFf5nEX0sF61XQE/THVAz/EsgfV70N9wHclXDPw10Kd7n+gGqKY4eZ8JfA8VdP9b8gfF08FuOPQvxfY3yTI7dS+EONr+D4i5C349uX5485+KOW9XD8QcpjcE9q/Ady5NcgjL8+Lr8OCc534d8Ex1+UjHLOf/4DeivcwTkS3h9uL7hucHm8LQPn5chPS7529DG9e3JsvoJ2gbCznPA7VI53i65y0n2wO9YncGvh1jnnOLx4UK6Xs0/Y+f8O7wl/X7i94PZ1wv0wX35fje//Hb4dfUvgP1VvXZ/phG9EHfJmmn93LXgVKvJ+KVz3XZBFfW7i7fLL+TxXKsuTh9oX5P3f4XU9MUfppQE+u/6DPl32/077P/hV+vjQf0q6CG6JPvBMwRXrEz9X/pJfIH+D6nUfMQ6EGww3wdEXG5Za2tRWNQ/Y1ipY7/samttqW5OxYc0tbbXDxk+YdnBb1fzYsPnN7cPqq1L1sWE1S5sRWbCtVTiLaltTDS3NISIBXmttI+XEk2xso/YG/N9WuwT/14EAq6Wmqq0qNqy2PlHXWtVUC64EtM1LpWLDqttaWgE1AidXQyvZRmNri8lGVVNDNZJuaTP/STpGRaq2LdHYgtyLppamptpm8mrntc9PVLVWNc+vTflksn0eFFm6obmuJRCdN6+1dpFPNTY01/p+zbEQxhwqg5WVejWZX/y3e/B7glhs5JlZ3shOMla7vzUw71jWc3vKTYUc3w400JHzh7vhXN/+/DN/WR2rh1w93/3TzfKz1PH4o7vq63thltcXk8TyPeSVWp1UJk9ffdVF5a6+M8u7en/kea/0/PEY4GdN98Hnsjx+cGxNF5tuZ3W8kvWTytW8mOXVTJd789nqfHnOoV01zqSXsrxJM2SedsvBITDpyF0OuctnyJ3bLC2fL7dU88phZOQG2Bn7+N0y2K/NkZsOuekl8vw7FrHfMkdu1ZtZ3ioUrL7STpL+8PFrR84bm+N5j3SODciQ7gVOOyiCXBHkvnnCOaNQvMyRG/NtjjdmcZdYVgZ9N6hcFxPgebHlXULPeHy5W9U+lBsJuZGQ+6F7utxdvr6YlfMy6LvPkTsccodvR+5hR24S5CYtz1yOJxy5SshVMn956XZ5Xm1Mubk9PG8uFklvdpI25baXjW45eqEcl3VJqw+6Nx25YsgVQ+7dTulyHzhyRX08r+iKLmasjubvX47cw/t73sN3dolNzVDe//j1QeIA1NtdXWK5u6Tr+8rpe/5DrZNy0vvljxG5k7BwXN4lXS63U1ju7w92ib04IF1uQETurg1dYkfc1zlNbmhE7uNfxWP3FKbrK4zIXfFI3HwoJio3ISL3IBZKVx+Rbr9ZEbnps3Ji2Yen6zs+IldyQU6sbM9OaXK1Eblb70TtZLBLD7/OfLm/eLFUp3Q5v+8GZysvebG1GGSHcp3R2Y67XSP6inp0NZ9TjOrL9Md5JGbii9TUgJaU6wNaUuD4L7RYkeO80NJ7OJ4LLYswjttCS4Pj+Cy09PTLA1oeYnK8FVoeWk4PaBloOH4KLTfUOE4KLQ8ViwJaFocc94T2O4antAwMIwO6R4SWRdnhAS0z7aSA7q0/i/PpPnL5sYdPy0NHjhtCywxSHNBye4zjgND9ZKzb36f1UskBPr17qN7CIxHpPSL0nhF6rwg9MEIPitB7R+jBEXqfCD3EtKCntX46o356hMasrT8PcOzbCfY9wLFvJ9h3jGPfTrAvr2/kovxZht7dXIbLA91J6Xl8Duikx1dqFb+1/fTPNvcYbPornfbRCe3jpkj63L9vGpMT6Hsqoo9vJF2O9MqUz7XJJtC7ZQn9TzM4Znm/Vv4XfK4M+iClabC1oGu7CM0XPuZ/mOXJS7VyY3sA88bneHkmPzvH9uM6DnSu0mNAH+TQfAPk+s1Z3u9U/3GgK9G+5M1j/WJ1ncL5/3WEXkF9jr1vAD1pV5/uF7ub+rdleaNV/yOgixz+06AvPTHH66/5eR303aD3Upo/Ehzq6Of7HotOyvEGKb8LhpyRoHOU5jnB8v9mefd0lvT2B/5YmePtpvzDQOf/kOWdqPmZCXqvqhzVv3PseJ5HOOmdTH0jMO92Fvr0zrxvZPmXgC4CXan0tXzTEfLTR/XdDXoV+JtyhM8zmeUoX0/lPwf6BdC7KM1XGL3t0J+D/sSR/4n565bt/Tcu+d+TQyzSG6j8fNDFPbK97lq+aaCfSNjynwD65kpr7ybQi06y+pdR32jPW95J8sv3+6wdact/Nc+HnPLxrotZNxm6T+wRvosI/K7K50/kNu2e7c3V9r2xC78Kk2M6DPn/AD3wJNsevwU9uMrmtyviDRyc7e2l7ZuvzbkC5emn/JF8b80+2d7FWt4ZoNeDXqV0LX+ElrD1uxCeI0HH/fKCHgU6W+kLQR/q0NeQRn72VPp3oI+tsuk/wVcM7Z/ttWh/5BlTb8Tfw68/5v/gbO8A5f8E+oSEtXceEhqI+uir9N6gx4Du5ZcPdPGIbG/nbIk/BXhvwraPY0Ff4OSXr8xZ6ug/jT+Zc/gXw7N2dLY3SfvHvWRU2vazFnT+oTa//I3dPPAHKP/foC8HvbPSnLIfd/g9Qb8Jelel9wH9b9DdlS6M8/mErY8JoHtXWf7sOD+dkuP1VroO9MIqa58loM+rsvbhT6ledNrv9aD/Drqb0veC/thpr2t5jlaR7Z3qlw/0w1XWPp+Avr7Klud/oJ9w6nsn9OMfT7Ltk+dqkxO2vMN5bpew7Xkiz+8Str/NAX2MMx7NB32GY6+loPOd8WU56Eed8l0KuhLj53M6ft4GeqQj/0hOeHzmb/4GNmZ7NVrfr4AumpfjLVF9m0mnsr3pOp5sAb1iabb3V21vXHJVLsv2btD+uxM77tnZ3jmqb4AXTm9f0GtvyPYu0/7Kn+MNrM3x9tX0jgC9CXTME/po6ge9XPkVEX28K17ZjP2qP15Rn0Mvpj7QRyj9K/4a0aEvjOi73OMdME/bVz/za8PDHXoN76879J9A572c7e2r9vkr6C2vZnu3qT3eBF20OMdr0/Q+Yvkdegv5S6y9fyDfofmKmYGtKH+W0L1AF72f7RV10/EddN/Ftr3vB3rVIht/JOWX5njTlR7fNVzeaRG6JELXg/71tmzPP8lfBPoGhz4b9AsOfSnobl9Z+nrQWxz+HaD/7vDXgJ7s0I+ArnLoZ0Gf5NB8jc0rDv0B6GaH/hT0zQ79Dej/OHSXbuHy7RSh+4Be8XO2t5u2330i/GER+lDQy8fY/jUZdFFO3Ltc55eSbvwNQ9zUN+kTQJ/ryFeDPtuhmyjvxb2/av84oxvPz+Jeocb/NfV3j3sTlObvXreAf4zSK5h/8P31y03kd7fp3wM6mRv3GpW+D3TjtXY8+hPTB/9n5fOHoSN1fxvH6ndzN7m3y3Ud6a2U3ynubdX8/gT6uU7yzIf8PAzcm3aJe1NU396gX3X4I0Dn58W915Q/hfKdbHrF3eXFDedoeieCbuxi+XWg83rEvV20vtpAD+wV9xarvmWcOHaLe/crfTHoVeC/qPm9E3SyT9y7UGk+o1gb89czfWIbQa/pGzfXecj/jPKgC5TuxIL0s/zdQOeBX6n0waDXIv2ZSk8CnUT++cNh5n8W6GLE39NfX5MPeojSC0CvAj1Q6dOpD/Qkv76ZXv+4t59f37my35P5sH/sHtDvX2fnq2dAr3f4r4I++nq7H/gCdOVecW+8v5/AFngN6NlK9wH9sRN/MOg/Xm/bz+GgT+tu6+eoneQ3o0F97hTuP8eTj/F0qI6n83aivTxvYA+hTwY98Fa7HlgMetNQT9cj/cz93037xoP90AWgk/vFvcOUvi6S3u9Bn+3kZx3LB/kfVP5d0kPjwX7qW5Oere88LGkG7h/3zlb6QNBrQF/tr6dB5x8U94YpXQl6LejlSp+yc2R/tDPPVjytnz7mtzfJYXFvpMr/ifoPiXt7KL0xEn+z0vmmPHmxH6nvVrte4/OnSocewoXh8Lj3reobQ3pE3GtXevYuYf21oFcU2PycBXo96AGdbPveMtK27xvALxoV9/byxxf+zsgZ356hPtB5Sr/B/EH+NJX/FPQm0Ed0sv1p4Oi4V638nxgf9O1+fUDRljFxb6PS/F3S+rHW3mNBn+vU9wTQF3aX8zLSvPe9yuGXgy6Cvns0fiPoWx3+UtC/7W6u8hr6TNDFh8a9xzS/V4DOOzzuLVX6DtArxsW9V5T+I+hXHX1rQb/ZXc5VST/P3zg5/FdBVx4Z967U/GzOM29B9Lop/SPTA32wP/6gYEWg71U6H/QWhz+lB/f7cS/bb5+g80EfovSpoCsd+krQK0CvV3oN+RNs/3ihR7i9vEV58I/z65Ppg95d6f+BzpsY91538zfR5q87FrIDJ8W9cUoP6BnWfxB/UzXJlp+/zUpOsvFLQa+aZPtLTU/eT417v9L5oRX02km2/L/mM1PQ/v7xBvKPjpv1YdC+J9v2bZ6xTo17Tyj9CugV0+LeWr+8oIsRv59TvuTRNn888uPzjZFav91ArwK/r/L36RUu7yjSx9j6mMbftjn0iaArQe+t+U+C3jId6Xey6a+YbtM/H/y10239sXx5M235boykfzfp27Be1fXnOtDL78R40kXoN5n/u3O8izsLzR+EFv0+xzte6TgWyqvuyzEvQCa9B+i1D+Z4U1Xf4Xxm/IiVnwV6+WM5Xr7K11H+yRxPXiWF8Z/61uZ4o1X+8t58PbE/f2D8JI3ylGt5/sD4oBf56xnGd8ajf3IhPxvtRe2VhY3gwDlxr8EfT0AXzbL2zgedBH22Y99YibUvf1uaX2LtWwK6EvQY/7wB9CrQ7/vzOejlpXGvQulLQW8qtfPXvcxPmaVfoD7QVyj9zz7h+vqG8f+c4xXHdT/K37v+FfuhHN1vg16B8t2s8UeTX27709H8bWW57X8nUr7c5rcFdLIi7o1V+pxdw+lfRX3H2vUPf3t7q2PvP4EeeHzcm6r8t6kP9NFKb4vo429Gf+vE78+N8Vxrr1Ggkyfa/j4d9ArQntZPDei8Glu+08mvjHtf6niwcjeer8S9pPJ/C7qoLu6tVvo5ylfb9d2boDdV2/XWx7vxrpTnLd9J2t9/QW+ps+P1bujYW+bb9fdhfSP7L9DTPsnxeuj8zP6Yv8D2xwrw14Lu5ds/En8p6GSTna8u7CtrgSxdD9wB+ref2PO0ByPx/0L5xXFvsMZ/H3Ql6LOU/o75B+2fRw/AwFa8JB6c144GnRWsB/vFSvqZd9h4jyk/CXrLKXGv1l9/g15/atxbp/QdoFedZvczj1Ie9MFaf6+CHniGrZ8toFecYfP7Nei1oK9S+R48SNnfnh8PBf30J/b89yjQlcvj3tu6P68CXfTruPeQxm8H/cnyeLBfPBV01q8sfSZ/s+vQvwH9hENfBPqQsyx9GejVDn1N/7D974zQa5i/8+PefC3f06DXn2/b96ugt5xv59PPQeddEDfnV2Y/AkY+6BVK9wW99gK7fj8Q9MAL7fr1UNDrL7Trq2NAr7nQzkcngC66yPafRtDFoM9Qmr9NXg/6GqVXgk5eHPcuUPpWZvQSO5/+EfSKFVb/s9S/Mu49oPRblL807t3pjwfMz6V2vOmKhXKfT+152W78vd2ltnwHgS6+LO7dqPR48kGPUnoO6PzL7fpkwYCw/U8Dfbcz3pwNeo1DXwL6QYe+CvTDDr0a9MhP7X5lDejkKmu/P4NedWXc5J/0G6SvinsT/fUD6LyrbX10QsUvB32O0r1A510TN/sFs58GnX+NnX9Gkn9t3NvVH89BF11r208lPGscfjvo9dfa9cqFoLc49M3UDzrX6a+V19r++gD4K66Le8/48xPoyuvj3gh/PAG96nqb3heg115vy9cZG9/kDXFviva/fqDX3mjn24NB56+y7ecI0Hmr7Xg4Y89w/R1Hfaut/ELQ60HfqvRvQC+/2ba/20CvAj3IX99RHvTeSr9E/bfY/cwnoItvseNPHIwVt8a9ZUrvATp5u50fDgC9CnSp399A59+F8UbpWaC33GXtVUf+7+LeZKVb+XtR0ON0vjoD9AFb7X77QtCFW+3zh9tAr70n7q3R+M8wP/fGve+Ufp307+PePKX/A3rT7+18zY1i0Zq4V6f1sS/oztvs+fNI0MWPWXtNHMj1mu2fx4Je+5id7+aDHvgk1tt6Xnw26Mu22ucfl4LOXwf7aXq3gl7zpT3Pvh/0n7+05xcvkP903IurPd4FfdOXdv78lHzo38l//oeMrn0m7uWofB/Qf3f0Dwa96a9x7z3/PJq/y30x7l2k+T8KdNs2e746B3TtNvt8pRr0+pft/vhU0JXrbXkuAr3FSe86/hZ3mz1vuZP5+1vcO1fjPwG6eGPc6+qfx1Pfa3a99gnovNftfrczGuoW0C8rvTvotW/EvUmafiH5b9v6mgm66J24d53WRxXoTZts+10MuvIDu17+NfmgT/f3R6Bnb7X2+B31f4T60PPvP1M/5t8lOv9uAL3qM8zP+jxlE+h9nPn538wv9NX459+MD3sVK90NHW3Fl9befUEX/SfuHaD22Rd0cival+ofQ/nv4t5nOr/P5O+Wt9r2Oxd0cVaOt7OW51TQpzv880AP2GqfX10FeqhT/7eBPmybfV70APU59IuDw+PRq6Av2WafN30R4X8NeuDOOcH6Pr4P7AHaP5/dFfTyXXK8S5Teb59w/NGg+3xl058M+oCvbH5Pisi3gK7cLcc7RfWdBzpvrxxvsNrvVtCbwPfHt0fJ75sTzE8vMX5fm58vQK/ZO8frrvbMHYL2AL6/Hx0KemD/nGA8PRx0Mejr/PNO0EV72/IuYvz+Nr2LQK/dM8ebofTvhoTL8wfQA761/f1l0D2+tc8L/8X0h+Z4n2h+vgT9uDNf/4/6HZo/SvC+tc+n+4He39HP35j7901inXvEpu7L92vI84XOnXNjCdAr1mV7N3QVuikivzxCr9zX3t/p1Lmv+c26f9+nU+ddY2tAF72aLeM59D1K2r9P0rlX7FnQU/V+UqfOO8deBZ2/Ldv0F8q/sy+/cYn5Olvoj0EPbIF8Z5Hnb9gHLswxnzslzZd/u/nrAfp9p3xDI/zDQOe/lO29pfxJoIuQfi+l+X6YyrezPb7KlnQ56PXvZXsndxJ6fkTfqaCXf5LtNar9LqC+K+Lm+WBPjj/78Twt2ztQ6fup/7y4KS/pl0DnYT7tqfSH1PdRlndFrtD/Ar2qPts7qLPQ2xj/VFmPkO4+VH8bE5PP/u0FesU1st4l/1DQ+atlP056+lD7Gx7KJyi/j6x3yG8HvWqpPI8hvQL0+kNkPCZ9M+jkCXHvTKWfUH17qL6Xhtp7l6Tfo/5tWca+lP+O7+VB+x1k7gDuHuu8P8qP9cjOyu8Neu3P2M9lCc334VSegvoeSPmdYweS39/m91DGL8n2+E4T0jNAr6+Pewm1Vz3o4hnZ3kPKX76/vT9H+jfk327tfw3plrh3uMa/h/rvBK38deTnZwf2eG1/e/+uZ2yn2Dv72/tqeejvn1L+wLj3rsp3OkDsM07t01Ppw5U+EPSaF2W9R/nxoNefmG3O60z5Dgjb+yTQq/bN8X5U/vwD+DxZzqdJn6LyLSp/Aei1L8jzG/KvVf6xyr8H9Iofsrwntfx/Vv5+yn8VdHJItnl+Rv6Xyr9D+dkH8ttdcl7eI9YntseBfF5vy3MQ6KLdc8x330gXgV57QNzcdzH5Z0dZKet30ktBr0B/+bPS54PedFC2We+TXqXvqzhF019zID8ZI88XyX9E+bXKfx70+kZZD5v6o3x/m78PVP4Ild9G/tdZ5sOM5Pc8CPa+I+5dq/IH6HsxJncR+VGgt9wi+13T3w6y9/NNfYFecUK2N075KdDFDn2eyo9U+etA54617WkV6LUYT2aq/e4FPdCx9zMH8fmJTf911beP6vuE9CNxb6rG/1H5Byo/DxuzVd9lm/sY5O8N+ht9Hp3H/Q03bl9ne1drfxp1cLj9HgV6C8bfoRr/WNBZY2W+Yn+vUvlLO4l8CnQ/vc9I/qWg1/xW1veMf5PKX6XyD4DO+yrLm6X18RLo4rnZ3qMq/xHoTeiv+yv9v4PZ3mz/zRmG8vWPB+2nN+hKrF/Kld5rmH3nE9PLB13s6CtS/iLlFw/j/bocb76OV5WUz8r2LtX8taj8WJU/k/S+cXPfg/zLI/w7QC9fJOf95D82LDxevAR6zX1x7+O48Dcrf7Lyv1X6ZqW7Y2NajP5VpfpG6ntWDlP+VNBrMD779qgDveqtbO9JpU8FXeTk51yNP0zrY/Uhct9Y6nfn2G9BD9xHnt9R/iHq2y/HO1XpvzI/gzHeqn1eV30TNT8fK/19Z6G/J90k50tmvstH+y/MCezXG3ReXo53pF9/oFc0Z3vnqv6DQOdjPOmu/CNAV+bHvUuVLge9fHi296zSDaCLr8v2DvDHT9BrPHk+SvrXoIva4t6bSl8JOjkmx5y/k74d9PqTs73Jmv5jjD8sbu7vkX41Pzx+b6G+x+V8h/xuw2GvW+T+AemDh4v8rio/Ren71P7loJevkv0Y5RtJj5DzWNJng86/IR6ML1dp/CtU331MzxkPn2R8Zz5+BfQW1GcvLc+71PddljdZ+d+ovsN1/DMHA/5vYYH9R4Tb94FKP6L8I0aEx++ZSn+s/MoR9vdcpFtBFx8i5xOmfMq/TuWvBL2lMtvsp8j/LeiB79j+/ieVP1/1va/0yUpvBb1pQ9ysD818XcD3Gca9fZTOA73qYTnvIb1/gcTfW+MfBrroYKw/lF8COu9QO1+dTPo62b+SPgP0pv7xYPy5CPQajA/++Hkj6BVX2fZ7H+h87P/v9tcjoAfuifFE62ej5med2uMfBfZ+/UDsX7eALr42O2ivPzL+1izzfIJ0Liae5UPkPgrpIaBXnJPt5fbU9gi66JK4+T0d6cNH8vwjiz+NN/Tskbz/Js9LzfhH+c/kPN70H/1R1bdqrztBr3oi7i1U/h+Vf5TyNypdr+PBR6DX1lt7xEbBHhOyzfM30ruCXjs/23tb+YNG8XeqOUH+Dga95ap4sB6doO+RmqnplYOuvMbaP0n6pmxzv8jkH/RArEeH6nh3Mfl75ATt4bZRfAdatned2udx1V/pl0fp2Ur/k/Jb7fj7Legk9g+nKO0V2t/r8MxoT9DJ8+Q81qx/QW+qyjH3a5if6Xxn1bAc77/a/ueAXu+sLxaALuov5++kFzM+0vfXs+cW2t/mM3/Xg57kjO+/A71mtbX/46AH7iH3vUg/Rc/12d7j/vxcGJ6fPqX8LXZ/9APo5Qvk/JN0v9HI32/lvM+sr0APrMv2DlV6NOg1L9v+XDaa92eyvf9qeo2gV6A+DlT61NHh+fMipW/S/nEX5Udne/upvj+Arpwb97pp/FdAL/8x7hUr/13yX4kH6+3PqO9g27952Sx5rh0/+o7h87ps73mlh4Fe5dT3eNDF32d7hdlCHwU67xU5/zfrYdJzbf2dNob3Zez6eIW+Z+z3Wr7bKP9W3Fur+X8UdKVTvr+M4fNwef5A+g3m56C4uR9q1vOg84+z813WWH2XlervBzof+z+/PkaBXlMR9+YqPUnl52t/nQN6YE08GF9OBl05JidYT5wCennPHO9Yf/wDncR+dDelrx5rf09Jfb8DvWK+HS//AnrLjfL8hPSGsdyP2fXma2Pt7//MeAh6/TdZXqXaJ86COOvn/Q4Nr0eOOjS83jtO6RptP4sPtb9X4vr8N4eGx6+rQCd/lvtpZnwAPbAd6zd/fUTay/a+1fw8x/h9crzblP930MU75XivKP0x6LUYzx5S+a8PDV7VZ9LL0fe0NWfp/HtYOP8HK12kdNFhdn7Iw/wwA/TaK+X5DPXPA73iqWxvnaaXBL3q6mzve3/+Al3ZK8fcjya9EvTAHtnBemKVprdQ7XXfYeH98ROgl++TE4zHLzO9hXHz2j9z/kH6prg5fzPnB9SP/XoPpXtiYb/8K7mPacb7w8PrjYLDw/uTaXzH3pfZ5nzTjI/Kf1z5S0EXJ2x/XXE478/57alf7Hqmh/Whvx+4h/Kv2PFwLeg87McvVPoF0otsf3qPdFG2t4fuv/4Lev1zdj3jjQuPV3ynXmx0jleq9j0AdNHtdn1WBHp5frY5Tzf7LdDrMV5drfI1jH+K3Jcz4yHpbbb8F44L/1b2OqUTWl/3jOMex86XTzE95/zlZebnJYwHmt57oDctsOPDN6pvhJZnJwz0lePseDQY9IoBdv26P+irnf44EXTxz1ne//z5jO/4w/x4iz8+gl4/Qu7LmvHkiPB4eCHoIkffHeR/JvdbzPkG9aXkvoQZD5m/r+Nei9bPZ0fw93Y5wXj7P9Lu+Ya+V3CZpjcMdN5KO7+OB128yNpvNmnsN/z1ZELjr1V7tx7J+4s53j66nll2JO//y/Mqs9+g/Aly39asB0Evfzke2PMp0EXfxc35M+m/gU7Wy/1b0v8+Mny+0Kko3B+5sVr7G7lPQvn9QFeuyvb43JX0IaDzbot7C5Q/rUjfsaX6jifdYufLBaDvfj1L+0ssdgb1OfPNtRr/G398LwqvF/4KOunsT95U/hB/PVEUbr8/FfH3UznB+igXA++qk9D/tH0OIX2std940JWO/CzQy2+z4w3ft52fb8ejU8bz+U9WcL5yPui8YfZ89TbQ6539wUPjJW+XaP0+o/Tdmv83mH52jvdFjrY35c9X+R/H2999k+47Afm7xZ5XHsYH2/l2vToddNH3tn8fD7pyc9y7QMvfBHoN5pc7lV6q7w9fpfk5H/T6t+V5Pfm3gk7+154HPQh60wvOeegE3ne2499roPP6YPzU84l/Mb8Yf2r89cRErpfj3uNKD9T3iV+k6Q+fKO3Rn78nUn6bPX8qAT0wme29pP0zMTG8n2gDneXEPwf0iiVxr7OWd7XKf6ryD1D/Ojue87flq7Af9/f/f5tof4/dM9Yt9ibo9b2yzX1fs14CnRwk93vNfgr0WqyPPaW7TuJ717K9OUr3AT0Q84ffnvYFvaU129wvI10Aen0nuf9AeiLl90Z71fRmgF6D+Ecp/zjS2J/6dMMk+x4Nlu800Hmwn9/f+H73Tc22/13B9LOzvYPVnreCXrFI7oOZ+Q30KvSPaf7+WfX/XfVvAL38qnjQ3v41KXgVkuF/x/Sd/tYHHXvNinhQ3iGgV1wuz4tN+SeH5+ujle6m68mTQOedaM/72kCv/zbunaz0maBXHSz3t0hfNzm8fr2P8gmb/rOglx9k2/v7k/k81+5nvyL/uyzva/98ZgriD84J1nODQK84yebnMNCVWD8/ovRRoPOgzx+/jgU9cJvV3wS6r3P+eTHfSXtNtneHn399D+29/vgIeu3gnMDef2R6k7O9P/rn9aB7O+3/OdCbesrv0cz8THmsz5pV/ivQ+bvI80vSP2t6X+h5Tk80LM/Rtw/oYqe/8124W2ZnextU32R9L25K81sBOrnIto9W0Guwvv+LP34exfeTxoPzu5tBb2qS/TT3mw+qvkLV9wzTX5tt3vtjztOOCp8f/QP08hq7Huw8le8/t+u3naeG11f5oIsa7fnOaL6Hp5PcnzHlobxz3p8Avf7xeLDeOo30i3Lfj/Ql1Lev/F7JjDeaXoOO3w8pfb+252dBr8V6dz+13ztT7fttyP83+Rg/Ylre/5GP9dJv/P0mOuamJ7K9Wo2fOy08Hu4FOm8g9mca/0Dlf6f8caDXXpvtnaT6poIeeEy2N0z1zQW9/li7f2sEXTQw2xuh+pZMC6+3zwOd76yPbpkWPr//A/m3Os8/md5U7N81vTdBF59n28vXoLdcaZ83xqqrGhsT85tamhOptqrWtlh1a1uqrb2ublh1LJGYOHtWaWL6tLLZiQSoSSHq6IkBwddlJRpqlgwbNXpsQay6pSnZWNtWW0NyOCRrWhLzG1vmVTUmzHu1ElXtS2LmVVaJmvampqV+OpNnTjKKp5SOnzE5oJiM77eKqgNFqdoU3/8FTUlkuSGVWFTV2FCT0OBYe6pqfm2soTlVi7LVtdbWJhY3NNZUV7XWJFprU8lYqr5lcaKluRZUdUtrTay1HYZAWGNDqi3WkkwkW2vrGmwq87YXkGisbY7V1LLcfB3XglhjS/P8REuyDUKp2LyG+Q3JRFV1NWJVtzS3tbY08lVhiZrauhRy3VTbVF1VXV9Lb7VhNNYuqm0k0VS1BFlra22oTUElKiuRWpriW8ZUsLa1lSabM3Pi7GmzZiYSw8aMGDUyGjJiOMUh2twSZo0uHDEqlmprTWjOq5tqKIkiJataa9EiWlphPhMciYdEXMHaNiNEVb6/trlqXiPitjQ3J1taTGHoT5BINLW31S7xRdDw2mDuhupUjN5EVWtr1dJIgqNGDo+ZmKZiIuUbMyoSMnx01AbDC4ZHQvLHFDBPrdWLEvNr21K2XSDzifraxmRtxLKjx44q3G6MiGj+8BHhkMLRw0dHZEaOHU11qYZmhQRfV6emiYjmjw4aSU2iqqYmmrWCEWONktrmaE7GFETTHZMfzduokflaPajA9uo2ZKTamIHvmAtHHj26ICw6X6rbiDotQtrsotqgWcx3mgitNy9EucS8dHsWjkqz50ipvnBFLKhdmspcd8NHj1FxCmWWyR87JpLI2BHRZMfmm4ZPA21Xz9j8AlMWCLXW8iWAmRrIyELteK6M5rCpvbGtwR/CMKC1ZkyncOyoEX4MXxaKWjPnqhANPtokR0ZLVzh2eDRkVFoIqoI5RyvMVFGFY6Ntd/SoaNUVRHpnYcHYkdEGjdwylXkNzY0tLQvakxlsOGK0NvrtlF9Ho0ztqSDankaPHj4qqn5UtOeMGBEt3PA0E45NM+GYMdHijinMj7U1cayLlrrQ1KgZ6MhGv2hpTEWC2jhoYq6pa6xq45RR14AZfHFDc03LYsy9zXUN89tbqzjvhCUTmDYWB0RdVaqtFiOpS1tJjPu1NZg1/STakzXwaBqYJmtbhxUUFI6OYdLD3Ac/jFeDgVmJQkZtw2TLya1mXlWqdlgBO2BN7ZI2+sbGGv3AQuiQwNExP4aZDzC9oXOkAqomRM3zmRjwEoxnVh2Y0VNgcfqF0taqROO8hjbMvkiL8/P8tnoNr7HhzHaQotE0rx3DiShFMqa0QSZMqOiYJ8pPaW9raOTEXdVWXT+sLGam94Z5h1SlmlDPh/jB02HfGfQf1dJSE5uOJl1VX1tVMx05jk1vaGpoK25JNbQ1LKolLzmZzdhItSdJx6bXVi2qnQnjk5rYlExJSGZqJMjmGVVLGpram+id3rIYRZiOBUltq8mDTb+0ti1WVdNY21owAmWobq22iKbXhN5Xm2BlsnmwqY3CmmN+Q/N8Fpjz1LCRBWPGxLgQaUnWNnNdkkBvSy6prp8fS2FJyDegclYbNnIkBkXKpdrnJdpqsUJEg4o1LSgpw7yxsBo9YWEz/6eIadBYxrXXGpLjm1DQbEJa2UjNu11JYc3XVt/a0tbWiDaLmqlegAwmWLphI0eNHR0EkSq08etaWmPVyfYg7rCRhQXCdkNrYtXtGI6rWDWQGDlaClHf0s42okKx+haYZySneKzO+C5XEoWxZEMNPaNMnMWtDWZtON9Quoykt62FJW6rbU3FZOk3v6p6KTp0W72fADLvsGJYyHHhqCtBtOBq9vaq1qXDRo7BEiXCZt74rtlouOYgqqyqFnuBdNmGuqrqIHRee12iKplk3+O0b96gO2zk2JEFMdaVvFDXROOgxSAuvMMhqYZTnJCmqtYFifYUrB0EoS/Xav3SnqPyzSKvuHTy7NnHuWMmGIWO2PD87YgNzy+MVbW1NDXIhJFsMW8e1vaGgsjGImWahaNu5JjtqBs5NmZ2L/QWYsyoGzZqRMGYmKrhKAYVGPBi/oCtKCVPJdqbFzS3LG4eNmLsmLGxBrZs37ptLY2mw/p0sn0eFr31GHNtDcg4PwwT0uh0OeVmYLSiUyxN1DVnYBlDZGJggEyaQSOdBR/tZRp1OtdUeuaEmlI2AsbxtoZmM2E5BXRCg7AmDJbcjtjmFxJP1LSik1q7me2So1K3T7WtixqqpfsHFm9qGjZ8zOgRYVHTqRE8PKKBI10kqLY51c5tEGYeNNpw53ELFfTUTGXQvqYda8GilK3tdszITYlUTYOVxtjCOW3YyHwMwE4gA2ybUGXJhrRkMEuPDMJIJDjFW6mW9tbq2kw511wz7YKxBfkxRoOPGxD0YvpsfpprF4uF2howALU1JYgQGT4cBDE/mq1RI0fYbJEIZ8uEpPzUR47yUx850k8dg1BYZbT+JR0ze2TkzGtPLc3McZXVYkZKVMG0oVYeEsfw0hRwsMhv4coqQ+phVij5MMtNP8wJJVWfcls9qHByDAglwgBXNemQwrpIM65LL0Ndet7r0vJcl0qjMiRkO0Dm8FQVEsYYWpOWn7qWzDFk8RBmpWoXcn8WM8N8AXd1YT4Wl1VJHmw0Ndj2lGzEqO0YQgLCltCwkCk0zC29BmXo7MoJGaa6ts4d/GvrEnWL0bnaFre0LogG17SkGkdvR5bMNPnmTEGZJBuSCU6ajY0N82ubncFB2amGZIagNEXtrY1pRalva0vC1tXtWCMtDTHdmYJ0yNZ+QLCgDKeUOZQbhQbMw5m55ogwMytUpQxw61PSC1cZV6YNyUWFoTBsrBpaa3nGkswYnlk41Vq9vQgy90WYPJvgzIzlGRePPqshyR0aWj2Rp49V7Y1tWH0lk5BKYXnPDXRtK5Z72BkFwaHY4RqQoJBlJChkCwlyzWVqTTLudtsmjGpYxla7AVhsN7nTV32TOWAdVjDCmfiaqhoRaA4H1Z+RFRqs/Vp2kvODEk6CQZj2VWeRFLCqW9qb27YXIz1cDZ+B0ZJBSag0QfD2ajhV1djc7pgei4b5ToUxWsjkzszOCq/loU4yE7e9OdUwvxl8s/11GirXvtWx+tolMENN7TDs5EeHdgo6lDa3NNfGmnkqgdVWeC+BtT4XxXbtwWVUor0mmairkZ0j1w0t7dxGFo6NLoKjq2I2ETQbswvJyEE5MzPQX5FIoqUuvOgIybQ3Z4pOjjmdjXIampItrW1mpRAeuoRtth6mHzAgym1sqarhyjkVMwnI6oKnvzw1yCR7MnY1qfQ0uLn0DzJQhxmj+ltQv5NXV7Xqonzk8OHW5rLGlihyEDQyf+zIjBpZrIzZjA2bPnzEKPN/ofl/tPl/jPl/LP8vsOtC/8EILaCQmLcUY7N0DOyW3DBjY0NXNUprFSnZdJnRBL6AGY7cFtWZ5G6joVnYoSA/FUPqgONosskJHVFgk3LD0gJaaxtrq1K1kXjJ9lS9G2Tpqtba5qpQbiTE7LcZbGK4nNQ8rAkkc4lEXXtzNba2Iwp5jGFlIiV2Ika1MZ1omBjUhrqb2Xr0ikYk3VpbV9vKFUUq1jLvZExpKT6wa6syIX7LX+DkQSJKChISyOtQHAqUYT8ipxmJBs+vdlI0J4mWDNWHjWI6ZF001KwfohnJLJpRbzjUpO/GxiAkg0fEUia8taXJNY6M+b7xSJlTyVozG9horL6INpvHcHydeCJVGmtsmCfH2qhc8ZglEJcUzRi5zCmUhi+ualyQSDVWzUu0tixO+aEmoIH9p3l+Y60coPBQL8yNBiPfWAph4einGTx3wTq1Vs7CnfzYwER1PT+XVOMw25uD1hgES4dSorql0Rjep5Pt6Fe0iTmpD7I036RfU9VU5ehv4tThFMZ2usLh+aMzHzSNHDPCj8Jn3HqI1NCMqTaVWNSQamhrafUFYEpp64EhIGVCI4LJVG17TYvhwFSc6/xcYbKpbm2YV2uKE0QL8jmmYEyBmxrXCkouTHGiiwQ2sEO2Bup16WDCfCM5Q8/o4WNHhCpbLO9YadTY7VipsNDNVjRewciCzPEKCka58fSegI3Ix84J3/y1opZtq3V+rVSHGW6cIhTmm0dZfoFGWv3SemuWZKo07uYX1TpaCs1DM1/LmEJrFho5okGy4/YjGXUX11Zx0KojK6il9lqs5TI0CdMh3cZly81y1rVWmdqSzpRIj+QmL4nIsWcoqLq+oRFjmFVggsMyzS3MM5Y49dYCY4ePKQziaHq187Gir2X+pa3iv/YmqzncrpvR8hpqAlk/a0KhYmobHeOP5lNfjdje7JY36B7p/QXrJ6cCRxeMHJEuIzlP61Sj5WmkX9YR5hGqn5mR+cPd9jh2RMaGXDhqDBsa7+BUZxQYMYYP2Jpa58nYDESNtelAqwGmNln3SpvRIzT4GSI1zOlaBaPNA+L0BAtGF9guKT1mmO07bIDi863hc8RGps1lZnH/jsktEmqG5EB7bXUDdhzJlmS72StFFcnhpowUNTVpbI1uVoppPI5vGXMgDS4tglnc/x8pRUcWtYGEBpGakg0JWQRntPeoMdupiELe7kDcmto2rKWN11yiaeeUnjnG6MzDZYE8y0+21pr9u7mno9fGEomGwjGFw8wSEAvoenNQtsR/hKwdLsFqaojEc4LM7ZWjps+aMH56YtaUKWWTZydmj58wfXIilph03MzxM6ZNRE9shbLGxqX+fbTgbliqRdeFsVOqzSTop20ebZvnvGaDGtNHwUoknKLI7Zn0gsxbEpbTrJsrHrDhKdU63/BWBHcWxicP0fVxdNRoJiUI1TVi9a4yspiSZ1+y9Mt0uSO8MdILD7oydGYU7n5RwuTSWFNVQ7P/ZH8iAyI7MrNN48kDFnRgtbQWFR01fdqEiYkRw/IzL2rN4XdoJV7d2MKV6tIULeHG1+e3k+TA4yh5OBbNQaY9t+k2oXMlPcfRixCtNe3J2GLsUd3UeErg0rCfHtpgodfKB628qTSvva4OBjFPgRqCtVn6LGb6Ip+Fa+s1DzJH+VaK3jxZVNWa6fmoHH7UZJBOpKrq0P6kLTnLJTOM1EQPQ8xDp2hWZZ/pXGua19DMqjF9Cm0OTTCZ8D9Lmv4kzuhsWoC1s2u0RKK6bSkGpXncdFhGQWgVqocQtSlNfZ7ZSrA+loQqAGMNxrhFGSwTM20mVHvhZRaaFxdFkfrk4zt5KMnLhDwv5b245NI0sUy3qIzFUYHNkQjuyan74HE+NjS80tYy3926+KN06Dwn/Xlpwj4Umu/uiGuXJBtaayPdeH515stsMdZRtEPJXqy+qaYtVIhF3HGYB20p01Llvmd7qrG2NhkxD58D87FIQo6QG5fKnpFtLbSXaKhtrEnIsR/axbzCkYlmNKnQOFPLtY255sosoQSRpKqrUpEBTALnRUJT6CjNdaGGyFYCYb2bygbmPqJyKyq0hK9ridUlW7HrrMvQuuzYiE1K04IUz1NdMb0M419+KRwpF3vE5sqMSZ90o+n4WlbbNhWmxao0aDRobvjnym7nMjALNqJmXqiTc15rWFTTULC9+jPVFgxq2oTmRdqQHVz0BgL2ELzYgkmmVdqJbTH8/LKs/syKqr6tpbkxgxl1o1BjLmBFezw/feyvv/W+rH8pOL1edIYobm2paa9um0mTVbMRJ1oz9VA5nZTppskcxe6ojmUEh/nrojOD0YCkM6Vhu3LtkgbOjTztCHXm5vRi2KmmuXYxv9kcmm2c9YAZW2HUpU56ZgNZleLeE6uVhpDBE3XJRP1ia9cmboxIcWTATMwjjGZsX+QmkF7VwGiTCjfQuprwSDI8NCSb1k2l5gKx1j/XUNquS81lHGcQq25pWdAQfe5tjMo9QnThwrlRV2NlS5uri3n3Ri5i1aY9mjaTUiJhRt7qVLtkzXavScEDibRrIcgYep4ZqczQZ3JF4e00EdPmzQhnPhDuTMHcpWY6JppcXpxoqhlVVMTctS5NtrUMS7UMG55vfliw3WVTcNQYthYHAIybzfOji6w6szdckpyf4AVFDiKZWql7zsPSyHjhT7iJhpZFTpvkTVi3PcqC1VVrbqctckNamyILAyhpra4PBXEcCrWyyKQ+PJZMCwmt8KThYQYP6zU3rBva7A8GYts5cEi21Zux0FxGxGadC+lQnuubML3ZkBGhMaIVc5k5MLWrutCRiv+AlOcnkNjOqiF0tWm7V7gjZ6U6iYeXlDoWTsTGZLbcGQu1I/NEyz18kyHW3LzAYO2vrpvSKtcMhrLQ1G5Y3Mp1glzrNZOPf2Wvziqa0tJaJg8Xtfu5AwBGuaCWdIJOYitrvlaf9qzSlLqae4zMRzjsVzMmJSbOPjbBSam5PZnexYLzGCSxgGvxliTXtfyRDQbTUJ1HFzxp+WEF6V7Rri/cutICTw4GQ+eZiq0OE0+mkmhXCfdoXjaZV7u0pTm4Ux0eyU7hgMWbDpEVZrAUrjYreuwUzdVF3851ba3tvDSLVYrbwTiCRvKjK2L7yyK712zyz0r9FUvGhbGz1/Q3p/5lcW4yWxvm18sEkmyR4d/cuw+v8OY7q1K/6bSmkjpD6p4uNPVNm4XQmoZmuRrq7w/MkrUFChvrmoIGbXa2RklbS2PwyCHDyO88Esh0nTW4XBRdBvvllZ4TqSg94pNl8Pa2H5FIsda0sV2nPdNTE9y3p42J1aFlsL0jgLVDk3PaKqeWwRMKmX50ZAqvDcM1LM9tORb427q0pbspmvOjNHNX3H0UsyObhLU5JubVfe7szIyCGnZbdPj5R3CEbHqu2CO8KHVvN9jxlkUPXYO2D/Mx2TJ+OM1Mxw5+0w/25nIMUTUPC+pM3ca/bKFTerCmMdvz0HbanKuaAbhpAYd/2aVWZdSadmPDeYSHMYpXV5Y0pG3DWpoXcXnpboexImgKN6jQ/UV3g8URelLDfIRMa6bu6OjMdWNbi5tmeGaOzssJbeT+4URdW8uCDJ1VZzh3fZjSXSF3Fc6vFiMdUmY2ORHnYYUO4/p8RwoYWchEJ009XwjZcUFNeL/Iw3hncg3PDzqy6gBFu41IBKNIVWtVU/hxTUoeD9ofGJpy1XFDF7bcvFRK05MVOwShYF5V9YLooVE99t6ysnAP69yjJLfDymG0taQ8g5EJNzS5IUfQj/nXDT0FTaK8tjUVbi1TGvjgt3ZJeosJ9qoZxwRsY+p9y83hsr6JE57fKsz6XB70m30Rzd0YaiW6Qwwm9+0PxnIyz8nJ3DGqq6laGt3PzqvmCXKkham10nc6csoUSFfVRI87/VGEFpsolxGnNFbN5x7Q/g47kYjVmTV5phEgtbS52r/kPz+8c3cfs2aa4Mz6KhbcyU5ElwnmCCpcJYvMPBvegbtjA3+dVtWKnR8nc7MwCfcDLhWjd/Cbza89G8NnW5EbsBkOeMLrRjnfjrR5qfnI087GRgzTwRZaH4RkvkrtpordQ3gITjvGq4nYRY5UgwPZWDKFyo4MIrrNNlu0DDUEb8bJpyn0JK4hFb7zYJ9M7uDqXiyVfnCRqA1flJPjSA7LetZv2oB2xbSjJNMXzFalrrq5rTFTbbJoZrO6KH3YzfDTleAMoS7Z3lYdnTOwumvPvLwLm8xs18Ine4mjFyVKteVMbKySw2u/SYTuHzrXOk3vDC0ZbFblXmqgorWqeUFomyrDlLFTKrzrNZdjnTU5n6Vu55cyS9gcos/5YzwyihQ+/NwmbZeYaDYmqY8c9SfaGlOmtnmgn+GwP6joDKchoSJxEjdzVvC4JJRpecTuLHli89h5Mx3/p982iJzJ2gcFKFFLZPVnlnj2OYH/kCDTtUv+esncutRtt9328jCyrH0ef5qYjB6bYUMCZeETzGZOdXKpyp/gdbpflOmsEDNnVWvGfuBen9QLZEw/vDJ1FhSJ0LUQuUyhZyrBljG6Ozc/jDBnT8HlCNpM8z27vTl4cnpUcJrtFCoR/nVo4Uij0Dx88OPNqGpdID+T1IONagzT+vvQ0JJhslmbuAOFOZP210D+L8x5CL2wvaomWO/YU892TmKp7R+9LdIVCVWkMg4XvBLqj51+n3aGeTOg290y5zI0lWQtx5/o5q2ppSb9qN7sojKex0t1Ze727PWJRN0O9iXBILWdn9kFKyCzz57vnhs4r2lw3/sRnh6ZvXbn+V76Csq5kW/38zzp0EcRJiB0YLGjJx/m/ow2IDlu5lFCdOJsSpnhyhxt1hhzom3Oa58fXUnLxs52glD57W0X88i6JfzYCR28pb1tO4Mpn7JDq30rgalQLtzDZzDhVQGzarYJWDRmOGWbbI5EMs35bG7+NQZ7zsIG2BA6d3XtNiK23XWjsySwR3L6IhkzB9mF+xyzgUpftpt1ck14DEh/ZBgsOOw04h4HJGRr4R9WyCmkeXKpQzEGX5TEPAyCflRrW/gU39w1zLh0lEWgv8BsjqwwdRybgK1DTayRw5LzWEL23OFFg3+2Wo72Xmcua2Qw+2TZkWLhVL3An3HCv1uV3xzoC1pMb2vf7rl+2io0ub3ZXZ/m1bb5T/R0SeHu6N2TO3YCs9gLj5F6ivH/A1JOPNFKWwkA}
		set sessiondump_11_5_x_md5 "5b708d862a488350f907e95f909a53f5"
		
		set sessiondump_11_4_x_base64 	{}
		set sessiondump_11_4_x_md5 "f4e63009e7d11a3eff45e34571bb9916"
		######## SessionDump Base64 End ########		
		
	
		if {$pushstate == "Yes" || $pushavr == "Yes"}{
			#set mysqlpw
			set mysqlpassword ""
			catch {set mysqlpassword [exec perl -MPassCrypt -nle "print PassCrypt::decrypt_password(\$_)" /var/db/mysqlpw]}
		}
		
		set version ""
		catch {set deviceinfo [tmsh::show sys version]}	
		regexp {.*Version\s*(\S*)\s*} $deviceinfo junk version

		#hostname override logic 114310721
		if {$hostnameoverride == "" } { 
			set deviceinfo [tmsh::get_config sys global-settings hostname]
			foreach object $deviceinfo {
				set hostname [tmsh::get_field_value $object "hostname"]
			}
		} else {
			set hostname $hostnameoverride
		}
		
		set deviceinfo ""
		set device_base_mac ""
		catch {set deviceinfo [tmsh::get_status sys hardware]}
		foreach object $deviceinfo {
			catch {set device_base_mac [tmsh::get_field_value $object "base-mac"]}
		}

		if {$device_base_mac != ""} {
			set device_base_mac_split [split $device_base_mac ":"]
			set device_base_mac ""
			foreach macpart $device_base_mac_split {
				if {[string first 0 $macpart] == 0}{
					append device_base_mac "[string range $macpart 1 1]:"
				} else {
					append device_base_mac "${macpart}:"
				}
			}
			set device_base_mac [string trimright $device_base_mac ":"]
		}		
		
		
		if {$format == "Splunk"} {
			set beginningdata ""
			set bofdata ""
			set eofdata ""	
			set eventformat_start "\"event\":\{"
			set eventformat_end "\}"
			set url "${url}/services/collector/event"
			set bordata ""
			set eordata ""			
		} 
		if {$format == "F5 Analytics"} {	
			set beginningdata ","
			set bofdata "\["
			set eofdata "\]"
			set eventformat_start ""
			set eventformat_end ""	
			set configurl "${url}/mgmt/ap/v1/tenants/$systemtenant/sources/${hostname}/config-models"
			set url "${url}/mgmt/ap/v1/tenants/$systemtenant/sources/${hostname}/raw-data"	
			set bordata ""
			set eordata ""				
		}
		if {$format == "F5 BIG-IQ"} {	
			set beginningdata ","
			set bofdata "\["
			set eofdata "\]"
			set eventformat_start ""
			set eventformat_end ""	
			set url "${url}/mgmt/ap/v1/tenants/$systemtenant/sources/${hostname}/raw-data"	
			set bordata ""
			set eordata ""				
		}		
		if {$format == "F5 Risk Engine"} {	
			set beginningdata ","
			set bofdata "\["
			set eofdata "\]"
			set eventformat_start ""
			set eventformat_end ""	
			set url "${url}/"	
			set bordata ""
			set eordata ""				
			#set bordata "\\\\\\\\\{\\\\\\\\\\\"body\\\\\\\\\\\":\\\\\\\\\\\""
			#set eordata "\\\\\\\\\\\"\\\\\\\\\}"				
		}
		if {$format == "F5 Risk Engine - Full"} {	
			set beginningdata ","
			set bofdata "\["
			set eofdata "\]"
			set eventformat_start ""
			set eventformat_end ""	
			set url "${url}/"
			set bordata ""
			set eordata ""				
			#set bordata "\\\\\\\\\{\\\\\\\\\\\"body\\\\\\\\\\\":\\\\\\\\\\\""
			#set eordata "\\\\\\\\\\\"\\\\\\\\\}"				
		}		
		
		
		set input [tmsh::get_config ltm data-group internal /Common/${appname}-send_stats]
		set workinglist [split $input "\n"] 
		foreach item $workinglist {
			set item [string trim $item]
			if { [string first data $item] == 0 } {
				#we have a data line
				regsub -all "\"" $item "" item
				set datagroup_array([string trimright $lastitem " \{"]) [string range $item 5 [string length $item]]
			} else {
				set lastitem $item
			}
		}

		#set the values from the data group
		
		array set application_mapping {}
		array set avr_commands {}
		set sessiondbkeys ""
		array set tmctl_commands {}
		set source_metrics_to_ignore ""
		
		
		
		catch {array set tmctl_commands $datagroup_array(tmctl_commands)}
		catch {set source_metrics_to_ignore $datagroup_array(source_metrics_to_ignore)}
		catch {array set avr_commands $datagroup_array(avr_commands)}
		catch {array set application_mapping $datagroup_array(application_mapping)}
		catch {set sessiondbkeys $datagroup_array(sessiondbkeys)}
		
		array set vip2tenant {}
		array set vip2application {}
		array set vip2tier {}
		array set application2tenant {}
		array set tenantapplicationtier2tier {}
		
		array set wideip2tenant {}
		array set wideip2application {}
		array set wideip2tier {}
		

		
		
		
		
		#pull in AVR buckets and other settings
		array set lastpollsettings {}
		array set newpollsettings {}
		set max_avr_buckets 5
		set max_ihealth_attempts 20
		if {![catch {set fp [open "/shared/tmp/f5_analytics-${appname}-lastpollsettings" r]}]}{
			while { [gets $fp data] >= 0 } {
				set data [split $data "|"]
				set lastpollsettings([lindex $data 0]) [lindex $data 1]
			}
			close $fp
		}
		
		
		#lookup callback url 114439165
		if {$callbacktype == "Use Management" } {
			set deviceinfo ""
			catch {set deviceinfo [tmsh::get_config sys management-ip]}
			foreach object $deviceinfo {
				set mgmtip ""
				catch {set mgmtip [tmsh::get_name $object]}
				if { $mgmtip != "" } {
					set mgmtip [split $mgmtip "/"]
					set callbackurl "https://[lindex $mgmtip 0]"
				}
			}
		}
		

		
		set lastsentdate ""
		set aggr_period ""
		set key "lastsentdate"
		catch {set lastsentdate $lastpollsettings($key)}
		if { $lastsentdate != "" } {
			set aggr_period [expr $date - $lastsentdate]
		}
		
		set docertcheck "No"
		if {$certexpiration == "Yes"} {
			#Certificate Expiration Dates

			set lastcertcheck 0
			set key "lastcertcheck"
			catch {set lastcertcheck $lastpollsettings($key)}
			if {[expr $date - $lastcertcheck] > 43200} {
				set docertcheck "Yes"
				set newpollsettings($key) $date				
			} else {
				set newpollsettings($key) $lastcertcheck	
			}
			
		}


		set doconfigpush "No"
		#Certificate Expiration Dates

		set lastconfigpush 0
		set key "lastconfigpush"
		catch {set lastconfigpush $lastpollsettings($key)}
		
		#were there changes?
		set deviceinfo ""
		catch {set deviceinfo [tmsh::get_config sys db ltm.configtime]}
		foreach object $deviceinfo {
			catch {set ltmconfigtime [tmsh::get_field_value $object "value"]}
		}
		regsub -all "\"" $ltmconfigtime "" ltmconfigtime
		
		set deviceinfo ""
		catch {set deviceinfo [tmsh::get_config sys db gtm.configtime]}
		foreach object $deviceinfo {
			catch {set gtmconfigtime [tmsh::get_field_value $object "value"]}
		}
		regsub -all "\"" $gtmconfigtime "" gtmconfigtime
		
		if {[expr $date - $lastconfigpush] > 43200 || $lastconfigpush < $gtmconfigtime || $lastconfigpush < $ltmconfigtime || $docertcheck == "Yes"} {
			set doconfigpush "Yes"
			set newpollsettings($key) $date	
		} else {
			set newpollsettings($key) $lastconfigpush
		}
				
		
		#because BIG-IQ collects the data we cant really set an aggr period as we won't know if they collected the file
		if {$format == "F5 BIG-IQ"} {
			set aggr_period "" 
		}
		
		

		#open the first file 
		set stat_bytes_transfered 0
		set currentfile 0
		
		set stat_bytes_transfered_config 0
		set currentfile_config 0		
		
		#BIG-IQ wants one file
		if {$format == "F5 BIG-IQ"} {
			set maxfilesize 100000000
		} else {
			set maxfilesize 990000
		}
		
		set filename_config "/shared/tmp/${appname}-config_"
		
		if {$pushinterval < 11 } { 
			set filename "/shared/tmp/${appname}-stats-${date}_"
		} else {
			set filename "/shared/tmp/${appname}-stats_"
		}
		set infile [open "$filename$currentfile" "w" "0644"]
		if {$bofdata != "" } {puts $infile $bofdata}
		set beginningdata_running ""
		
		if {$format == "F5 Analytics" && $doconfigpush == "Yes"} {
		
			set infile_config [open "$filename_config$currentfile_config" "w" "0644"]
			set beginningdata_running ""
			puts $infile_config "\{\"tenantId\":\"$systemtenant\",\"sourceId\":\"$hostname\",\"vertices\":\[" 
			set beginningdata_running_config ""
		
		}
		
		
		


		set devicegroup $hostname
		#device group override logic and collection 114278039
		if {$devicegroupoverride == ""} {
			set deviceinfo ""
			catch {set deviceinfo [tmsh::get_config cm device-group]}
			foreach object $deviceinfo {
				set type ""
				catch {set type [tmsh::get_field_value $object "type"]}
				if {$type == "sync-failover" } {
					set devicegroup [tmsh::get_name $object]
				}
			}
		} else {
			set devicegroup $devicegroupoverride
		}



		if {$pushstate == "Yes" }{
		
			###now let's get basic device status
			#need DSC info, need state of DSC am I active
			set deviceinfo_version ""
			set deviceinfo_location ""
			set deviceinfo_description ""
			set deviceinfo_marketing_name ""
			set deviceinfo_platform_id ""
			set deviceinfo_build ""
			set deviceinfo_failover_state ""
			set deviceinfo_chassis_id ""
			set deviceinfo_mode ""
			set deviceinfo_sync_status ""
			set deviceinfo_sync_summary ""
			set deviceinfo_sync_color ""






			set deviceinfo [tmsh::get_config sys global-settings hostname]
			foreach object $deviceinfo {
				set realhostname [tmsh::get_field_value $object "hostname"]
			}		

			set deviceinfo ""
			catch {set deviceinfo [tmsh::get_status cm device $realhostname]}
			foreach object $deviceinfo {
				if {[tmsh::get_name $object] == $hostname } {
					catch {set deviceinfo_version [tmsh::get_field_value $object "version"]}
					catch {set deviceinfo_location [tmsh::get_field_value $object "location"]}
					catch {set deviceinfo_description [tmsh::get_field_value $object "description"]}
					catch {set deviceinfo_marketing_name [tmsh::get_field_value $object "marketing-name"]}
					catch {set deviceinfo_platform_id [tmsh::get_field_value $object "platform-id"]}
					catch {set deviceinfo_build [tmsh::get_field_value $object "build"]}
					catch {set deviceinfo_failover_state [tmsh::get_field_value $object "failover-state"]}
					catch {set deviceinfo_chassis_id [tmsh::get_field_value $object "chassis-id"]}
				}
			}

			set deviceinfo ""
			catch {set deviceinfo [tmsh::get_status cm sync-status]}
			foreach object $deviceinfo {
				catch {set deviceinfo_mode [tmsh::get_field_value $object "mode"]}
				catch {set deviceinfo_sync_status [tmsh::get_field_value $object "status"]}
				catch {set deviceinfo_sync_summary [tmsh::get_field_value $object "summary"]}
				catch {set deviceinfo_sync_color [tmsh::get_field_value $object "color"]}
			}		

			#need service info, insync, apm, asm policies need to be applied?


			set last_asm_change ""
			set asm_state ""

			if {$mysqlpassword != ""} {
				set mysql_command {select CASE WHEN max(event_time) IS NOT NULL THEN "Pending Policy Changes" ELSE "Policies Consistent" END as asm_state, max(event_time) as last_asm_change from PL_CONFIG_LOG where event_type <> 2 and element_type <> 18 and event_time > (select max(from_date) as asm_last_changed from PL_POLICY_VERSIONS)}
				if {![catch {set output [exec mysql -uroot -p$mysqlpassword PLC -B -e $mysql_command | tr '\\t' ',']}]}{
					#split the output into a list
					set output [split $output "\n"] 
					set row_number 0
					if {[llength $output] > 1} { 					
						foreach outputline $output {
							#skip the col name
							if {$row_number > 0} {
								set outputline [split $outputline ","]
								set asm_state [lindex $outputline 0]
								if {[lindex $outputline 1] != "NULL"} {
									set last_asm_change [lindex $outputline 1]
								}
							}
							set row_number [expr $row_number + 1]
						}
					}
				}
			}

			set apm_state ""
			set deviceinfo ""
			catch {set deviceinfo [exec guishell -c "select max(config_sync_state) from profile_access_misc_stat;" |& grep ""]}
			#split the deviceinfo into a list
			set deviceinfo [split $deviceinfo "\n"]		
			regexp {(\d)} [lindex $deviceinfo 6] junk apm_state
			if { $apm_state > 0 && $apm_state != ""} {
				set apm_state "Pending Policy Changes"
			}
			if { $apm_state == 0 } {
				set apm_state "Policies Consistent"
			}


			set afm_state ""
			set last_afm_deploy ""
			set deviceinfo ""
			catch {set deviceinfo [tmsh::get_status security firewall current-state]}
			foreach object $deviceinfo {
					catch {set afm_state [tmsh::get_field_value $object "pccd-status"]}
					catch {set last_afm_deploy [tmsh::get_field_value $object "rule-deploy-end-time-fmt"]}
			}		





			set row "\"iapp_version\":\"$iappversion\",\"aggr_period\":\"$aggr_period\",\"device_base_mac\":\"$device_base_mac\",\"devicegroup\":\"$devicegroup\",\"facility\":\"$facility\",\"version\":\"$deviceinfo_version\",\"location\":\"$deviceinfo_location\",\"callbackurl\":\"$callbackurl\",\"description\":\"$deviceinfo_description\",\"marketing-name\":\"$deviceinfo_marketing_name\",\"platform-id\":\"$deviceinfo_platform_id\",\"build\":\"$deviceinfo_build\",\"failover-state\":\"$deviceinfo_failover_state\",\"chassis-id\":\"$deviceinfo_chassis_id\",\"mode\":\"$deviceinfo_mode\",\"sync-status\":\"$deviceinfo_sync_status\",\"sync-summary\":\"$deviceinfo_sync_summary\",\"sync-color\":\"$deviceinfo_sync_color\",\"asm_state\":\"$asm_state\",\"last_asm_change\":\"$last_asm_change\",\"apm_state\":\"$apm_state\",\"afm_state\":\"$afm_state\",\"last_afm_deploy\":\"$last_afm_deploy\",\"ltm_config_time\":\"$ltmconfigtime\",\"gtm_config_time\":\"$gtmconfigtime\""
			puts $infile "$beginningdata_running$bordata\{\"time\":$date$rbac_system_index,\"host\":\"$hostname\",\"source\":\"bigip.tmsh.system_status\",\"sourcetype\":\"f5:bigip:status:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
			set beginningdata_running $beginningdata
			if {[file size "$filename$currentfile"] > $maxfilesize} {
				#file too large create new
				set stat_bytes_transfered [expr $stat_bytes_transfered + [file size "$filename$currentfile"]]
				set currentfile [expr $currentfile + 1]
				if {$eofdata != "" } {puts $infile $eofdata}
				close $infile
				set infile [open "$filename$currentfile" "w" "0644"]
				if {$bofdata != "" } {puts $infile $bofdata}
				set beginningdata_running ""			
			}
			
			
			
			##interface state
			
			set interface_status ""
			set deviceinfo ""
			catch {set deviceinfo [tmsh::get_status net interface]}
			foreach object $deviceinfo {
					catch {set interface_name [tmsh::get_name $object]}
					catch {set interface_status [tmsh::get_field_value $object "status"]}					
					if {$interface_status != "" && $interface_name != "" } { 
						set row "\"aggr_period\":\"$aggr_period\",\"device_base_mac\":\"$device_base_mac\",\"devicegroup\":\"$devicegroup\",\"facility\":\"$facility\",\"interface_name\":\"$interface_name\",\"interface_status\":\"$interface_status\""
						puts $infile "$beginningdata_running$bordata\{\"time\":$date$rbac_system_index,\"host\":\"$hostname\",\"source\":\"bigip.tmsh.interface_status\",\"sourcetype\":\"f5:bigip:status:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
						set beginningdata_running $beginningdata
						if {[file size "$filename$currentfile"] > $maxfilesize} {
							#file too large create new
							set stat_bytes_transfered [expr $stat_bytes_transfered + [file size "$filename$currentfile"]]
							set currentfile [expr $currentfile + 1]
							if {$eofdata != "" } {puts $infile $eofdata}
							close $infile
							set infile [open "$filename$currentfile" "w" "0644"]
							if {$bofdata != "" } {puts $infile $bofdata}
							set beginningdata_running ""			
						}						
					}
			}
			
			
			##disk storage usage
			set diskinfo ""
			catch {set diskinfo [exec df -P | tr -s " " ","]}
			set row_number 0
				if {[llength $diskinfo] > 1} { 					
					foreach outputline $diskinfo {
						if {$row_number == 0} {
							#this has our columns lets store this info
							set column_names [split $outputline ","]							
						} else {
							#this is a row of data we need to split the row
							set row "\"aggr_period\":\"$aggr_period\",\"device_base_mac\":\"$device_base_mac\",\"devicegroup\":\"$devicegroup\",\"facility\":\"$facility\","
							
							set column_number 0
							set columns [split $outputline ","]
							foreach column $columns {
								set metric_name [lindex $column_names $column_number]

								#value processing
								set value $column

								if {![string is integer $value] || $value == ""} {
									set value "\"$value\""
								}
								append row "\"$metric_name\":$value,"
								set column_number [expr $column_number + 1]
							}
							set row [string trimright $row ","]
							puts $infile "$beginningdata_running$bordata\{\"time\":$date$rbac_system_index,\"host\":\"$hostname\",\"source\":\"bigip.tmsh.disk_usage\",\"sourcetype\":\"f5:bigip:status:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
							set beginningdata_running $beginningdata
							if {[file size "$filename$currentfile"] > $maxfilesize} {
								#file too large create new
								set stat_bytes_transfered [expr $stat_bytes_transfered + [file size "$filename$currentfile"]]
								set currentfile [expr $currentfile + 1]
								if {$eofdata != "" } {puts $infile $eofdata}
								close $infile
								set infile [open "$filename$currentfile" "w" "0644"]
								if {$bofdata != "" } {puts $infile $bofdata}
								set beginningdata_running ""
							}
						}
						set row_number [expr $row_number + 1]
					}
						
				}
				
			##disk latency
			set diskinfo ""
			set lastoutputline ""
			set colrow 9999999
			catch {set diskinfo [exec iostat -x -d -N | tr -s " " ","]}
			set row_number 0
				if {[llength $diskinfo] > 1} { 					
					foreach outputline $diskinfo {
						if {$outputline contains "Device:"} {
							regsub -all ":" $outputline "" outputline
							#this has our columns lets store this info
							set column_names [split $outputline ","]
							set colrow $row_number
						} 
						if {$row_number > $colrow && $outputline contains ","} {
							#this is a row of data we need to split the row
							set row "\"aggr_period\":\"$aggr_period\",\"device_base_mac\":\"$device_base_mac\",\"devicegroup\":\"$devicegroup\",\"facility\":\"$facility\","
							
							#deal with split lines
							if { !($lastoutputline contains ",")} {
								set outputline $lastoutputline$outputline
							}
							
							
							set column_number 0
							set columns [split $outputline ","]
							foreach column $columns {
								set metric_name [lindex $column_names $column_number]

								#value processing
								set value $column

								if {![string is integer $value] || $value == ""} {
									set value "\"$value\""
								}
								append row "\"$metric_name\":$value,"
								set column_number [expr $column_number + 1]
							}
							set row [string trimright $row ","]
							puts $infile "$beginningdata_running$bordata\{\"time\":$date$rbac_system_index,\"host\":\"$hostname\",\"source\":\"bigip.tmsh.disk_latency\",\"sourcetype\":\"f5:bigip:status:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
							set beginningdata_running $beginningdata
							if {[file size "$filename$currentfile"] > $maxfilesize} {
								#file too large create new
								set stat_bytes_transfered [expr $stat_bytes_transfered + [file size "$filename$currentfile"]]
								set currentfile [expr $currentfile + 1]
								if {$eofdata != "" } {puts $infile $eofdata}
								close $infile
								set infile [open "$filename$currentfile" "w" "0644"]
								if {$bofdata != "" } {puts $infile $bofdata}
								set beginningdata_running ""
							}
						}
						set lastoutputline $outputline
						set row_number [expr $row_number + 1]
					}
						
				}				
				
				
	
		}
		

		#change to root for getting the rest of the data
		tmsh::cd /


		if {$pushconfig == "Yes" }{
			###now let's get the object model for ADC

			#pull in port number mappings 112280241
			array set service2port {}
			set fp [open "/etc/services" r]
			while { [gets $fp data] >= 0 } {
				set service ""
				set port ""
				regexp {(\S*)\s*(\d*)} $data junk service port
				set service2port($service) $port
			}
			close $fp

			set irules ""
			set appiq_profiles ""
			set appiq_perrequestprofiles ""
			set appiq_urlfilters ""
			set appiq_apps ""
			set appiq_tenants ""
			set appiq_iapps ""
			set appiq_processedprofiles ""
			
			set virtual_id 0
			set virtual_list [tmsh::get_config ltm virtual recursive]
			foreach virtual $virtual_list {
				set virtualdata [lindex $virtual_list $virtual_id]
				set virtual_name [tmsh::get_name $virtual]

				regexp {(.*)/(.*)} $virtual_name junk partition virtual_name

				#softlanding
				set application ""
				set applicationdone ""
				set destination ""
				set mask ""
				set description ""
				set profiles ""
				set rules ""
				set appservice ""
				set perrequest ""
				set protocol ""
				set policies ""
				set pool ""
				set index $rbac_default_index
				set tenant $tenantdefault
				set tenantdone ""
				set wideip_name ""
				set partition "/$partition"
				set tier ""
				set tierdone ""	
				set applicationdependencies ""
				set applicationdependenciesdone ""
				set appiqvirtual_outedges ""
			
				



				catch {set destination [tmsh::get_field_value $virtualdata "destination"]}
				catch {set description [tmsh::get_field_value $virtualdata "description"]}
				catch {set appservice [tmsh::get_field_value $virtualdata "app-service"]}
				catch {set protocol [tmsh::get_field_value $virtualdata "ip-protocol"]}
				catch {set mask [tmsh::get_field_value $virtualdata "mask"]}
				catch {set perrequest [tmsh::get_field_value $virtualdata "per-flow-request-access-policy"]}
				catch {set profiles [tmsh::get_field_value $virtualdata "profiles"]}
				catch {set rules [tmsh::get_field_value $virtualdata "rules"]}
				catch {set policies [tmsh::get_field_value $virtualdata "policies"]}
				catch {set pool [tmsh::get_field_value $virtualdata "pool"]}
				

				set description [string trimright [string trimleft $description "\""] "\""]



				set destination [split $destination "/"]
				set destination_split [split [lindex $destination 1] ":"]
				if {[llength $destination_split] > 2} { 
					#IPv6 destination 112280165
					set destination [split [lindex $destination 1] "."]
					if { $mask == "" } { set mask "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff" }
				} else {
					set destination $destination_split
				}

				set ip [lindex $destination 0]
				set port [lindex $destination 1]

				if {![string is integer $port] && $port != ""} {
					catch {set port $service2port($port)}	
				}			



				###app mapping
				foreach key [lsort -dictionary [array names application_mapping]] {
					set map [split $application_mapping($key) "~"]				
					set match ""; set m1 ""; set m2 ""; set m3 ""; set m4 ""; set m5 ""; set m6 ""; set m7 ""; set m8 ""; set m9 ""; set m10 ""; set m11 ""; set m12 ""
					regexp [lindex $map 2] [set [lindex $map 1]] match m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12
					set data "$m1$m2$m3$m4$m5$m6$m7$m8$m9$m10$m11$m12"
					set type [lindex $map 3]

					if {[lindex $map 0] == "Tenant Name" && $tenantdone != "yes"} {
						if {$type == "Map" && $data != ""} {
							set tenant [lindex $map 5]$data
							set tenantdone "yes"	
						}
						if {$type == "Append" && $data != ""} {
							append tenant [lindex $map 5]$data
						}
						if {$type == "Ignore" && $match != ""} {
							set tenant "ignore"
							set tenantdone "yes"						
						}
						if {$type == "Direct Mapping" && $match != ""} {
							set tenant [lindex $map 4]
							set tenantdone "yes"						
						}
						if {$type == "Direct Mapping Append" && $match != ""} {
							set tenant [lindex $map 5][lindex $map 4]						
						}					
					}
					if {[lindex $map 0] == "App Name" && $applicationdone != "yes"} {
						if {$type == "Map" && $data != ""} {
							set application [lindex $map 5]$data
							set applicationdone "yes"
						}
						if {$type == "Append" && $data != "" } {
							append application [lindex $map 5]$data
						}
						if {$type == "Ignore" && $match != ""} {
							set application "ignore"
							set applicationdone "yes"						
						}
						if {$type == "Direct Mapping" && $match != ""} {
							set application [lindex $map 4]
							set applicationdone "yes"						
						}	
						if {$type == "Direct Mapping Append" && $match != ""} {
							append application [lindex $map 5][lindex $map 4]						
						}					
					}
					if {[lindex $map 0] == "App Component Name" && $tierdone != "yes"} {
						if {$type == "Map" && $data != ""} {
							set tier [lindex $map 5]$data
							set tierdone "yes"
						}
						if {$type == "Append" && $data != "" } {
							append tier [lindex $map 5]$data
						}
						if {$type == "Ignore" && $match != ""} {
							set tier "ignore"
							set tierdone "yes"						
						}
						if {$type == "Direct Mapping" && $match != ""} {
							set tier [lindex $map 4]
							set tierdone "yes"						
						}	
						if {$type == "Direct Mapping Append" && $match != ""} {
							append tier [lindex $map 5][lindex $map 4]						
						}					
					}
					if {[lindex $map 0] == "App Dependencies" && $applicationdependenciesdone != "yes"} {
						if {$type == "Map" && $data != ""} {
							set applicationdependencies [lindex $map 5]$data
							set applicationdependenciesdone "yes"
						}
						if {$type == "Append" && $data != "" } {
							append applicationdependencies [lindex $map 5]$data
						}
						if {$type == "Ignore" && $match != ""} {
							set applicationdependencies "ignore"
							set applicationdependenciesdone "yes"						
						}
						if {$type == "Direct Mapping" && $match != ""} {
							set applicationdependencies [lindex $map 4]
							set applicationdependenciesdone "yes"						
						}	
						if {$type == "Direct Mapping Append" && $match != ""} {
							append applicationdependencies [lindex $map 5][lindex $map 4]						
						}					
					}				

				}	

				set virtual_name "$partition/$virtual_name"
				if {$tenantdone == "yes" && $rbac == "Yes"} {
					set index ",\"index\":\"$rbac_prefix$tenant\""
				} 


				
				
				if {$format == "F5 Analytics" } {
					if {$doconfigpush == "Yes"} {
						##APP-IQ Format

						set appiqvirtual "\{\"kind\":\"ap:bigip:Virtual\",\"id\":\"$virtual_name\""

						if {$tier != "" || $application != "" || $appservice != ""} {
							append appiqvirtual ",\"inEdges\":\["
							if {$application != ""} {
								append appiqvirtual "\{\"sourceKind\":\"ap:common:App\",\"sourceId\":\"$application\"\},"
							}
							if {$appservice != ""} {
								append appiqvirtual "\{\"sourceKind\":\"ap:bigip:iApp\",\"sourceId\":\"$appservice\"\},"
							}
							if {$tier != ""} {
								append appiqvirtual "\{\"sourceKind\":\"ap:common:AppComponent\",\"sourceId\":\"$tenant-$application-$tier\"\},"
							}							
							set appiqvirtual [string trimright $appiqvirtual ","]
							append appiqvirtual "\]"

						}
						append appiqvirtual ",\"description\":\"$description\",\"ip\":\"$ip\",\"port\":\"$port\",\"protocol\":\"$protocol\",\"mask\":\"$mask\""

						lappend appiq_apps $application
						lappend appiq_tenants $tenant
						lappend appiq_iapps $appservice
						set application2tenant($application) $tenant
						set tenantapplicationtier2tier($tenant-$application-$tier) $tier
					}
				} else {
					set row "\"devicegroup\":\"$devicegroup\",\"virtual_name\":\"$virtual_name\",\"description\":\"$description\",\"appComponent\":\"$tier\",\"iapp_name\":\"$appservice\",\"ip\":\"$ip\",\"port\":\"$port\",\"protocol\":\"$protocol\",\"app\":\"$application\",\"mask\":\"$mask\",\"tenant\":\"$tenant\",\"facility\":\"$facility\""
					puts $infile "$beginningdata_running$bordata\{\"time\":$date$index,\"host\":\"$hostname\",\"source\":\"bigip.objectmodel.virtual\",\"sourcetype\":\"f5:bigip:config:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
					set beginningdata_running $beginningdata					
				}


				#set the array lookup for stats
				set vip2tenant($virtual_name) $tenant
				set vip2application($virtual_name) $application
				set vip2tier($virtual_name) $tier


				if {$applicationdependencies != "" && $format != "F5 Analytics"}{ 
					set applicationdependencies [split $applicationdependencies ","]
					foreach applicationdependency $applicationdependencies {
						set applicationdependency [split $applicationdependency "|"]
						switch [llength $applicationdependency] {
							1 	{
									set row "\"devicegroup\":\"$devicegroup\",\"tenant\":\"$tenant\",\"facility\":\"$facility\",\"virtual_name\":\"$virtual_name\",\"app\":\"$application\",\"appComponent\":\"$tier\",\"dependency_type\":\"app\",\"dependency_tenant\":\"$tenant\",\"dependency_name\":\"[lindex $applicationdependency 0]\""
									puts $infile "$beginningdata_running$bordata\{\"time\":$date$index,\"host\":\"$hostname\",\"source\":\"bigip.objectmodel.virtual.dependencies\",\"sourcetype\":\"f5:bigip:config:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
									set beginningdata_running $beginningdata
								}
							2	{
									if {[string tolower [lindex $applicationdependency 0]] == "component" } {
										set row "\"devicegroup\":\"$devicegroup\",\"tenant\":\"$tenant\",\"facility\":\"$facility\",\"virtual_name\":\"$virtual_name\",\"app\":\"$application\",\"appComponent\":\"$tier\",\"dependency_type\":\"appComponent\",\"dependency_tenant\":\"$tenant\",\"dependency_name\":\"[lindex $applicationdependency 1]\""
										puts $infile "$beginningdata_running$bordata\{\"time\":$date$index,\"host\":\"$hostname\",\"source\":\"bigip.objectmodel.virtual.dependencies\",\"sourcetype\":\"f5:bigip:config:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
										set beginningdata_running $beginningdata

									} else {
										set row "\"devicegroup\":\"$devicegroup\",\"tenant\":\"$tenant\",\"facility\":\"$facility\",\"virtual_name\":\"$virtual_name\",\"app\":\"$application\",\"appComponent\":\"$tier\",\"dependency_type\":\"app\",\"dependency_tenant\":\"[lindex $applicationdependency 0]\",\"dependency_name\":\"[lindex $applicationdependency 1]\""
										puts $infile "$beginningdata_running$bordata\{\"time\":$date$index,\"host\":\"$hostname\",\"source\":\"bigip.objectmodel.virtual.dependencies\",\"sourcetype\":\"f5:bigip:config:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
										set beginningdata_running $beginningdata
									}
								}
						}
					}
				}

				if {$rules != ""}{ 
					set rules [split $rules " "]
					foreach rule $rules {
						if {$rule != "" } { 
							set rule "/$rule"
							lappend irules $rule

							
							if {$format == "F5 Analytics" } {
								if {$doconfigpush == "Yes"} {
									##APP-IQ Format
									append  appiqvirtual_outedges "\{\"targetKind\":\"ap:bigip:iRule\",\"targetId\":\"$rule\"\},"
								}
							} else {
								set row "\"devicegroup\":\"$devicegroup\",\"tenant\":\"$tenant\",\"appComponent\":\"$tier\",\"facility\":\"$facility\",\"app\":\"$application\",\"virtual_name\":\"$virtual_name\",\"rule_name\":\"$rule\""
								puts $infile "$beginningdata_running$bordata\{\"time\":$date$index,\"host\":\"$hostname\",\"source\":\"bigip.objectmodel.virtual.rules\",\"sourcetype\":\"f5:bigip:config:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
								set beginningdata_running $beginningdata							
							}
							
							
						}

					}

				}

				if {$profiles != ""}{ 
					set profile_id 0
					foreach profile $profiles {
						set profiledata [lindex $profiles $profile_id]
						set profile "/[tmsh::get_name $profile]"	

						set profile_id [expr $profile_id + 1]
						if {$profile != "" } { 
							lappend appiq_profiles $profile

							
							if {$format == "F5 Analytics" } {
								if {$doconfigpush == "Yes"} {
									##APP-IQ Format
									append  appiqvirtual_outedges "\{\"targetKind\":\"ap:bigip:Profile\",\"targetId\":\"$profile\"\},"
								}
							} else {
								set row "\"devicegroup\":\"$devicegroup\",\"tenant\":\"$tenant\",\"appComponent\":\"$tier\",\"facility\":\"$facility\",\"app\":\"$application\",\"virtual_name\":\"$virtual_name\",\"profile_name\":\"$profile\",\"profile_type\":\"profile\""
								puts $infile "$beginningdata_running$bordata\{\"time\":$date$index,\"host\":\"$hostname\",\"source\":\"bigip.objectmodel.virtual.profiles\",\"sourcetype\":\"f5:bigip:config:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
								set beginningdata_running $beginningdata							
							}
							
						}

					}
					
					
					
				}
				
				if {$perrequest != ""}{ 
					set perrequest "/$perrequest"
					

					if {$format == "F5 Analytics" } {
						if {$doconfigpush == "Yes"} {
							##APP-IQ Format
							lappend appiq_perrequestprofiles $perrequest
							append  appiqvirtual_outedges "\{\"targetKind\":\"ap:bigip:PerRequestProfile\",\"targetId\":\"$perrequest\"\},"					
						}
					} else {
						set row "\"devicegroup\":\"$devicegroup\",\"tenant\":\"$tenant\",\"appComponent\":\"$tier\",\"facility\":\"$facility\",\"app\":\"$application\",\"virtual_name\":\"$virtual_name\",\"profile_name\":\"$perrequest\",\"profile_type\":\"per_request\""
						puts $infile "$beginningdata_running$bordata\{\"time\":$date$index,\"host\":\"$hostname\",\"source\":\"bigip.objectmodel.virtual.profiles\",\"sourcetype\":\"f5:bigip:config:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
						set beginningdata_running $beginningdata					
					}
					
					#list policy objects list apm policy access-policy 
					
					set apmpolicy_list ""
					catch {set apmpolicy_list [tmsh::get_config apm policy access-policy $perrequest]}
					foreach policyline $apmpolicy_list {
						set items ""
						catch {set items [tmsh::get_field_value $policyline "items"]}
						foreach item $items {
							set item "/[lindex [split $item " "] 1]"
							set policy_items ""
							catch {set policy_items [tmsh::get_config apm policy policy-item $item]}
							foreach policy_item $policy_items {
								set agents ""
								catch {set agents [tmsh::get_field_value $policy_item "agents"]}	
								foreach agent $agents {
									set type ""
									catch {set type [tmsh::get_field_value $agent "type"]}
									if {$type == "url-filter-lookup"} {
										set agent "/[tmsh::get_name $agent]"
										set urlfilters ""
										catch {set urlfilters [tmsh::get_config apm policy agent url-filter-lookup $agent]}	
										foreach urlfilter $urlfilters {
											set urlfilter_name ""
											catch {set urlfilter_name "/[tmsh::get_field_value $urlfilter "filter-name"]"}	
											if {$urlfilter_name != ""}{ 
												
												if {$format == "F5 Analytics" } {
													if {$doconfigpush == "Yes"} {
														##APP-IQ Format
														lappend appiq_urlfilters $urlfilter_name
														append  appiqvirtual_outedges "\{\"targetKind\":\"ap:bigip:UrlFilter\",\"targetId\":\"$urlfilter_name\"\},"												
													}
												} else {
													set row "\"devicegroup\":\"$devicegroup\",\"tenant\":\"$tenant\",\"appComponent\":\"$tier\",\"facility\":\"$facility\",\"app\":\"$application\",\"virtual_name\":\"$virtual_name\",\"profile_name\":\"$urlfilter_name\",\"profile_type\":\"url_filter\""
													puts $infile "$beginningdata_running$bordata\{\"time\":$date$index,\"host\":\"$hostname\",\"source\":\"bigip.objectmodel.virtual.profiles\",\"sourcetype\":\"f5:bigip:config:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
													set beginningdata_running $beginningdata													
												}
											}
										}
										
									}
								}
							}

						}
					}	
				}
				
				

				if {$pool != ""} {
					set pool "/$pool"

					if {$format == "F5 Analytics" } {
						if {$doconfigpush == "Yes"} {
							##APP-IQ Format
							append  appiqvirtual_outedges "\{\"targetKind\":\"ap:bigip:Pool\",\"targetId\":\"$pool\"\},"					
						}
					} else {
						set row "\"devicegroup\":\"$devicegroup\",\"tenant\":\"$tenant\",\"appComponent\":\"$tier\",\"facility\":\"$facility\",\"app\":\"$application\",\"virtual_name\":\"$virtual_name\",\"pool_name\":\"$pool\""
						puts $infile "$beginningdata_running$bordata\{\"time\":$date$index,\"host\":\"$hostname\",\"source\":\"bigip.objectmodel.virtual.pools\",\"sourcetype\":\"f5:bigip:config:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
						set beginningdata_running $beginningdata					
					}
					
				}

				
				if {$format == "F5 Analytics" } {
					if {$doconfigpush == "Yes"} {
						##APP-IQ Format
						set appiqvirtual_outedges [string trimright $appiqvirtual_outedges ","]
						if {$appiqvirtual_outedges != ""} {
							set appiqvirtual_outedges ",\"outEdges\":\[$appiqvirtual_outedges\]"
						}	

						set appiqvirtual "$appiqvirtual$appiqvirtual_outedges\}"
						puts $infile_config $beginningdata_running_config$appiqvirtual
						set beginningdata_running_config $beginningdata
					}
				} else {
					if {[file size "$filename$currentfile"] > $maxfilesize} {
						#file too large create new
						set stat_bytes_transfered [expr $stat_bytes_transfered + [file size "$filename$currentfile"]]
						set currentfile [expr $currentfile + 1]
						if {$eofdata != "" } {puts $infile $eofdata}
						close $infile
						set infile [open "$filename$currentfile" "w" "0644"]
						if {$bofdata != "" } {puts $infile $bofdata}
						set beginningdata_running ""
					}					
				}
				

				set virtual_id [expr $virtual_id + 1]
			}	


			#search irules for pools and responds
			set irules [lsort -unique $irules]
			if {$irulesearch == "Yes"}{
				foreach rule $irules {	
					set iruleconfig ""
					catch {set iruleconfig [tmsh::get_config ltm rule $rule]}
					set iruleconfig [split $iruleconfig "\n"]
					
					if {$format == "F5 Analytics" } {
						if {$doconfigpush == "Yes"} {
							##APP-IQ Format
							set appiqirule "\{\"kind\":\"ap:bigip:iRule\",\"id\":\"$rule\""
							set appiqirule_outedges ""
						}
					}
					
					foreach iruleconfigline $iruleconfig {
						set pool ""
						set context ""
						set istat ""
						regexp {[ |\t]+pool[ |\t]+(\S+)} $iruleconfigline junk pool
						regexp {;#.*context: +["“”]([^"“”]*)"} $iruleconfigline junk context
						regexp {;#.*istat: +["“”]([^"“”]*)"} $iruleconfigline junk istat
						

						
						
						if {$pool != ""} {
							if {![string match "*/*" $pool]} {set pool "/Common/$pool"}

							if {$format == "F5 Analytics" } {
								if {$doconfigpush == "Yes"} {
									##APP-IQ Format
									append  appiqirule_outedges "\{\"targetKind\":\"ap:bigip:Pool\",\"targetId\":\"$pool\",\"context\":\"$context\",\"istat_name\":\"$istat\"\},"
								}
							} else {
								set row "\"devicegroup\":\"$devicegroup\",\"facility\":\"$facility\",\"rule_name\":\"$rule\",\"pool_name\":\"$pool\",\"context\":\"$context\",\"istat_name\":\"$istat\""
								puts $infile "$beginningdata_running$bordata\{\"time\":$date$rbac_shared_index,\"host\":\"$hostname\",\"source\":\"bigip.objectmodel.rule.pools\",\"sourcetype\":\"f5:bigip:config:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
								set beginningdata_running $beginningdata	
							}
							

						} else {
							if {$iruleconfigline contains "::respond" && ($context != "" || $istat != "") } {
								if {$format != "F5 Analytics" } {
									set row "\"devicegroup\":\"$devicegroup\",\"facility\":\"$facility\",\"rule_name\":\"$rule\",\"context\":\"$context\",\"istat_name\":\"$istat\""
									puts $infile "$beginningdata_running$bordata\{\"time\":$date$rbac_shared_index,\"host\":\"$hostname\",\"source\":\"bigip.objectmodel.rule.respond\",\"sourcetype\":\"f5:bigip:config:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
									set beginningdata_running $beginningdata
								}
							}
						}

					}
					
					if {$format == "F5 Analytics" } {
						if {$doconfigpush == "Yes"} {
							##APP-IQ Format
							set appiqirule_outedges [string trimright $appiqirule_outedges ","]
							if {$appiqirule_outedges != ""} {
								set appiqirule_outedges ",\"outEdges\":\[$appiqirule_outedges\]"
							}	

							set appiqirule "$appiqirule$appiqirule_outedges\}"
							puts $infile_config $beginningdata_running_config$appiqirule
							set beginningdata_running_config $beginningdata
						}
					} else {


						if {[file size "$filename$currentfile"] > $maxfilesize} {
							#file too large create new
							set stat_bytes_transfered [expr $stat_bytes_transfered + [file size "$filename$currentfile"]]
							set currentfile [expr $currentfile + 1]
							if {$eofdata != "" } {puts $infile $eofdata}
							close $infile
							set infile [open "$filename$currentfile" "w" "0644"]
							if {$bofdata != "" } {puts $infile $bofdata}
							set beginningdata_running ""
						}
					}
				}
			} else {
				if {$format == "F5 Analytics" && $doconfigpush == "Yes"} {
					##APP-IQ Format
					foreach rule $irules {
						puts $infile_config "$beginningdata_running_config\{\"kind\":\"ap:bigip:iRule\",\"id\":\"$rule\"\}"
						set beginningdata_running_config $beginningdata

					}
				}
			}
			
			
			###let's check the certs for expiration if we have been asked to
			
			if {$docertcheck == "Yes"} {
				#Certificate Expiration Dates
				set clientprofile_list ""
				set clientprofile_id 0
				set certs ""
				catch {set clientprofile_list [tmsh::get_config ltm profile client-ssl recursive]}
				foreach clientprofile $clientprofile_list {
					set profiledata [lindex $clientprofile_list $clientprofile_id]
					set profile_name "/[tmsh::get_name $clientprofile]"
					set cert_name ""
					catch {set cert_name "/[tmsh::get_field_value $profiledata "cert"]"}
					lappend certs $cert_name
					

					if {$format == "F5 Analytics" } {
						if {$doconfigpush == "Yes"} {
							##APP-IQ Format
							puts $infile_config "$beginningdata_running_config\{\"kind\":\"ap:bigip:Profile\",\"id\":\"$profile_name\",\"outEdges\":\[\{\"targetKind\":\"ap:common:Cert\",\"targetId\":\"$cert_name\"\}\]\}"
							set beginningdata_running_config $beginningdata
							lappend appiq_processedprofiles $profile_name
						}
					} else {
						set row "\"devicegroup\":\"$devicegroup\",\"facility\":\"$facility\",\"profile_name\":\"$profile_name\",\"profile_type\":\"client-ssl\",\"cert_name\":\"$cert_name\""
						puts $infile "$beginningdata_running$bordata\{\"time\":$date$rbac_shared_index,\"host\":\"$hostname\",\"source\":\"bigip.objectmodel.profile\",\"sourcetype\":\"f5:bigip:config:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
						set beginningdata_running $beginningdata						

						if {[file size "$filename$currentfile"] > $maxfilesize} {
							#file too large create new
							set stat_bytes_transfered [expr $stat_bytes_transfered + [file size "$filename$currentfile"]]
							set currentfile [expr $currentfile + 1]
							if {$eofdata != "" } {puts $infile $eofdata}
							close $infile
							set infile [open "$filename$currentfile" "w" "0644"]
							if {$bofdata != "" } {puts $infile $bofdata}
							set beginningdata_running ""
						}
					}
					
					set clientprofile_id [expr $clientprofile_id + 1]	
				}
				set certs [lsort -unique $certs]
				foreach cert $certs {
					set certinfo ""
					catch {set certinfo [tmsh::get_config sys file ssl-cert $cert]}
					set certdata [lindex $certinfo 0]
					set cert_subject ""
					set cert_expiration_date ""
					catch {set cert_subject [tmsh::get_field_value $certdata "subject"]}
					catch {set cert_expiration_date [tmsh::get_field_value $certdata "expiration-date"]}


					
					if {$format == "F5 Analytics" } {
						if {$doconfigpush == "Yes"} {
							##APP-IQ Format
							puts $infile_config "$beginningdata_running_config\{\"kind\":\"ap:common:Cert\",\"id\":\"$cert\",\"cert_subject\":\"$cert_subject\",\"cert_expiration_date\":\"$cert_expiration_date\"\}"					
							set beginningdata_running_config $beginningdata
						}
					} else {
						set row "\"devicegroup\":\"$devicegroup\",\"facility\":\"$facility\",\"cert_name\":\"$cert\",\"cert_subject\":\"$cert_subject\",\"cert_expiration_date\":\"$cert_expiration_date\""
						puts $infile "$beginningdata_running$bordata\{\"time\":$date$rbac_shared_index,\"host\":\"$hostname\",\"source\":\"bigip.objectmodel.cert\",\"sourcetype\":\"f5:bigip:config:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
						set beginningdata_running $beginningdata					

						if {[file size "$filename$currentfile"] > $maxfilesize} {
							#file too large create new
							set stat_bytes_transfered [expr $stat_bytes_transfered + [file size "$filename$currentfile"]]
							set currentfile [expr $currentfile + 1]
							if {$eofdata != "" } {puts $infile $eofdata}
							close $infile
							set infile [open "$filename$currentfile" "w" "0644"]
							if {$bofdata != "" } {puts $infile $bofdata}
							set beginningdata_running ""
						}	
					}
				}
				
			}
			


			###now let's get GTM object model

			set irules ""
			set wideip_id 0
			set wideip_list ""
			catch {set wideip_list [tmsh::get_config gtm wideip recursive]}
			foreach wideip $wideip_list {
				set wideipdata [lindex $wideip_list $wideip_id]
				set wideip_name [tmsh::get_name $wideip]

				regexp {(.*)/(.*)} $wideip_name junk partition wideip_name			


				#softlanding
				set application ""
				set applicationdone ""
				set description ""
				set rules ""
				set appservice ""
				set pools ""
				set partition "/$partition"
				set aliases ""
				set lastresort ""
				set index $rbac_default_index
				set tenant $tenantdefault
				set tenantdone ""
				set virtual_name ""
				set tier ""
				set tierdone ""	
				set applicationdependencies ""
				set applicationdependenciesdone ""
				set appiqwideip_outedges ""

				catch {set description [tmsh::get_field_value $wideipdata "description"]}
				catch {set appservice [tmsh::get_field_value $wideipdata "app-service"]}
				catch {set rules [tmsh::get_field_value $wideipdata "rules"]}
				catch {set pools [tmsh::get_field_value $wideipdata "pools"]}
				catch {set aliases [tmsh::get_field_value $wideipdata "aliases"]}
				catch {set lastresort [tmsh::get_field_value $wideipdata "last-resort-pool"]}

				set description [string trimright [string trimleft $description "\""] "\""]
				set wideip_type [lindex $wideip 2] 

				###app mapping
				foreach key [lsort -dictionary [array names application_mapping]] {
					set map [split $application_mapping($key) "~"]				
					set match ""; set m1 ""; set m2 ""; set m3 ""; set m4 ""; set m5 ""; set m6 ""; set m7 ""; set m8 ""; set m9 ""; set m10 ""; set m11 ""; set m12 ""
					regexp [lindex $map 2] [set [lindex $map 1]] match m1 m2 m3 m4 m5 m6 m7 m8 m9 m10 m11 m12
					set data "$m1$m2$m3$m4$m5$m6$m7$m8$m9$m10$m11$m12"
					set type [lindex $map 3]

					if {[lindex $map 0] == "Tenant Name" && $tenantdone != "yes"} {
						if {$type == "Map" && $data != ""} {
							set tenant [lindex $map 5]$data
							set tenantdone "yes"	
						}
						if {$type == "Append" && $data != ""} {
							append tenant [lindex $map 5]$data
						}
						if {$type == "Ignore" && $match != ""} {
							set tenant "ignore"
							set tenantdone "yes"						
						}
						if {$type == "Direct Mapping" && $match != ""} {
							set tenant [lindex $map 4]
							set tenantdone "yes"						
						}
						if {$type == "Direct Mapping Append" && $match != ""} {
							set tenant [lindex $map 5][lindex $map 4]						
						}					
					}
					if {[lindex $map 0] == "App Name" && $applicationdone != "yes"} {
						if {$type == "Map" && $data != ""} {
							set application [lindex $map 5]$data
							set applicationdone "yes"
						}
						if {$type == "Append" && $data != "" } {
							append application [lindex $map 5]$data
						}
						if {$type == "Ignore" && $match != ""} {
							set application "ignore"
							set applicationdone "yes"						
						}
						if {$type == "Direct Mapping" && $match != ""} {
							set application [lindex $map 4]
							set applicationdone "yes"						
						}	
						if {$type == "Direct Mapping Append" && $match != ""} {
							append application [lindex $map 5][lindex $map 4]						
						}					
					}
					if {[lindex $map 0] == "App Component Name" && $tierdone != "yes"} {
						if {$type == "Map" && $data != ""} {
							set tier [lindex $map 5]$data
							set tierdone "yes"
						}
						if {$type == "Append" && $data != "" } {
							append tier [lindex $map 5]$data
						}
						if {$type == "Ignore" && $match != ""} {
							set tier "ignore"
							set tierdone "yes"						
						}
						if {$type == "Direct Mapping" && $match != ""} {
							set tier [lindex $map 4]
							set tierdone "yes"						
						}	
						if {$type == "Direct Mapping Append" && $match != ""} {
							append tier [lindex $map 5][lindex $map 4]						
						}					
					}
					if {[lindex $map 0] == "App Dependencies" && $applicationdependenciesdone != "yes"} {
						if {$type == "Map" && $data != ""} {
							set applicationdependencies [lindex $map 5]$data
							set applicationdependenciesdone "yes"
						}
						if {$type == "Append" && $data != "" } {
							append applicationdependencies [lindex $map 5]$data
						}
						if {$type == "Ignore" && $match != ""} {
							set applicationdependencies "ignore"
							set applicationdependenciesdone "yes"						
						}
						if {$type == "Direct Mapping" && $match != ""} {
							set applicationdependencies [lindex $map 4]
							set applicationdependenciesdone "yes"						
						}	
						if {$type == "Direct Mapping Append" && $match != ""} {
							append applicationdependencies [lindex $map 5][lindex $map 4]						
						}					
					}				

				}	
				set fqdn $wideip_name
				set wideip_name "$partition/$wideip_name"
				if {$tenantdone == "yes" && $rbac == "Yes"} {
					set index ",\"index\":\"$rbac_prefix$tenant\""
				} 				


				
				if {$format == "F5 Analytics" } {
					if {$doconfigpush == "Yes"} {
						##APP-IQ Format

						set appiqwideip "\{\"kind\":\"ap:bigip:WideIP-$wideip_type\",\"id\":\"$wideip_name\""

						if {$tier != "" || $application != "" || $appservice != ""} {
							append appiqwideip ",\"inEdges\":\["
							if {$application != ""} {
								append appiqwideip "\{\"sourceKind\":\"ap:common:App\",\"sourceId\":\"$application\"\},"
							}
							if {$appservice != ""} {
								append appiqwideip "\{\"sourceKind\":\"ap:bigip:iApp\",\"sourceId\":\"$appservice\"\},"
							}
							if {$tier != ""} {
								append appiqwideip "\{\"sourceKind\":\"ap:common:AppComponent\",\"sourceId\":\"$tenant-$application-$tier\"\},"
							}							
							set appiqwideip [string trimright $appiqwideip ","]
							append appiqwideip "\]"

						}
						append appiqwideip ",\"description\":\"$description\",\"type\":\"$wideip_type\",\"fqdn\":\"$fqdn\",\"AppComponent\":\"$tier\""

						append appiqwideip_outedges "\{\"targetKind\":\"ap:bigip:FQDN-$wideip_type\",\"targetId\":\"$fqdn\"\},"

						puts $infile_config "$beginningdata_running_config\{\"kind\":\"ap:bigip:FQDN-$wideip_type\",\"id\":\"$fqdn\"\}"
						set beginningdata_running_config $beginningdata



						lappend appiq_apps $application
						lappend appiq_tenants $tenant
						lappend appiq_iapps $appservice
						set application2tenant($application) $tenant
						set tenantapplicationtier2tier($tenant-$application-$tier) $tier
					}
				} else {
				
					set row "\"devicegroup\":\"$devicegroup\",\"facility\":\"$facility\",\"wideip_name\":\"$wideip_name\",\"app\":\"$application\",\"description\":\"$description\",\"appComponent\":\"$tier\",\"iapp_name\":\"$appservice\",\"type\":\"$wideip_type\",\"fqdn\":\"$fqdn\",\"tenant\":\"$tenant\""
					puts $infile "$beginningdata_running$bordata\{\"time\":$date$index,\"host\":\"$hostname\",\"source\":\"bigip.objectmodel.wideip\",\"sourcetype\":\"f5:bigip:config:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
					set beginningdata_running $beginningdata

					set row "\"devicegroup\":\"$devicegroup\",\"facility\":\"$facility\",\"app\":\"$application\",\"tenant\":\"$tenant\",\"appComponent\":\"$tier\",\"wideip_name\":\"$wideip_name\",\"type\":\"$wideip_type\",\"fqdn\":\"$fqdn\",\"main\":\"1\""
					puts $infile "$beginningdata_running$bordata\{\"time\":$date$index,\"host\":\"$hostname\",\"source\":\"bigip.objectmodel.wideip.fqdns\",\"sourcetype\":\"f5:bigip:config:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
					set beginningdata_running $beginningdata
								
				}

				set wideip2tenant($wideip_name) $tenant
				set wideip2application($wideip_name) $application
				set wideip2tier($wideip_name) $tier

				if {$applicationdependencies != "" && $format != "F5 Analytics"}{ 
					set applicationdependencies [split $applicationdependencies ","]
					foreach applicationdependency $applicationdependencies {
						set applicationdependency [split $applicationdependency "|"]
						switch [llength $applicationdependency] {
							1 	{
									set row "\"devicegroup\":\"$devicegroup\",\"facility\":\"$facility\",\"wideip_name\":\"$wideip_name\",\"app\":\"$application\",\"description\":\"$description\",\"appComponent\":\"$tier\",\"type\":\"$wideip_type\",\"tenant\":\"$tenant\",\"dependency_type\":\"app\",\"dependency_tenant\":\"$tenant\",\"dependency_name\":\"[lindex $applicationdependency 0]\""
									puts $infile "$beginningdata_running$bordata\{\"time\":$date$index,\"host\":\"$hostname\",\"source\":\"bigip.objectmodel.wideip.dependencies\",\"sourcetype\":\"f5:bigip:config:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
									set beginningdata_running $beginningdata
								}
							2	{
									if {[string tolower [lindex $applicationdependency 0]] == "component" } {
										set row "\"devicegroup\":\"$devicegroup\",\"facility\":\"$facility\",\"wideip_name\":\"$wideip_name\",\"app\":\"$application\",\"description\":\"$description\",\"appComponent\":\"$tier\",\"type\":\"$wideip_type\",\"tenant\":\"$tenant\",\"dependency_type\":\"appComponent\",\"dependency_tenant\":\"$tenant\",\"dependency_name\":\"[lindex $applicationdependency 0]\""
										puts $infile "$beginningdata_running$bordata\{\"time\":$date$index,\"host\":\"$hostname\",\"source\":\"bigip.objectmodel.wideip.dependencies\",\"sourcetype\":\"f5:bigip:config:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
										set beginningdata_running $beginningdata

									} else {
										set row "\"devicegroup\":\"$devicegroup\",\"facility\":\"$facility\",\"wideip_name\":\"$wideip_name\",\"app\":\"$application\",\"description\":\"$description\",\"appComponent\":\"$tier\",\"type\":\"$wideip_type\",\"tenant\":\"$tenant\",\"dependency_type\":\"app\",\"dependency_tenant\":\"[lindex $applicationdependency 0]\",\"dependency_name\":\"[lindex $applicationdependency 1]\""
										puts $infile "$beginningdata_running$bordata\{\"time\":$date$index,\"host\":\"$hostname\",\"source\":\"bigip.objectmodel.wideip.dependencies\",\"sourcetype\":\"f5:bigip:config:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
										set beginningdata_running $beginningdata
									}
								}
						}
					}
				}


				if {$rules != ""}{ 
					set rules [split $rules " "]
					foreach rule $rules {
						if {$rule != "" } { 
							set rule "/$rule"
							lappend irules $rule

							
							if {$format == "F5 Analytics" } {
								if {$doconfigpush == "Yes"} {
									##APP-IQ Format
									append  appiqwideip_outedges "\{\"targetKind\":\"ap:bigip:GTMiRule\",\"targetId\":\"$rule\"\},"					
								}
							} else {
								set row "\"devicegroup\":\"$devicegroup\",\"facility\":\"$facility\",\"app\":\"$application\",\"tenant\":\"$tenant\",\"appComponent\":\"$tier\",\"wideip_name\":\"$wideip_name\",\"type\":\"$wideip_type\",\"gtmrule_name\":\"$rule\""
								puts $infile "$beginningdata_running$bordata\{\"time\":$date$index,\"host\":\"$hostname\",\"source\":\"bigip.objectmodel.wideip.gtmrules\",\"sourcetype\":\"f5:bigip:config:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
								set beginningdata_running $beginningdata	
							}
						}

					}

				}
				if {$lastresort != ""}{ 
					set pool_name [lindex $lastresort 1]

					
					if {$format == "F5 Analytics" } {
						if {$doconfigpush == "Yes"} {
							##APP-IQ Format
							append  appiqwideip_outedges "\{\"targetKind\":\"ap:bigip:GTMPool-$wideip_type\",\"targetId\":\"$pool_name\",\"lastResort\":\"true\"\},"
						}
					} else {
						set row "\"devicegroup\":\"$devicegroup\",\"facility\":\"$facility\",\"app\":\"$application\",\"appComponent\":\"$tier\",\"tenant\":\"$tenant\",\"wideip_name\":\"$wideip_name\",\"type\":\"$wideip_type\",\"gtmpool_name\":\"$pool_name\",\"pool_order\":\"1000000000\",\"last_resort\":\"1\""
						puts $infile "$beginningdata_running$bordata\{\"time\":$date$index,\"host\":\"$hostname\",\"source\":\"bigip.objectmodel.wideip.gtmpools\",\"sourcetype\":\"f5:bigip:config:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
						set beginningdata_running $beginningdata					
					}
				}

				if {$aliases != ""}{ 
					set aliases [split $aliases " "]
					foreach alias $aliases {
						if {$alias != "" } { 
							
							if {$format == "F5 Analytics" } {
								if {$doconfigpush == "Yes"} {
									##APP-IQ Format
									append appiqwideip_outedges "\{\"targetKind\":\"ap:bigip:FQDN-$wideip_type\",\"targetId\":\"$alias\"\},"
									puts $infile_config "$beginningdata_running_config\{\"kind\":\"ap:bigip:FQDN-$wideip_type\",\"id\":\"$alias\"\}"
									set beginningdata_running_config $beginningdata
								}
							} else {
								set row "\"devicegroup\":\"$devicegroup\",\"facility\":\"$facility\",\"app\":\"$application\",\"tenant\":\"$tenant\",\"appComponent\":\"$tier\",\"wideip_name\":\"$wideip_name\",\"type\":\"$wideip_type\",\"fqdn\":\"$alias\",\"main\":\"0\""
								puts $infile "$beginningdata_running$bordata\{\"time\":$date$index,\"host\":\"$hostname\",\"source\":\"bigip.objectmodel.wideip.fqdns\",\"sourcetype\":\"f5:bigip:config:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
								set beginningdata_running $beginningdata							
							}
						}

					}

				}


				if {$pools != ""}{ 			
					set pool_id 0
					foreach pool $pools {
						set pool_details [lindex $pools $pool_id]
						set pool_name "/[tmsh::get_name $pool]"		
						set order [tmsh::get_field_value $pool "order"]
						if {$pool_name != "" } { 

							if {$format == "F5 Analytics" } {
								if {$doconfigpush == "Yes"} {
									##APP-IQ Format
									append  appiqwideip_outedges "\{\"targetKind\":\"ap:bigip:GTMPool-$wideip_type\",\"targetId\":\"$pool_name\",\"pool_order\":\"$order\"\},"	
								}
							} else {
								set row "\"devicegroup\":\"$devicegroup\",\"facility\":\"$facility\",\"app\":\"$application\",\"appComponent\":\"$tier\",\"tenant\":\"$tenant\",\"wideip_name\":\"$wideip_name\",\"type\":\"$wideip_type\",\"gtmpool_name\":\"$pool_name\",\"pool_order\":\"$order\",\"last_resort\":\"0\""
								puts $infile "$beginningdata_running$bordata\{\"time\":$date$index,\"host\":\"$hostname\",\"source\":\"bigip.objectmodel.wideip.gtmpools\",\"sourcetype\":\"f5:bigip:config:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
								set beginningdata_running $beginningdata							
							}
						}
						set pool_id [expr $pool_id +1]
					}

				}


				
				if {$format == "F5 Analytics" } {
					if {$doconfigpush == "Yes"} {
						##APP-IQ Format	
						set appiqwideip_outedges [string trimright $appiqwideip_outedges ","]
						if {$appiqwideip_outedges != ""} {
							set appiqwideip_outedges ",\"outEdges\":\[$appiqwideip_outedges\]"
						}	

						set appiqwideip "$appiqwideip$appiqwideip_outedges\}"
						puts $infile_config $beginningdata_running_config$appiqwideip				
						set beginningdata_running_config $beginningdata
					}
				} else {
					if {[file size "$filename$currentfile"] > $maxfilesize} {
						#file too large create new
						set stat_bytes_transfered [expr $stat_bytes_transfered + [file size "$filename$currentfile"]]
						set currentfile [expr $currentfile + 1]
						if {$eofdata != "" } {puts $infile $eofdata}
						close $infile
						set infile [open "$filename$currentfile" "w" "0644"]
						if {$bofdata != "" } {puts $infile $bofdata}
						set beginningdata_running ""
					}				
				}

				set wideip_id [expr $wideip_id + 1]
			}

			#search irules for pools and responds 
			set irules [lsort -unique $irules]
			if {$irulesearch == "Yes"}{
				foreach rule $irules {
					if {$format == "F5 Analytics" && $doconfigpush == "Yes"} {
						##APP-IQ Format
						set appiqirule "\{\"kind\":\"ap:bigip:GTMiRule\",\"id\":\"$rule\""
						set appiqirule_outedges ""
					}
					
					set iruleconfig ""
					catch {set iruleconfig [tmsh::get_config gtm rule $rule]}
					set iruleconfig [split $iruleconfig "\n"]
					foreach iruleconfigline $iruleconfig {
						set pool ""
						set context ""
						set istat ""
						regexp {[ |\t]+pool[ |\t]+(\S+)} $iruleconfigline junk pool
						regexp {;#.*context: +["“”]([^"“”]*)"} $iruleconfigline junk context
						regexp {;#.*istat: +["“”]([^"“”]*)"} $iruleconfigline junk istat
						if {$pool != ""} {

							if {$format == "F5 Analytics" } {
								if {$doconfigpush == "Yes"} {
									##APP-IQ Format
									append  appiqirule_outedges "\{\"targetKind\":\"ap:bigip:GTMPool-ALL\",\"targetId\":\"$pool\",\"context\":\"$context\",\"istat_name\":\"$istat\"\},"
								}
							} else {
								set row "\"devicegroup\":\"$devicegroup\",\"facility\":\"$facility\",\"gtmrule_name\":\"$rule\",\"gtmpool_name\":\"$pool\",\"context\":\"$context\",\"istat_name\":\"$istat\""
								puts $infile "$beginningdata_running$bordata\{\"time\":$date$rbac_shared_index,\"host\":\"$hostname\",\"source\":\"bigip.objectmodel.gtmrule.gtmpools\",\"sourcetype\":\"f5:bigip:config:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
								set beginningdata_running $beginningdata							
							}
						} else {
							if {$format != "F5 Analytics" } {
								if {$iruleconfigline contains "::answer" && ($context != "" || $istat != "") } {
									set row "\"devicegroup\":\"$devicegroup\",\"facility\":\"$facility\",\"gtmrule_name\":\"$rule\",\"context\":\"$context\",\"istat_name\":\"$istat\""
									puts $infile "$beginningdata_running$bordata\{\"time\":$date$rbac_shared_index,\"host\":\"$hostname\",\"source\":\"bigip.objectmodel.gtmrule.respond\",\"sourcetype\":\"f5:bigip:config:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
									set beginningdata_running $beginningdata
								}
							}
						}

					}


					if {$format == "F5 Analytics" } {
						if {$doconfigpush == "Yes"} {
							##APP-IQ Format
							set appiqirule_outedges [string trimright $appiqirule_outedges ","]
							if {$appiqirule_outedges != ""} {
								set appiqirule_outedges ",\"outEdges\":\[$appiqirule_outedges\]"
							}	

							set appiqirule "$appiqirule$appiqirule_outedges\}"
							puts $infile_config $beginningdata_running_config$appiqirule						
							set beginningdata_running_config $beginningdata
						}
					} else {
						if {[file size "$filename$currentfile"] > $maxfilesize} {
							#file too large create new
							set stat_bytes_transfered [expr $stat_bytes_transfered + [file size "$filename$currentfile"]]
							set currentfile [expr $currentfile + 1]
							if {$eofdata != "" } {puts $infile $eofdata}
							close $infile
							set infile [open "$filename$currentfile" "w" "0644"]
							if {$bofdata != "" } {puts $infile $bofdata}
							set beginningdata_running ""
						}					
					}
				}
			} else {
				if {$format == "F5 Analytics" && $doconfigpush == "Yes"} {
					##APP-IQ Format
					foreach rule $irules {
						puts $infile_config "$beginningdata_running_config\{\"kind\":\"ap:bigip:GTMiRule\",\"id\":\"$rule\"\}"
						set beginningdata_running_config $beginningdata
					
					}			
				}
			}

			###let's get the pools
			set gtmpool_id 0
			set gtmpool_list ""
			catch {set gtmpool_list [tmsh::get_config gtm pool recursive]}
			foreach gtmpool $gtmpool_list {
				set gtmpooldata [lindex $gtmpool_list $gtmpool_id]
				set gtmpool_name [tmsh::get_name $gtmpool]
				set appiqgtmpool_outedges ""

				#softlanding
				set members ""
				catch {set members [tmsh::get_field_value $gtmpooldata "members"]}
				set pool_type [lindex $gtmpool 2] 

				set gtmpool_name "/$gtmpool_name"
				if {$format == "F5 Analytics" && $doconfigpush == "Yes"} {
					##APP-IQ Format
					set appiqgtmpool "\{\"kind\":\"ap:bigip:GTMPool-$pool_type\",\"id\":\"$gtmpool_name\",\"type\":\"$pool_type\""
				}

				if {$members != "" } {
					foreach member $members {
						set order ""
						set dsc_name ""
						set virtual_name ""

						set virtual [tmsh::get_name $member]
						catch {set order [tmsh::get_field_value $member "member-order"]}
						regexp {\/(.*):(.*)} $virtual junk dsc_name virtual_name


						if {$format == "F5 Analytics" } {
							##APP-IQ Format
							append  appiqgtmpool_outedges "\{\"targetKind\":\"ap:bigip:Virtual\",\"targetId\":\"$virtual_name\",\"member_order\":\"$order\",\"DeviceGroup\":\"$dsc_name\"\},"							
						} else {
							set row "\"devicegroup\":\"$devicegroup\",\"facility\":\"$facility\",\"gtmpool_name\":\"$gtmpool_name\",\"type\":\"$pool_type\",\"member_order\":\"$order\",\"virtual_devicegroup\":\"$dsc_name\",\"virtual_name\":\"$virtual_name\""
							puts $infile "$beginningdata_running$bordata\{\"time\":$date$rbac_shared_index,\"host\":\"$hostname\",\"source\":\"bigip.objectmodel.gtmpool\",\"sourcetype\":\"f5:bigip:config:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
							set beginningdata_running $beginningdata						
						}


					}
				}
				


				if {$format == "F5 Analytics" } {
					if {$doconfigpush == "Yes"} {
						##APP-IQ Format	
						set appiqgtmpool_outedges [string trimright $appiqgtmpool_outedges ","]
						if {$appiqgtmpool_outedges != ""} {
							set appiqgtmpool_outedges ",\"outEdges\":\[$appiqgtmpool_outedges\]"
						}	
						set appiqgtmpool "$appiqgtmpool$appiqgtmpool_outedges\}"
						puts $infile_config $beginningdata_running_config$appiqgtmpool				
						set beginningdata_running_config $beginningdata
					}
				} else {
					if {[file size "$filename$currentfile"] > $maxfilesize} {
						#file too large create new
						set stat_bytes_transfered [expr $stat_bytes_transfered + [file size "$filename$currentfile"]]
						set currentfile [expr $currentfile + 1]
						if {$eofdata != "" } {puts $infile $eofdata}
						close $infile
						set infile [open "$filename$currentfile" "w" "0644"]
						if {$bofdata != "" } {puts $infile $bofdata}
						set beginningdata_running ""
					}				
				}

				set gtmpool_id [expr $gtmpool_id + 1]
			}
			
			if {$format == "F5 Analytics" && $doconfigpush == "Yes"} {
				##APP-IQ Format
				
				set appiq_apps [lsort -unique $appiq_apps]
				set appiq_tenants [lsort -unique $appiq_tenants]
				set appiq_iapps [lsort -unique $appiq_iapps]
				
				set appiq_profiles [lsort -unique $appiq_profiles]
				set appiq_perrequestprofiles [lsort -unique $appiq_perrequestprofiles]
				set appiq_urlfilters [lsort -unique $appiq_urlfilters]
				set appiq_processedprofiles [lsort -unique $appiq_processedprofiles]
				
				
				foreach app $appiq_apps {
					if {$app !=""}{
						set tenant ""
						catch {set tenant $application2tenant($app)}
						if {$tenant !=""} {
							puts $infile_config "$beginningdata_running_config\{\"kind\":\"ap:common:App\",\"id\":\"$app\",\"inEdges\":\[\{\"sourceKind\":\"ap:common:AppGroup\",\"sourceId\":\"$tenant\"\}\]\}"
							set beginningdata_running_config $beginningdata
							
						} else {
							puts $infile_config "$beginningdata_running_config\{\"kind\":\"ap:common:App\",\"id\":\"$app\"\}"
							set beginningdata_running_config $beginningdata
							
						}
					}
				}
				foreach tenant $appiq_tenants {
					if {$tenant !=""}{
						puts $infile_config "$beginningdata_running_config\{\"kind\":\"ap:common:AppGroup\",\"id\":\"$tenant\",\"inEdges\":\[\{\"sourceKind\":\"ap:common:DeviceGroup\",\"sourceId\":\"$devicegroup\"\},\{\"sourceKind\":\"ap:device:BIG-IP\",\"sourceId\":\"$hostname\"\}\]\}"
						set beginningdata_running_config $beginningdata
						
					}
					#add outedge
					#add inedge
				}
				foreach iapp $appiq_iapps {
					if {$iapp !=""}{
						puts $infile_config "$beginningdata_running_config\{\"kind\":\"ap:bigip:iApp\",\"id\":\"$iapp\"\}"
						set beginningdata_running_config $beginningdata
						
					}
				}
				foreach profile $appiq_perrequestprofiles {
					puts $infile_config "$beginningdata_running_config\{\"kind\":\"ap:bigip:PerRequestProfile\",\"id\":\"$profile\"\}"
					set beginningdata_running_config $beginningdata
					
				}
				foreach urlfilter $appiq_urlfilters {
					puts $infile_config "$beginningdata_running_config\{\"kind\":\"ap:bigip:UrlFilter\",\"id\":\"$urlfilter\"\}"
					set beginningdata_running_config $beginningdata

				}

				foreach profile $appiq_profiles {					
					if {[lsearch $appiq_processedprofiles $profile] ==-1} {
						puts $infile_config "$beginningdata_running_config\{\"kind\":\"ap:bigip:Profile\",\"id\":\"$profile\"\}"
						set beginningdata_running_config $beginningdata

					}
				}	
				foreach {key value} [array get tenantapplicationtier2tier] {
					if {$value != ""}{
						puts $infile_config "$beginningdata_running_config\{\"kind\":\"ap:common:AppComponent\",\"id\":\"$key\",\"name\":\"$value\"\}"
						set beginningdata_running_config $beginningdata
					}
				}				

				puts $infile_config "$beginningdata_running_config\{\"kind\":\"ap:common:DeviceGroup\",\"id\":\"$devicegroup\"\}"
				set beginningdata_running_config $beginningdata

				puts $infile_config "$beginningdata_running_config\{\"kind\":\"ap:device:BIG-IP\",\"id\":\"$hostname\",\"inEdges\":\[\{\"sourceKind\":\"ap:common:DeviceGroup\",\"sourceId\":\"$devicegroup\"\}\]\}"
				set beginningdata_running_config $beginningdata
			}
			
			
			
		}
		
		if {$pushtmstats == "Yes" }{
			###let's get data from TMStats
			
		

			foreach {tmcl_command key_column_number} [array get tmctl_commands] {
				if {$tmcl_command != ""} {
					set column_names {}				
					if {![catch {set output [exec /usr/bin/tmctl $tmcl_command -c]}]}{
						#split the output into a list
						regsub -all "\{\n" $output "" output ;#fix for awk process spitting out a new line in the tmstats table, seems to be 11.5.3 related bug
						set output [split $output "\n"] 
						set row_number 0
						if {[llength $output] > 1} { 					
							foreach outputline $output {
								if {$row_number == 0} {
									#this has our columns lets store this info
									set column_names [split $outputline ","]							
								} else {
									set ignore 0
									#this is a row of data we need to split the row
									set column_number 0
									set columns [split $outputline ","]
									set row ""


									#assign tenant, application, and tier
									set application ""
									set tier ""
									set tenant $tenantdefault
									set index ""
									if {$key_column_number >= 0}{
										set index $rbac_default_index
										catch {set application $vip2application([lindex $columns $key_column_number])}
										catch {set tier $vip2tier([lindex $columns $key_column_number])}
										catch {set tenant $vip2tenant([lindex $columns $key_column_number])}
										if {$rbac == "Yes"}{
											catch {set index ",\"index\":\"$rbac_prefix$vip2tenant([lindex $columns $key_column_number])\""}
											regsub -all "\\.| " $index "_" index
										}
									}
									if {$key_column_number == "-1"}{
										set index $rbac_system_index
									}
									if {$key_column_number == "-2"}{
										set index $rbac_shared_index
									}									
									






									#if we don't ignore this row

									if {$ignore != 1 } {
										foreach column $columns {
											set metric_name [lindex $column_names $column_number]
											regsub -all " |\\.|/" $metric_name "_" metric_name

											#value processing
											set value $column
											
											if { $metric_name == "ip_address" && $tmcl_command == "monitor_instance_stat" } {
												regsub -all "::ffff:" $value "" value
											}

											#IP HEX Mapping
											if { $metric_name == "addr" } {
												set hexroutedomain ""
												set hexip ""
												set hexip_1 ""
												set hexip_2 ""
												set hexip_3 ""
												set hexip_4 ""
												set hexipv6_1 ""
												set hexipv6_2 ""
												set hexipv6_3 ""
												set hexipv6_4 ""
												set hexipv6_5 ""
												set hexipv6_6 ""
												set hexipv6_7 ""
												set hexipv6_8 ""											

												regsub -all ":" $value "" value

												regexp {([[:xdigit:]]{32})([[:xdigit:]]{8})} $value junk hexip hexroutedomain
												regexp {FFFF([[:xdigit:]].)([[:xdigit:]].)([[:xdigit:]].)([[:xdigit:]].)} $hexip junk hexip_1 hexip_2 hexip_3 hexip_4	

												if { $hexip_1 != "" } {
													set value "[expr 0x$hexip_1].[expr 0x$hexip_2].[expr 0x$hexip_3].[expr 0x$hexip_4]"
												} else {
													regexp {([[:xdigit:]]{4})([[:xdigit:]]{4})([[:xdigit:]]{4})([[:xdigit:]]{4})([[:xdigit:]]{4})([[:xdigit:]]{4})([[:xdigit:]]{4})([[:xdigit:]]{4})} $hexip junk hexipv6_1 hexipv6_2 hexipv6_3 hexipv6_4 hexipv6_5 hexipv6_6 hexipv6_7 hexipv6_8
													set value "$hexipv6_1:$hexipv6_2:$hexipv6_3:$hexipv6_4:$hexipv6_5:$hexipv6_6:$hexipv6_7:$hexipv6_8"
												}
											}

											if {![string is integer $value] || $value == ""} {
												set value "\"$value\""
											}


											#should we ignore this stat/key?
											set metric_match $tmcl_command.[lindex $column_names $column_number]
											if {[lsearch $source_metrics_to_ignore $metric_match] ==-1} {
												append row "\"$metric_name\":$value,"
											}
											set column_number [expr $column_number + 1]
										}
										set row [string trimright $row ","]
										if {$row != ""} {
											puts $infile "$beginningdata_running$bordata\{\"time\":$date$index,\"host\":\"$hostname\",\"source\":\"bigip.tmstats.$tmcl_command\",\"sourcetype\":\"f5:bigip:stats:iapp:json\",$eventformat_start\"device_base_mac\":\"$device_base_mac\",\"devicegroup\":\"$devicegroup\",\"facility\":\"$facility\",\"app\":\"$application\",\"appComponent\":\"$tier\",\"tenant\":\"$tenant\",\"aggr_period\":\"$aggr_period\",$row$eventformat_end\}$eordata"
											set beginningdata_running $beginningdata
											if {[file size "$filename$currentfile"] > $maxfilesize} {
												#file too large create new
												set stat_bytes_transfered [expr $stat_bytes_transfered + [file size "$filename$currentfile"]]
												set currentfile [expr $currentfile + 1]
												if {$eofdata != "" } {puts $infile $eofdata}
												close $infile
												set infile [open "$filename$currentfile" "w" "0644"]
												if {$bofdata != "" } {puts $infile $bofdata}
												set beginningdata_running ""
											}
										}
									}

								}
								set row_number [expr $row_number + 1]
							}
						}
					}
				}
			}
		}
		
		if {$pushavr == "Yes" }{
			###now let's get data from AVR
			if {$mysqlpassword != ""}{
				foreach {avr_table_info avr_command} [array get avr_commands] {
					if {$avr_command != ""} {
						set avr_table_info [split $avr_table_info "|"]
						set key_column_number [lindex $avr_table_info 1]
						set avr_table [lindex $avr_table_info 0]
						set column_names {}

						set lastsentbuckets ""
						set key "${avr_table}_sentbuckets"
						catch {set lastsentbuckets $lastpollsettings($key)}
						set lastsentbuckets [split $lastsentbuckets ","]


						set newlastsentbuckets ""
						set tosendbuckets ""
						set tosendbuckets_count 0

						set avr_command_buckets "select distinct time_stamp from ${avr_table}_T where time_stamp < (select UNIX_TIMESTAMP(now())-(aggr_period+1) from ${avr_table}_T order by time_stamp DESC limit 1 )  order by time_stamp DESC"

						if {![catch {set output [exec mysql -uroot -p$mysqlpassword AVR -B -e $avr_command_buckets | tr '\\t' ',']}]}{
							#split the output into a list
							set output [split $output "\n"] 
							set row_number 0
							if {[llength $output] > 0} { 					
								foreach outputline $output {
									#skip the col name and the current working bucket
									if {$row_number > 0} {
										if {[lsearch $lastsentbuckets $outputline] == -1 && $tosendbuckets_count <= $max_avr_buckets} {
											set tosendbuckets_count [expr $tosendbuckets_count +1]
											append tosendbuckets "$outputline,"
											append newlastsentbuckets "$outputline,"
										}
										if {[lsearch $lastsentbuckets $outputline] > -1 } {
											append newlastsentbuckets "$outputline,"
										}									
									}
									set row_number [expr $row_number + 1]
								}
							}

							set newlastsentbuckets [string trimright $newlastsentbuckets ","]
							set key "${avr_table}_sentbuckets"
							set newpollsettings($key) $newlastsentbuckets

							set tosendbuckets [string trimright $tosendbuckets ","]

						}

						if {$tosendbuckets !=""} {
							#update the command to use the to send buckets
							set map "<tosendbuckets> $tosendbuckets"	
							set avr_command [string map $map $avr_command]


							if {![catch {set output [exec mysql -uroot -p$mysqlpassword AVR -B -e $avr_command | tr '\\t' ',']}]}{
								#split the output into a list
								set output [split $output "\n"] 							
								set row_number 0
								if {[llength $output] > 1} { 					
									foreach outputline $output {
										if {$row_number == 0} {
											#this has our columns lets store this info
											set column_names [split $outputline ","]							
										} else {
											set ignore 0
											#this is a row of data we need to split the row
											set column_number 0
											set columns [split $outputline ","]
											set row ""


											#assign tenant, application, and tier
											set application ""
											set tier ""
											set tenant $tenantdefault
											set index ""
											if {$key_column_number >= 0}{
												set index $rbac_default_index
												catch {set application $vip2application([lindex $columns $key_column_number])}
												catch {set tier $vip2tier([lindex $columns $key_column_number])}
												catch {set tenant $vip2tenant([lindex $columns $key_column_number])}
												if {$rbac == "Yes"}{
													catch {set index ",\"index\":\"$rbac_prefix$vip2tenant([lindex $columns $key_column_number])\""}	
													regsub -all "\\.| " $index "_" index
												}
											}
											if {$key_column_number == "-1"}{
												set index $rbac_system_index
											}
											if {$key_column_number == "-2"}{
												set index $rbac_shared_index
											}


											if {$ignore != 1 } {
												foreach column $columns {
													set metric_name [lindex $column_names $column_number]
													regsub -all " |\\.|/" $metric_name "_" metric_name
													#value processing
													set value $column

													#IP HEX Mapping
													if { $metric_name == "source_ip" || $metric_name == "dest_ip" || $metric_name == "pool_member_addr" || $metric_name == "client_ip" || $metric_name == "self_ip" || $metric_name == "server_ip" || $metric_name == "client_ip" || $metric_name == "subnet_addr" || $metric_name == "remote_host_ip" || $metric_name == "subnet"} {
														set hexroutedomain ""
														set hexip ""
														set hexip_1 ""
														set hexip_2 ""
														set hexip_3 ""
														set hexip_4 ""
														set hexipv6_1 ""
														set hexipv6_2 ""
														set hexipv6_3 ""
														set hexipv6_4 ""
														set hexipv6_5 ""
														set hexipv6_6 ""
														set hexipv6_7 ""
														set hexipv6_8 ""

														regexp {([[:xdigit:]]{32})([[:xdigit:]]{8})} $value junk hexip hexroutedomain
														regexp {FFFF([[:xdigit:]].)([[:xdigit:]].)([[:xdigit:]].)([[:xdigit:]].)} $hexip junk hexip_1 hexip_2 hexip_3 hexip_4	

														if { $hexip_1 != "" } {
															set value "[expr 0x$hexip_1].[expr 0x$hexip_2].[expr 0x$hexip_3].[expr 0x$hexip_4]"
														} else {
															regexp {([[:xdigit:]]{4})([[:xdigit:]]{4})([[:xdigit:]]{4})([[:xdigit:]]{4})([[:xdigit:]]{4})([[:xdigit:]]{4})([[:xdigit:]]{4})([[:xdigit:]]{4})} $hexip junk hexipv6_1 hexipv6_2 hexipv6_3 hexipv6_4 hexipv6_5 hexipv6_6 hexipv6_7 hexipv6_8
															set value "$hexipv6_1:$hexipv6_2:$hexipv6_3:$hexipv6_4:$hexipv6_5:$hexipv6_6:$hexipv6_7:$hexipv6_8"
														}
													}


													if {![string is integer $value] || $value == ""} {
														set value "\"$value\""
													}
													if {$value == "\"\NULL\""}{
														set value "\"\""
													}

													if {$metric_name == "time_stamp"} {
														set avrtime $value
													} else {									
														append row "\"$metric_name\":$value,"
													}

													set column_number [expr $column_number + 1]									
												}
												set row [string trimright $row ","]
												if {$row != ""} {
													puts $infile "$beginningdata_running$bordata\{\"time\":$avrtime$index,\"host\":\"$hostname\",\"source\":\"bigip.avrstats.$avr_table\",\"sourcetype\":\"f5:bigip:stats:iapp:json\",$eventformat_start\"device_base_mac\":\"$device_base_mac\",\"devicegroup\":\"$devicegroup\",\"facility\":\"$facility\",\"app\":\"$application\",\"appComponent\":\"$tier\",\"tenant\":\"$tenant\",$row$eventformat_end\}$eordata"
													set beginningdata_running $beginningdata
													if {[file size "$filename$currentfile"] > $maxfilesize} {
														#file too large create new
														set stat_bytes_transfered [expr $stat_bytes_transfered + [file size "$filename$currentfile"]]
														set currentfile [expr $currentfile + 1]
														if {$eofdata != "" } {puts $infile $eofdata}
														close $infile
														set infile [open "$filename$currentfile" "w" "0644"]
														if {$bofdata != "" } {puts $infile $bofdata}
														set beginningdata_running ""
													}
												}
											}
										}
										set row_number [expr $row_number + 1]
									}
								}
							}
						}
					}
				}
			}
		}






		if {$pushstate == "Yes" || $pushconfig == "Yes" }{
			###now let's get pool member status

			set pool_id 0
			set pool_list ""
			catch {set pool_list [tmsh::get_status ltm pool recursive members]}
			foreach pool $pool_list {
				set pool_members [lindex $pool_list $pool_id]
				set pool_name "/[tmsh::get_name $pool]"
				set memberlist ""
				if {$format == "F5 Analytics" && $doconfigpush == "Yes"} {
					##APP-IQ Format
					set appiqpool_outedges ""
					set appiqpool "\{\"kind\":\"ap:bigip:Pool\",\"id\":\"$pool_name\""
				}
				
				catch {set memberlist [tmsh::get_field_value $pool_members "members"]}
				foreach member $memberlist {
					set row "\"devicegroup\":\"$devicegroup\",\"facility\":\"$facility\",\"callbackurl\":\"$callbackurl\",\"pool_name\":\"$pool_name\",\"pool_member_name\":\"/[tmsh::get_name $member]\",\"address\":\"[tmsh::get_field_value $member "addr"]\",\"port\":\"[tmsh::get_field_value $member "port"]\","
					append row "\"session_status\":\"[tmsh::get_field_value $member "session-status"]\","
					append row "\"availability_state\":\"[tmsh::get_field_value $member "status.availability-state"]\","
					append row "\"enabled_state\":\"[tmsh::get_field_value $member "status.enabled-state"]\","
					append row "\"status_reason\":\"[tmsh::get_field_value $member "status.status-reason"]\""


					puts $infile "$beginningdata_running$bordata\{\"time\":$date$rbac_shared_index,\"host\":\"$hostname\",\"source\":\"bigip.tmsh.pool_member_status\",\"sourcetype\":\"f5:bigip:status:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
					set beginningdata_running $beginningdata
					if {[file size "$filename$currentfile"] > $maxfilesize} {
						#file too large create new
						set stat_bytes_transfered [expr $stat_bytes_transfered + [file size "$filename$currentfile"]]
						set currentfile [expr $currentfile + 1]
						if {$eofdata != "" } {puts $infile $eofdata}
						close $infile
						set infile [open "$filename$currentfile" "w" "0644"]
						if {$bofdata != "" } {puts $infile $bofdata}
						set beginningdata_running ""
					}
					if {$format == "F5 Analytics" && $doconfigpush == "Yes"} {
						##APP-IQ Format
						append  appiqpool_outedges "\{\"targetKind\":\"ap:bigip:PoolMember\",\"targetId\":\"$pool_name-/[tmsh::get_name $member]\"\},"
						
						puts $infile_config "$beginningdata_running_config\{\"kind\":\"ap:bigip:PoolMember\",\"id\":\"$pool_name-/[tmsh::get_name $member]\",\"name\":\"/[tmsh::get_name $member]\",\"enabled_state\":\"[tmsh::get_field_value $member "status.enabled-state"]\",\"address\":\"[tmsh::get_field_value $member "addr"]\",\"port\":\"[tmsh::get_field_value $member "port"]\"\}"
						set beginningdata_running_config $beginningdata
					}
					
				}
				if {$format == "F5 Analytics" && $doconfigpush == "Yes"} {
					##APP-IQ Format
					set appiqpool_outedges [string trimright $appiqpool_outedges ","]
					if {$appiqpool_outedges != ""} {
						set appiqpool_outedges ",\"outEdges\":\[$appiqpool_outedges\]"
					}	

					set appiqpool "$appiqpool$appiqpool_outedges\}"
					puts $infile_config $beginningdata_running_config$appiqpool				
					set beginningdata_running_config $beginningdata
				}
				
				
				set pool_id [expr $pool_id + 1]
			}
			
			
			###now let's get Virtual Server status

			set virtual_list ""
			catch {set virtual_list [tmsh::get_status ltm virtual recursive]}
			foreach virtual $virtual_list {
				set virtual_name "/[tmsh::get_name $virtual]"
				
				#assign tenant, application, and tier
				set application ""
				set tier ""
				set tenant $tenantdefault
				set index $rbac_default_index
				catch {set application $vip2application($virtual_name)}
				catch {set tier $vip2tier($virtual_name)}
				catch {set tenant $vip2tenant($virtual_name)}
				if {$rbac == "Yes"}{
					catch {set index ",\"index\":\"$rbac_prefix$vip2tenant($virtual_name)\""}	
					regsub -all "\\.| " $index "_" index
				}
				
				set row "\"devicegroup\":\"$devicegroup\",\"facility\":\"$facility\",\"virtual_name\":\"$virtual_name\",\"app\":\"$application\",\"appComponent\":\"$tier\",\"tenant\":\"$tenant\","
				append row "\"availability_state\":\"[tmsh::get_field_value $member "status.availability-state"]\","
				append row "\"enabled_state\":\"[tmsh::get_field_value $member "status.enabled-state"]\","
				append row "\"status_reason\":\"[tmsh::get_field_value $member "status.status-reason"]\""

				puts $infile "$beginningdata_running$bordata\{\"time\":$date$rbac_shared_index,\"host\":\"$hostname\",\"source\":\"bigip.tmsh.virtual_status\",\"sourcetype\":\"f5:bigip:status:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
				set beginningdata_running $beginningdata
				if {[file size "$filename$currentfile"] > $maxfilesize} {
					#file too large create new
					set stat_bytes_transfered [expr $stat_bytes_transfered + [file size "$filename$currentfile"]]
					set currentfile [expr $currentfile + 1]
					if {$eofdata != "" } {puts $infile $eofdata}
					close $infile
					set infile [open "$filename$currentfile" "w" "0644"]
					if {$bofdata != "" } {puts $infile $bofdata}
					set beginningdata_running ""		
				}
			}			
			
		}

		if {$pushsessiondb == "Yes" }{
			###now let's get sessiondb
			
			##clean up all other sessiondump output to tmp - this ensures that we dont fill up /tmp if for some reason we dont delete from the last run. at some point we will get sessiondump to spit out to /shared/tmp so we have more space.
			catch {exec rm -f /tmp/sesslist-*}	
			
			set output ""
			set row ""
			if {$version == "12.0.0" || $version == "12.1.0" || $version == "12.1.1" || $version == "13.0.0" || $version == "13.1.0" || $version == "13.1.1"} {				
				catch {set output [exec /usr/bin/sessiondump --allkeys --savetofile]}
			} else {
				#check to see if we need to install a copy of sessiondump
				
				if {$version == "11.4.0" || $version == "11.4.1" || $version == "11.4.2" || $version == "11.4.3" || $version == "11.4.4" || $version == "11.4.5" || $version == "11.4.6"} {
					set sessiondump_md5 $sessiondump_11_4_x_md5
				}
				if {$version == "11.5.0" || $version == "11.5.1" || $version == "11.5.2" || $version == "11.5.3" || $version == "11.5.4" || $version == "11.5.5" || $version == "11.5.6" } {				
					set sessiondump_md5 $sessiondump_11_5_x_md5
				}
				if {$version == "11.6.0" || $version == "11.6.1" || $version == "11.6.2" || $version == "11.6.3" || $version == "11.6.4" || $version == "11.6.5" || $version == "11.6.6" } {				
					set sessiondump_md5 $sessiondump_11_6_x_md5
				}				
				
				set md5sum ""
				catch {set md5sum [lindex [split [exec md5sum /shared/tmp/f5_analytics-sessiondump] " "] 0]}					
				if {$md5sum != $sessiondump_md5 } {
					#install stand alone SessionDump Command			
					set base64filename "/shared/tmp/f5_analytics-sessiondump.gz.64"
					set base64file [open "$base64filename" "w" "0644"]		
					if {$version == "11.4.0" || $version == "11.4.1" || $version == "11.4.2" || $version == "11.4.3" || $version == "11.4.4" || $version == "11.4.5" || $version == "11.4.6" } {
						puts $base64file $sessiondump_11_4_x_base64
					} 
					if {$version == "11.5.0" || $version == "11.5.1" || $version == "11.5.2" || $version == "11.5.3" || $version == "11.5.4" || $version == "11.5.5" || $version == "11.5.6" } {
						puts $base64file $sessiondump_11_5_x_base64
					}
					if {$version == "11.6.0" || $version == "11.6.1" || $version == "11.6.2" || $version == "11.6.3" || $version == "11.6.4" || $version == "11.6.5" || $version == "11.6.6" } {
						puts $base64file $sessiondump_11_6_x_base64
					}					
					close $base64file		
					exec cat $base64filename | /usr/bin/base64 -d -i > /shared/tmp/f5_analytics-sessiondump.gz
					exec gunzip -f /shared/tmp/f5_analytics-sessiondump.gz
					exec chmod +x /shared/tmp/f5_analytics-sessiondump
				}
				catch {set output [exec /shared/tmp/f5_analytics-sessiondump --allkeys --savetofile]}
			}

			if {$output != ""} {
				set output [split $output " "]

				set sessionid ""
				set fp [open [lindex $output 1] r]
				while { [gets $fp data] >= 0 } {
					if {$data != ""} { 
						set newsessionid [string range $data 0 7]
						#deal with first session
						if {$sessionid == ""} {set sessionid $newsessionid}

						#if not the same session write out
						if {$sessionid != $newsessionid && !($newsessionid contains " ") && $newsessionid != ""} {
							puts $infile "$beginningdata_running$bordata\{\"time\":$date$index,\"host\":\"$hostname\",\"source\":\"bigip.sessiondb\",\"sourcetype\":\"f5:bigip:stats:iapp:json\",$eventformat_start\"devicegroup\":\"$devicegroup\",\"facility\":\"$facility\",\"app\":\"$application\",\"appComponent\":\"$tier\",\"tenant\":\"$tenant\",\"aggr_period\":\"$aggr_period\",$row\"sessionid\":\"$sessionid\"$eventformat_end\}$eordata"
							set beginningdata_running $beginningdata
							if {[file size "$filename$currentfile"] > $maxfilesize} {
								#file too large create new
								set stat_bytes_transfered [expr $stat_bytes_transfered + [file size "$filename$currentfile"]]
								set currentfile [expr $currentfile + 1]
								if {$eofdata != "" } {puts $infile $eofdata}
								close $infile
								set infile [open "$filename$currentfile" "w" "0644"]
								if {$bofdata != "" } {puts $infile $bofdata}
								set beginningdata_running ""
							}	
							set sessionid $newsessionid
							set row ""
							set application ""
							set tier ""
							set tenant $tenantdefault
							set index $rbac_default_index

						}					
						set key ""
						set value ""
						regexp "\\\.(.*) (.*) (.*)" $data junk key junk2 value
						if {[lsearch $sessiondbkeys $key] !=-1} {								
							if {$key == "session.server.listener.name"} {						
								#assign tenant, application, and tier
								catch {set application $vip2application($value)}
								catch {set tier $vip2tier($value)}
								catch {set tenant $vip2tenant($value)}	
								if {$rbac == "Yes"}{
									catch {set index ",\"index\":\"$rbac_prefix$vip2tenant($value)\""}
									regsub -all "\\.| " $index "_" index
								}								
							}
							append row "\"$key\":\"$value\","
						}
						
						if {$customsessiondb == "Yes"} { 
							
							if {$key == $customsessiondb1 && $customsessiondb1 != ""} {
								append row "\"customvar1\":\"$value\",\"customvar1_name\":\"$key\","
							}
							if {$key == $customsessiondb2 && $customsessiondb2 != ""} {
								append row "\"customvar2\":\"$value\",\"customvar2_name\":\"$key\","
							}							
							if {$key == $customsessiondb3 && $customsessiondb3 != ""} {
								append row "\"customvar3\":\"$value\",\"customvar3_name\":\"$key\","
							}
							if {$key == $customsessiondb4 && $customsessiondb4 != ""} {
								append row "\"customvar4\":\"$value\",\"customvar4_name\":\"$key\","
							}
							if {$key == $customsessiondb5 && $customsessiondb5 != ""} {
								append row "\"customvar5\":\"$value\",\"customvar5_name\":\"$key\","
							}							
						}
						
						
						
					}
				}
				#write last row
				if {$row != "" } { 
					puts $infile "$beginningdata_running$bordata\{\"time\":$date$index,\"host\":\"$hostname\",\"source\":\"bigip.sessiondb\",\"sourcetype\":\"f5:bigip:stats:iapp:json\",$eventformat_start\"devicegroup\":\"$devicegroup\",\"facility\":\"$facility\",\"app\":\"$application\",\"appComponent\":\"$tier\",\"tenant\":\"$tenant\",\"aggr_period\":\"$aggr_period\",$row\"sessionid\":\"$sessionid\"$eventformat_end\}$eordata"
					set beginningdata_running $beginningdata
				}

				close $fp
				catch {exec rm -f [lindex $output 1]}
				

			}
		}			

		
		

		if {$pushistats == "Yes" }{
			###now let's get istats
			set output ""
			catch {set output [exec istats dump |& grep " "]}
			set output [split $output "\n"]
			foreach line $output {
				set junk ""
				set keyspace ""
				set object ""
				set name ""
				set value ""
				set index $rbac_system_index 
				set application ""
				set tier ""
				set tenant $tenantdefault	
				
				
				if {$line contains "sys.application.service="} {
					regexp {\[ (.*) \]\[(.*)\] = (\S*)} $line junk keyspace name value
					set row ""

					set keyspace [split $keyspace " "]
					foreach key $keyspace {
						set key [split $key "="]
						append row "\"[lindex $key 0]\":\"[lindex $key 1]\","
						if {[lindex $key 0] == "ltm.virtual"} {
							set index $rbac_default_index
							#assign tenant, application, and tier
							catch {set application $vip2application([lindex $key 1])}
							catch {set tier $vip2tier([lindex $key 1])}
							catch {set tenant $vip2tenant([lindex $key 1])}
							if {$rbac == "Yes"}{
								catch {set index ",\"index\":\"$rbac_prefix$vip2tenant([lindex $key 1])\""}
								regsub -all "\\.| " $index "_" index
							}						
						}							
					}

					append row "\"devicegroup\":\"$devicegroup\",\"facility\":\"$facility\",\"aggr_period\":\"$aggr_period\",\"app\":\"$application\",\"appComponent\":\"$tier\",\"tenant\":\"$tenant\",\"istat_name\":\"$name\",\"value\":\"$value\""						


					puts $infile "$beginningdata_running$bordata\{\"time\":$date$index,\"host\":\"$hostname\",\"source\":\"bigip.istats.ssli\",\"sourcetype\":\"f5:bigip:stats:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
					set beginningdata_running $beginningdata

					if {[file size "$filename$currentfile"] > $maxfilesize} {
						#file too large create new
						set stat_bytes_transfered [expr $stat_bytes_transfered + [file size "$filename$currentfile"]]
						set currentfile [expr $currentfile + 1]
						if {$eofdata != "" } {puts $infile $eofdata}
						close $infile
						set infile [open "$filename$currentfile" "w" "0644"]
						if {$bofdata != "" } {puts $infile $bofdata}
						set beginningdata_running ""
					}						

				} else {
					regexp {\[ (.*)=(.*) \]\[(.*)\] = (\S*)} $line junk keyspace object name value
					if {$keyspace != ""} {
						if {$keyspace == "ltm.virtual"} {
							set index $rbac_default_index
							#assign tenant, application, and tier
							catch {set application $vip2application($object)}
							catch {set tier $vip2tier($object)}
							catch {set tenant $vip2tenant($object)}
							if {$rbac == "Yes"}{
								catch {set index ",\"index\":\"$rbac_prefix$vip2tenant($object)\""}
								regsub -all "\\.| " $index "_" index
							}						
						}


						set row "\"devicegroup\":\"$devicegroup\",\"facility\":\"$facility\",\"aggr_period\":\"$aggr_period\",\"app\":\"$application\",\"appComponent\":\"$tier\",\"tenant\":\"$tenant\",\"keyspace\":\"$keyspace\",\"object\":\"$object\",\"istat_name\":\"$name\",\"value\":\"$value\""
						puts $infile "$beginningdata_running$bordata\{\"time\":$date$index,\"host\":\"$hostname\",\"source\":\"bigip.istats\",\"sourcetype\":\"f5:bigip:stats:iapp:json\",$eventformat_start$row$eventformat_end\}$eordata"
						set beginningdata_running $beginningdata

						if {[file size "$filename$currentfile"] > $maxfilesize} {
							#file too large create new
							set stat_bytes_transfered [expr $stat_bytes_transfered + [file size "$filename$currentfile"]]
							set currentfile [expr $currentfile + 1]
							if {$eofdata != "" } {puts $infile $eofdata}
							close $infile
							set infile [open "$filename$currentfile" "w" "0644"]
							if {$bofdata != "" } {puts $infile $bofdata}
							set beginningdata_running ""
						}			
					}
				}
			}
		}
		
				
		if {$pushsslistats == "Yes" }{
			set curl_response "fail"
			catch {set curl_response [exec curl http://255.255.255.253:[expr $uniqueid + 5] --connect-timeout 10 --max-time 50 -o - -s]}

			
			if {$curl_response != "fail" } {
				set output [split $curl_response "\n"]
				foreach outputline $output {
					set sourcestring ""
					set outputline [split $outputline "|"]
					
					#change to switch statement when we add more
					if {[lindex $outputline 0] == "AVR_STAT_SSLI_DOMAIN"} {
						set index $rbac_default_index
						#{table}|${value}|${key}
						#  0      1       2            3           4            5             6           7             8               9         10
						#table, value, appName, virtual-server,domain-name, TLS version, ciphersuite, cipher bits,L7 protocol code, chain name, URLCat

						
						set virtual [lindex $outputline 3]
						
						#assign tenant, application, and tier
						catch {set application $vip2application($virtual)}
						catch {set tier $vip2tier($virtual)}
						catch {set tenant $vip2tenant($virtual)}
						if {$rbac == "Yes"}{
							catch {set index ",\"index\":\"$rbac_prefix$vip2tenant($virtual)\""}
							regsub -all "\\.| " $index "_" index
						}					
					
					
						set sourcestring "bigip.avrstats.AVR_STAT_SSLI_DOMAIN"
						set url_catagory "Uncategorized"
						catch {set url_catagory [lindex $outputline 10]}
						set row "\"aggr_period\":\"$aggr_period\",\"app\":\"$application\",\"appComponent\":\"$tier\",\"tenant\":\"$tenant\",\"hits_count\":\"[lindex $outputline 1]\",\"app_name\":\"[lindex $outputline 2]\",\"vip_name\":\"$virtual\",\"domain-name\":\"[lindex $outputline 4]\",\"tls_version\":\"[lindex $outputline 5]\",\"cipher\":\"[lindex $outputline 6]\",\"cipher_bits\":\"[lindex $outputline 7]\",\"protocol\":\"[lindex $outputline 8]\",\"chain\":\"[lindex $outputline 9]\",\"url_filter_catagory\":\"$url_catagory\""
						puts $infile "$beginningdata_running$bordata\{\"time\":$date$index,\"host\":\"$hostname\",\"source\":\"$sourcestring\",\"sourcetype\":\"f5:bigip:stats:iapp:json\",$eventformat_start\"devicegroup\":\"$devicegroup\",\"facility\":\"$facility\",$row$eventformat_end\}$eordata"
						set beginningdata_running $beginningdata
						if {[file size "$filename$currentfile"] > $maxfilesize} {
							#file too large create new
							set stat_bytes_transfered [expr $stat_bytes_transfered + [file size "$filename$currentfile"]]
							set currentfile [expr $currentfile + 1]
							if {$eofdata != "" } {puts $infile $eofdata}
							close $infile
							set infile [open "$filename$currentfile" "w" "0644"]
							if {$bofdata != "" } {puts $infile $bofdata}
							set beginningdata_running ""
						}	
					}
				}
			}
		}
			
 		###now let's get iHealth data
 		set qkview_location "fail"
 		set qkview_number ""
 		
 		set ihealthattempts 0
		set key "ihealthattempts"
		catch {set ihealthattempts $lastpollsettings($key)} 		
 		
 		
 		catch {set qkview_location [exec cat /shared/tmp/f5_analytics-${appname}-ihealthpickuplocation]}
 		regexp {qkviews\/(.*)} $qkview_location junk qkview_number
 		
		if {$qkview_location != "fail" && $ihealthattempts < $max_ihealth_attempts} {
			set cookie_file "/shared/tmp/qkview_${appname}_ihealthpickup.cookie"		

			set curl_response "fail"
			catch {set curl_response [exec curl -k <ihealthproxyinfo> --connect-timeout 10 --max-time 50 -H "Content-type: application/json" --user-agent "F5 Analytics Auto Upload" --cookie-jar $cookie_file -o - --data-ascii "{\"user_id\": \"$ihealthusername\", \"user_secret\": \"$ihealthpassword\"}" https://api.f5.com/auth/pub/sso/login/ihealth-api -sw "%{http_code}\n"]}		
			tmsh::log "F5 Analytics - ${appname}: Received $curl_response when logging into iHealth for qkview pickup: $qkview_location"		
		
			#check to see if it's done, calling the CSV first will create a blank file and we will never the the results
			set curl_response "fail"
			catch {set curl_response [exec curl -k <ihealthproxyinfo> --connect-timeout 10 --max-time 50 -H "Accept: application/vnd.f5.ihealth.api.v1.0" --user-agent "F5 Analytics Auto Upload" --cookie $cookie_file --cookie-jar $cookie_file  ${qkview_location} -o - -s]}
			tmsh::log "F5 Analytics - ${appname}: Received $curl_response when checking for data in iHealth for qkview pickup: $qkview_location"
			
			if {$curl_response != "fail" && $curl_response != "" } {


				set curl_response "fail"
				catch {set curl_response [exec curl -k <ihealthproxyinfo> --connect-timeout 10 --max-time 50 -H "Accept: application/vnd.f5.ihealth.api.v1.0+csv" --user-agent "F5 Analytics Auto Upload" --cookie $cookie_file --cookie-jar $cookie_file  ${qkview_location}/diagnostics.csv -o - -s]}


				tmsh::log "F5 Analytics - ${appname}: Received $curl_response when pulling data from iHealth for qkview pickup: $qkview_location"


				if {$curl_response != "fail" } {
					set output $curl_response

					set column_names {}
					#split the output into a list

					regsub -all "\"Serial Number\",\"Platform\"\n" $output "\"Serial Number\",\"Platform\"~lineend~" output
					regsub -all ",\"$hostname\",\"\[^\n\]*\",\"\[^\n\]*\",\"\[^\n\]*\",\"\[^\n\]*\"\n" $output "~lineend~" output	
					regsub -all "\n" $output "\\n" output

					regsub -all "~lineend~" $output "\n" output


					set output [split $output "\n"] 
					set row_number 0
					#tmsh::log "FINDME 1 [llength $output]"
					if {[llength $output] > 1} { 					
						foreach outputline $output {
							if {$row_number == 0} {
								#this has our columns lets store this info
								set column_names [split $outputline ","]
								#tmsh::log "FINDME 2 $outputline"
							} else {
								set ignore 0
								#this is a row of data we need to split the row
								set column_number 0
								regsub -all "\",\"" $outputline "\"|\"" outputline
								#tmsh::log "FINDME 3 $outputline"
								set columns [split $outputline "|"]
								set row ""
								if {$ignore != 1 } {
									foreach column $columns {
										#tmsh::log "FINDME 4 $column"
										set metric_name [lindex $column_names $column_number]
										if {$column != "\"\""} {
											regsub -all "\"\"" $column "" column
										}


										append row "$metric_name:$column,"

										set column_number [expr $column_number + 1]									
									}
									set row [string trimright $row ","]
									if {$row != ""} {
										#tmsh::log "FINDME: $row"
										puts $infile "$beginningdata_running$bordata\{\"time\":$date$rbac_system_index,\"host\":\"$hostname\",\"source\":\"bigip.ihealth.diagnostics\",\"sourcetype\":\"f5:bigip:ihealth:iapp:json\",$eventformat_start\"devicegroup\":\"$devicegroup\",\"facility\":\"$facility\",\"qkview_number\":\"$qkview_number\",\"ihealth_link\":\"https://ihealth.f5.com/qkview-analyzer/qv/$qkview_number\",$row$eventformat_end\}$eordata"
										set beginningdata_running $beginningdata
										if {[file size "$filename$currentfile"] > $maxfilesize} {
											#file too large create new
											set stat_bytes_transfered [expr $stat_bytes_transfered + [file size "$filename$currentfile"]]
											set currentfile [expr $currentfile + 1]
											if {$eofdata != "" } {puts $infile $eofdata}
											close $infile
											set infile [open "$filename$currentfile" "w" "0644"]
											if {$bofdata != "" } {puts $infile $bofdata}
											set beginningdata_running ""
										}
									}
								}
							}
							set row_number [expr $row_number + 1]
						}
						catch {exec rm -f /shared/tmp/f5_analytics-${appname}-ihealthpickuplocation}
						set key "ihealthattempts"
						set newpollsettings($key) 0						
					}
				} else {
					tmsh::log "F5 Analytics - ${appname}: Received $curl_response when pulling data from iHealth for qkview pickup: $qkview_location"
					set key "ihealthattempts"
					set newpollsettings($key) [expr $ihealthattempts + 1] 					
				}
			} else {
				set key "ihealthattempts"
				set newpollsettings($key) [expr $ihealthattempts + 1] 
			}
			catch {exec rm -f $cookie_file}
	


		}
		
		if {$ihealthattempts >= $max_ihealth_attempts } {
			catch {exec rm -f /shared/tmp/f5_analytics-${appname}-ihealthpickuplocation}
			set key "ihealthattempts"
			set newpollsettings($key) 0		
		}




		#add report on how many bytes and files were sent.
		puts $infile "$beginningdata_running$bordata\{\"time\":$date$rbac_system_index,\"host\":\"$hostname\",\"source\":\"bigip.stats.summary\",\"sourcetype\":\"f5:bigip:stats:iapp:json\",$eventformat_start\"devicegroup\":\"$devicegroup\",\"facility\":\"$facility\",\"aggr_period\":\"$aggr_period\",\"files_sent\":\"[expr $currentfile + 1]\",\"bytes_transfered\":\"$stat_bytes_transfered\"$eventformat_end\}$eordata"
		set beginningdata_running $beginningdata

		if {$eofdata != "" } {puts $infile $eofdata}
		close $infile
		
		if {$format == "F5 Analytics" && $doconfigpush == "Yes"} {
			puts $infile_config "\]\}" 

			close $infile_config
		}

		for {set i 0} {$i <= $currentfile} {incr i} {
			set curl_response "fail"
			set ext ""
			if {$format == "Splunk" || $format == "F5 Analytics" } {			
				exec gzip $filename$i$ext -f
				append ext ".gz"
				#gzip
				catch {set curl_response [exec /usr/bin/curl --connect-timeout 10 --max-time 50 -k $url <statsproxyinfo> --compressed -H "Host: $hostheader\nContent-Type: application/json\n$apikey\nAccept-Encoding: gzip\nContent-Encoding: gzip" -X POST --data-binary @$filename$i$ext -o /shared/tmp/${appname}-stats_output_$i -0 -sw "%{http_code}\n"]}			
			}
			
			if {$format == "F5 Risk Engine - Full" || $format == "F5 Risk Engine" } {
				#non gzip
				catch {set curl_response [exec /usr/bin/curl --connect-timeout 10 --max-time 50 -k $url <statsproxyinfo> -H "Host: $hostheader\nContent-Type: application/json\n$apikey" -X POST -d @$filename$i -o /shared/tmp/${appname}-stats_output_$i -0 -sw "%{http_code}\n"]}
				if {$pushinterval < 11 } {
					catch {exec rm -f $filename$i}
				}
			}
			
			if {$format == "F5 BIG-IQ" } {
				set curl_response "Moved"
				exec gzip $filename$i$ext -f
				append ext ".gz"
				catch {exec mv -f $filename$i$ext /var/local/ucs/f5.analytics-BIG-IQ$ext}
			}
			

			if {$debug == "Yes"} {
				tmsh::log "Stats Response for $appname $date $i $curl_response"	
			}
		}
		
		#send config data for F5 Analytics
		if {$format == "F5 Analytics" && $doconfigpush == "Yes"} {
			set curl_response "fail"
			set ext ""
			set i 0
			exec gzip $filename_config$i$ext -f
			append ext ".gz"
			#gzip
			catch {set curl_response [exec /usr/bin/curl --connect-timeout 10 --max-time 50 -k $configurl <statsproxyinfo> --compressed -H "Host: $hostheader\nContent-Type: application/json\n$apikey\nAccept-Encoding: gzip\nContent-Encoding: gzip" -X POST --data-binary @$filename_config$i$ext -o /shared/tmp/${appname}-config_output_$i -0 -sw "%{http_code}\n"]}			
			if {$debug == "Yes"} {
				tmsh::log "Config Response for $appname $date $i $curl_response"	
			}			
		}		
		
		
		#write the new settings
		set filename "/shared/tmp/f5_analytics-${appname}-lastpollsettings"
		set settingsfile [open "$filename" "w" "0644"]		
		puts $settingsfile "lastsentdate|$date"
		foreach {key value} [array get newpollsettings] {
		    puts $settingsfile "$key|$value"
		}
		close $settingsfile
		
		
	}
	########SplunkStats Script End ########	


	########SplunkStats DataGroup Start ########	
	#tmctl format 	"<tablename1> <colnumberforvipmapping> <tablename1> <colnumberforvipmapping>"
	#avr format "{<Name1>|<colnumberforvipmapping>} {<SQL QUERY>} {<Name2>|<colnumberforvipmapping>} {<SQL QUERY>}"
	#avr note "<tosendbuckets>" will be filled with a list of bucket time staps that have yet to be sent and are done being filled	
	
	#set defaults
	if {$::statistics__customcollection != "Yes"} {
		set ::statistics__customcollectionconfig "monitor_instance_stat monitor_stat disk_info_stat tmm_dns_server_stat tmm_dns_zone_stat profile_dns_stat gtm_wideip_stat dns_cache_resolver_stat tmmdns_zone_stat dnsexpress_zone_stat gtm_dc_stat tmm_stat memory_usage_stat profile_udp_stat interface_stat virtual_server_conn_stat rule_stat kvm_vcpu_stat kvm_vm_stat vcmp_global_stat vcmp_stat asm_cpu_util_stats cpu_info_stat dos_stat dosl7_plugin_stats proc_pid_stat dosl7d_stat flow_eviction_policy_stat host_info_stat ifc_stats ip_intelligence_stat ip_stat iprepd_stat pool_member_stat pool_stat profile_bigproto_stat profile_clientssl_stat profile_connpool_stat profile_ftp_stat profile_http_stat profile_httpcompression_stat profile_serverssl_stat profile_tcp_stat profile_webacceleration_stat virtual_server_cpu_stat virtual_server_stat AVR_STAT_DNS_QUERY AVR_STAT_DNS_CLIENT_IP AVR_STAT_APM_SWG_BLOCKED AVR_STAT_APM_SWG_URL_INFO AVR_STAT_APM_SWG_USER_INFO AVR_STAT_URL AVR_STAT_POOL_MEMBER AVR_STAT_ASM_ANOMALIES AVR_STAT_ASM_HTTP_ATTACK_DATA AVR_STAT_ASM_HTTP_VIOLATION AVR_STAT_ASM_NETWORK AVR_STAT_GEO_LOCATION AVR_STAT_METHOD AVR_STAT_USER_AGENT AVR_STAT_VIP AVR_STAT_ENFORCED_ACL AVR_STAT_STAGING_ACL AVR_STAT_RESPONSE_CODE AVR_STAT_CLIENT_IP AVR_STAT_TCP"
	}
	
	if {$::statistics__customcollection != "Yes" && $::basic__appiqformat == "Yes"} {
		set ::statistics__customcollectionconfig "monitor_instance_stat monitor_stat dnsexpress_zone_stat gtm_dc_stat virtual_server_conn_stat kvm_vcpu_stat kvm_vm_stat vcmp_global_stat dos_stat dosl7_plugin_stats dosl7d_stat flow_eviction_policy_stat ifc_stats ip_intelligence_stat iprepd_stat pool_stat profile_bigproto_stat profile_clientssl_stat profile_connpool_stat profile_ftp_stat profile_http_stat profile_httpcompression_stat profile_serverssl_stat"
	}	
	
	if {$::basic__format == "F5 Risk Engine" && $::statistics__customcollection != "Yes"} {
		
	##########################################################################################################################################################################################################################################################################################################################################################################
	#########################################################################################################################################################################################################################################################################################################################################################################
	############################################################################################################################################################# START START  Risk Engine Team Code  START START ############################################################################################################################################################
	##########################################################################################################################################################################################################################################################################################################################################################################
	##########################################################################################################################################################################################################################################################################################################################################################################
	
		set ::statistics__customcollectionconfig "profile_http_stat virtual_server_stat dos_stat flow_eviction_policy_stat profile_tcp_stat"
		
	##########################################################################################################################################################################################################################################################################################################################################################################
	##########################################################################################################################################################################################################################################################################################################################################################################
	############################################################################################################################################################ END END END  Risk Engine Team Code  END END END #############################################################################################################################################################
	##########################################################################################################################################################################################################################################################################################################################################################################
	##########################################################################################################################################################################################################################################################################################################################################################################
	
	} 
	
	if {$::basic__format == "F5 BIG-IQ" && $::statistics__customcollection != "Yes"} {	
	
	##########################################################################################################################################################################################################################################################################################################################################################################
	##########################################################################################################################################################################################################################################################################################################################################################################
	############################################################################################################################################################# START START  BIG-IQ      Team Code  START START ############################################################################################################################################################
	##########################################################################################################################################################################################################################################################################################################################################################################
	##########################################################################################################################################################################################################################################################################################################################################################################
	
		set ::statistics__customcollectionconfig "monitor_instance_stat monitor_stat disk_info_stat tmm_dns_server_stat tmm_dns_zone_stat profile_dns_stat gtm_wideip_stat dns_cache_resolver_stat tmmdns_zone_stat dnsexpress_zone_stat gtm_dc_stat tmm_stat memory_usage_stat profile_udp_stat interface_stat virtual_server_conn_stat rule_stat kvm_vcpu_stat kvm_vm_stat vcmp_global_stat vcmp_stat asm_cpu_util_stats cpu_info_stat dos_stat dosl7_plugin_stats proc_pid_stat dosl7d_stat flow_eviction_policy_stat host_info_stat ifc_stats ip_intelligence_stat ip_stat iprepd_stat pool_member_stat pool_stat profile_bigproto_stat profile_clientssl_stat profile_connpool_stat profile_ftp_stat profile_http_stat profile_httpcompression_stat profile_serverssl_stat profile_tcp_stat profile_webacceleration_stat virtual_server_cpu_stat virtual_server_stat AVR_STAT_DNS_QUERY AVR_STAT_DNS_CLIENT_IP"
	
	##########################################################################################################################################################################################################################################################################################################################################################################
	##########################################################################################################################################################################################################################################################################################################################################################################
	############################################################################################################################################################ END END END  BIG-IQ      Team Code  END END END #############################################################################################################################################################
	##########################################################################################################################################################################################################################################################################################################################################################################
	##########################################################################################################################################################################################################################################################################################################################################################################
		
	} 
	
		
	array set tmctlmapping {monitor_instance_stat -2 monitor_stat -1 disk_info_stat -1 tmm_dns_server_stat -1 tmm_dns_zone_stat -1 profile_dns_stat -1 gtm_wideip_stat -1 dns_cache_resolver_stat -1 tmmdns_zone_stat -1 dnsexpress_zone_stat -1 gtm_dc_stat -1 tmm_stat -1 memory_usage_stat -1 profile_udp_stat 1 interface_stat -1 virtual_server_conn_stat 0 rule_stat -2 kvm_vcpu_stat -1 kvm_vm_stat -1 vcmp_global_stat -1 vcmp_stat -1 asm_cpu_util_stats 1 cpu_info_stat -1 dos_stat 0 dosl7_plugin_stats -1 proc_pid_stat -1 dosl7d_stat -1 flow_eviction_policy_stat 2 host_info_stat -1 ifc_stats -1 ip_intelligence_stat -1 ip_stat -1 iprepd_stat -1 pool_member_stat -2 pool_stat -2 profile_bigproto_stat 1 profile_clientssl_stat 1 profile_connpool_stat 1 profile_ftp_stat 1 profile_http_stat 1 profile_httpcompression_stat 1 profile_serverssl_stat 1 profile_tcp_stat 1 profile_webacceleration_stat 1 virtual_server_cpu_stat 0 virtual_server_stat 0}
	array set avrmapping {}
	if {$::version == "13.1.0" || $::version == "13.1.1" || $::version == "13.0.0"} {
		array set avrmapping {
			AVR_STAT_DNS_QUERY "\{AVR_STAT_DNS_QUERY|4\} \{ select     A.aggr_period,   A.time_stamp,    A.hits_count, AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, attack_id, attack_type_id, AVR_DIM_DNS_QUERY_TYPE.query_type_name, AVR_DIM_DNS_QUERY_NAME.query_name, AVR_DIM_DNS_REQUEST_TYPE.request_type_name   from AVR_STAT_DNS_QUERY_T A  LEFT JOIN AVR_DIM_DNS_QUERY_TYPE ON A.query_type_id=AVR_DIM_DNS_QUERY_TYPE.query_type_id LEFT JOIN AVR_DIM_DNS_QUERY_NAME ON A.query_name_crc=AVR_DIM_DNS_QUERY_NAME.query_name_crc LEFT JOIN AVR_DIM_DNS_REQUEST_TYPE ON A.transaction_outcome_id=AVR_DIM_DNS_REQUEST_TYPE.request_type_id   LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc   where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_DNS_CLIENT_IP "\{AVR_STAT_DNS_CLIENT_IP|4\} \{ select     A.aggr_period,   A.time_stamp,    A.hits_count, AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, attack_id, attack_type_id, AVR_DIM_DNS_QUERY_TYPE.query_type_name, HEX(A.client_ip) as client_ip,  AVR_DIM_DNS_REQUEST_TYPE.request_type_name   from AVR_STAT_DNS_CLIENT_IP_T A  LEFT JOIN AVR_DIM_DNS_QUERY_TYPE ON A.query_type_id=AVR_DIM_DNS_QUERY_TYPE.query_type_id LEFT JOIN AVR_DIM_DNS_REQUEST_TYPE ON A.transaction_outcome_id=AVR_DIM_DNS_REQUEST_TYPE.request_type_id   LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc   where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_APM_SWG_BLOCKED "\{AVR_STAT_APM_SWG_BLOCKED|-2\} \{select    A.aggr_period,  A.time_stamp,   A.hits_count,   ssl_bypass, AVR_DIM_APM_SWG_USERNAME.username_str, AVR_DIM_APM_SWG_URL.url_str,  HEX(A.client_ip) as client_ip, AVR_DIM_APM_SWG_CATEGORY.category_full_str, AVR_DIM_APM_SWG_RISK_CLASS.risk_class_str, AVR_DIM_APM_SWG_URL_FILTER.url_filter_full_str, AVR_DIM_APM_SWG_USER_GROUP.user_group_str, AVR_DIM_APM_SWG_APPLICATION.application_name_str, AVR_DIM_APM_SWG_APPLICATION_FAMILY.application_family_name_str     from AVR_STAT_APM_SWG_BLOCKED_T A   LEFT JOIN AVR_DIM_APM_SWG_USERNAME ON A.username_crc=AVR_DIM_APM_SWG_USERNAME.username_crc LEFT JOIN AVR_DIM_APM_SWG_URL ON A.url_crc=AVR_DIM_APM_SWG_URL.url_crc LEFT JOIN AVR_DIM_APM_SWG_CATEGORY ON A.category_crc=AVR_DIM_APM_SWG_CATEGORY.category_crc  LEFT JOIN AVR_DIM_APM_SWG_RISK_CLASS ON A.risk_class_crc=AVR_DIM_APM_SWG_RISK_CLASS.risk_class_crc LEFT JOIN AVR_DIM_APM_SWG_URL_FILTER ON A.url_filter_crc=AVR_DIM_APM_SWG_URL_FILTER.url_filter_crc LEFT JOIN AVR_DIM_APM_SWG_USER_GROUP ON A.user_group_crc=AVR_DIM_APM_SWG_USER_GROUP.user_group_crc LEFT JOIN AVR_DIM_APM_SWG_APPLICATION ON A.application_name_crc=AVR_DIM_APM_SWG_APPLICATION.application_name_crc LEFT JOIN AVR_DIM_APM_SWG_APPLICATION_FAMILY ON A.application_family_name_crc=AVR_DIM_APM_SWG_APPLICATION_FAMILY.application_family_name_crc where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_APM_SWG_URL_INFO "\{AVR_STAT_APM_SWG_URL_INFO|-2\} \{select    A.aggr_period,  A.time_stamp,   A.hits_count,   AVR_DIM_APM_SWG_ACTION.action_str,  ssl_bypass, AVR_DIM_APM_SWG_HOST_NAME.host_name_str, AVR_DIM_APM_SWG_URL.url_str, AVR_DIM_APM_SWG_CATEGORY.category_full_str, AVR_DIM_APM_SWG_RISK_CLASS.risk_class_str, AVR_DIM_APM_SWG_URL_FILTER.url_filter_full_str, AVR_DIM_APM_SWG_USER_GROUP.user_group_str, AVR_DIM_APM_SWG_APPLICATION.application_name_str, AVR_DIM_APM_SWG_APPLICATION_FAMILY.application_family_name_str     from AVR_STAT_APM_SWG_URL_INFO_T A   LEFT JOIN AVR_DIM_APM_SWG_ACTION ON A.action_id=AVR_DIM_APM_SWG_ACTION.action_id LEFT JOIN AVR_DIM_APM_SWG_HOST_NAME ON A.host_name_crc=AVR_DIM_APM_SWG_HOST_NAME.host_name_crc LEFT JOIN AVR_DIM_APM_SWG_URL ON A.url_crc=AVR_DIM_APM_SWG_URL.url_crc LEFT JOIN AVR_DIM_APM_SWG_CATEGORY ON A.category_crc=AVR_DIM_APM_SWG_CATEGORY.category_crc  LEFT JOIN AVR_DIM_APM_SWG_RISK_CLASS ON A.risk_class_crc=AVR_DIM_APM_SWG_RISK_CLASS.risk_class_crc LEFT JOIN AVR_DIM_APM_SWG_URL_FILTER ON A.url_filter_crc=AVR_DIM_APM_SWG_URL_FILTER.url_filter_crc LEFT JOIN AVR_DIM_APM_SWG_USER_GROUP ON A.user_group_crc=AVR_DIM_APM_SWG_USER_GROUP.user_group_crc LEFT JOIN AVR_DIM_APM_SWG_APPLICATION ON A.application_name_crc=AVR_DIM_APM_SWG_APPLICATION.application_name_crc LEFT JOIN AVR_DIM_APM_SWG_APPLICATION_FAMILY ON A.application_family_name_crc=AVR_DIM_APM_SWG_APPLICATION_FAMILY.application_family_name_crc where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_APM_SWG_USER_INFO "\{AVR_STAT_APM_SWG_USER_INFO|-2\} \{select    A.aggr_period,  A.time_stamp,   A.hits_count,   AVR_DIM_APM_SWG_ACTION.action_str,  ssl_bypass, AVR_DIM_APM_SWG_USERNAME.username_str,  HEX(A.client_ip) as client_ip, AVR_DIM_APM_SWG_CATEGORY.category_full_str, AVR_DIM_APM_SWG_RISK_CLASS.risk_class_str, AVR_DIM_APM_SWG_URL_FILTER.url_filter_full_str, AVR_DIM_APM_SWG_USER_GROUP.user_group_str, AVR_DIM_APM_SWG_APPLICATION.application_name_str, AVR_DIM_APM_SWG_APPLICATION_FAMILY.application_family_name_str     from AVR_STAT_APM_SWG_USER_INFO_T A   LEFT JOIN AVR_DIM_APM_SWG_ACTION ON A.action_id=AVR_DIM_APM_SWG_ACTION.action_id LEFT JOIN AVR_DIM_APM_SWG_USERNAME ON A.username_crc=AVR_DIM_APM_SWG_USERNAME.username_crc LEFT JOIN AVR_DIM_APM_SWG_CATEGORY ON A.category_crc=AVR_DIM_APM_SWG_CATEGORY.category_crc  LEFT JOIN AVR_DIM_APM_SWG_RISK_CLASS ON A.risk_class_crc=AVR_DIM_APM_SWG_RISK_CLASS.risk_class_crc LEFT JOIN AVR_DIM_APM_SWG_URL_FILTER ON A.url_filter_crc=AVR_DIM_APM_SWG_URL_FILTER.url_filter_crc LEFT JOIN AVR_DIM_APM_SWG_USER_GROUP ON A.user_group_crc=AVR_DIM_APM_SWG_USER_GROUP.user_group_crc LEFT JOIN AVR_DIM_APM_SWG_APPLICATION ON A.application_name_crc=AVR_DIM_APM_SWG_APPLICATION.application_name_crc LEFT JOIN AVR_DIM_APM_SWG_APPLICATION_FAMILY ON A.application_family_name_crc=AVR_DIM_APM_SWG_APPLICATION_FAMILY.application_family_name_crc where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_URL "\{AVR_STAT_URL|4\} \{select   A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_DOS_L7_PROFILE.profile_name, A.dosl7_attack_id,  AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_name, HEX( AVR_DIM_POOL_MEMBER.pool_member_addr) as pool_member_addr, AVR_DIM_POOL_MEMBER.pool_member_port, AVR_DIM_URL.url_name, A.max_tps,  A.client_latency_hits,  A.max_client_latency,  A.client_latency,  A.max_server_latency,  A.server_latency,  A.max_request_throughput,  A.total_request_size,  A.max_response_throughput,  A.total_response_size,  A.latency_hist_1,  A.latency_hist_2,  A.latency_hist_3,  A.latency_hist_4,  A.latency_hist_5,  A.latency_hist_6,  A.latency_hist_7,  A.latency_hist_8,  A.latency_hist_9,  A.latency_hist_10,  A.latency_hist_11,  A.latency_hist_12,  A.latency_hist_13,  A.latency_hist_14,  A.latency_hist_15,  A.latency_hist_16   from AVR_STAT_URL_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_DOS_L7_PROFILE ON A.dosl7_profile_crc=AVR_DIM_DOS_L7_PROFILE.dosl7_profile_crc  LEFT JOIN AVR_DIM_TRANSACTION_OUTCOME ON A.transaction_outcome_id=AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_id LEFT JOIN AVR_DIM_POOL_MEMBER ON A.pool_member_crc=AVR_DIM_POOL_MEMBER.pool_member_crc LEFT JOIN AVR_DIM_URL ON A.url_crc=AVR_DIM_URL.url_crc where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_RESPONSE_CODE "\{AVR_STAT_RESPONSE_CODE|4\} \{select   A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_DOS_L7_PROFILE.profile_name, A.dosl7_attack_id,  AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_name, HEX( AVR_DIM_POOL_MEMBER.pool_member_addr) as pool_member_addr, AVR_DIM_POOL_MEMBER.pool_member_port, AVR_DIM_URL.url_name, A.max_tps,  A.client_latency_hits,  A.max_client_latency,  A.client_latency,  A.max_server_latency,  A.server_latency,  A.max_request_throughput,  A.total_request_size,  A.max_response_throughput,  A.total_response_size,  A.response_code, A.latency_hist_1,  A.latency_hist_2,  A.latency_hist_3,  A.latency_hist_4,  A.latency_hist_5,  A.latency_hist_6,  A.latency_hist_7,  A.latency_hist_8,  A.latency_hist_9,  A.latency_hist_10,  A.latency_hist_11,  A.latency_hist_12,  A.latency_hist_13,  A.latency_hist_14,  A.latency_hist_15,  A.latency_hist_16   from AVR_STAT_RESPONSE_CODE_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_DOS_L7_PROFILE ON A.dosl7_profile_crc=AVR_DIM_DOS_L7_PROFILE.dosl7_profile_crc  LEFT JOIN AVR_DIM_TRANSACTION_OUTCOME ON A.transaction_outcome_id=AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_id LEFT JOIN AVR_DIM_POOL_MEMBER ON A.pool_member_crc=AVR_DIM_POOL_MEMBER.pool_member_crc LEFT JOIN AVR_DIM_URL ON A.url_crc=AVR_DIM_URL.url_crc where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_CLIENT_IP "\{AVR_STAT_CLIENT_IP|4\} \{select   A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_DOS_L7_PROFILE.profile_name, A.dosl7_attack_id,  AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_name, HEX( A.client_ip) as client_ip, HEX(AVR_DIM_CLIENT_SUBNET.subnet_addr) as subnet_addr, A.max_tps,  A.client_latency_hits,  A.max_client_latency,  A.client_latency,  A.max_server_latency,  A.server_latency,  A.max_request_throughput,  A.total_request_size,  A.max_response_throughput,  A.total_response_size, A.latency_hist_1,  A.latency_hist_2,  A.latency_hist_3,  A.latency_hist_4,  A.latency_hist_5,  A.latency_hist_6,  A.latency_hist_7,  A.latency_hist_8,  A.latency_hist_9,  A.latency_hist_10,  A.latency_hist_11,  A.latency_hist_12,  A.latency_hist_13,  A.latency_hist_14,  A.latency_hist_15,  A.latency_hist_16   from AVR_STAT_CLIENT_IP_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_DOS_L7_PROFILE ON A.dosl7_profile_crc=AVR_DIM_DOS_L7_PROFILE.dosl7_profile_crc  LEFT JOIN AVR_DIM_TRANSACTION_OUTCOME ON A.transaction_outcome_id=AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_id LEFT JOIN AVR_DIM_CLIENT_SUBNET ON A.subnet_crc=AVR_DIM_CLIENT_SUBNET.subnet_crc where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_POOL_MEMBER "\{AVR_STAT_POOL_MEMBER|4\} \{select  A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_DOS_L7_PROFILE.profile_name, A.dosl7_attack_id,  AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_name, HEX( AVR_DIM_POOL_MEMBER.pool_member_addr) as pool_member_addr, AVR_DIM_POOL_MEMBER.pool_member_port, A.max_tps,  A.client_latency_hits,  A.max_client_latency,  A.client_latency,  A.max_server_latency,  A.server_latency,  A.max_request_throughput,  A.total_request_size,  A.max_response_throughput,  A.total_response_size,  A.latency_hist_1,  A.latency_hist_2,  A.latency_hist_3,  A.latency_hist_4,  A.latency_hist_5,  A.latency_hist_6,  A.latency_hist_7,  A.latency_hist_8,  A.latency_hist_9,  A.latency_hist_10,  A.latency_hist_11,  A.latency_hist_12,  A.latency_hist_13,  A.latency_hist_14,  A.latency_hist_15,  A.latency_hist_16   from AVR_STAT_POOL_MEMBER_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_DOS_L7_PROFILE ON A.dosl7_profile_crc=AVR_DIM_DOS_L7_PROFILE.dosl7_profile_crc  LEFT JOIN AVR_DIM_TRANSACTION_OUTCOME ON A.transaction_outcome_id=AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_id LEFT JOIN AVR_DIM_POOL_MEMBER ON A.pool_member_crc=AVR_DIM_POOL_MEMBER.pool_member_crc  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_ASM_ANOMALIES "\{AVR_STAT_ASM_ANOMALIES|4\} \{select  A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_ASM_POLICY.asm_policy_name, AVR_DIM_ASM_ANOMALIES.anomaly_type_name, A.new_attacks_count,  A.rejected_requests_count,  A.total_violations    from AVR_STAT_ASM_ANOMALIES_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_ASM_POLICY ON A.policy_crc=AVR_DIM_ASM_POLICY.asm_policy_crc and A.vip_crc=AVR_DIM_ASM_POLICY.vip_crc LEFT JOIN AVR_DIM_ASM_ANOMALIES ON A.anomaly_type_id=AVR_DIM_ASM_ANOMALIES.anomaly_type_id  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_ASM_HTTP_ATTACK_DATA "\{AVR_STAT_ASM_HTTP_ATTACK_DATA|4\} \{select  A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_ASM_POLICY.asm_policy_name, A.action_id,  A.severity_id,  A.rating,  A.protocol_id,  A.attack_types,  AVR_DIM_ASM_HTTP_VIRUS.virus_id,  AVR_DIM_ASM_HTTP_VIRUS.virus_name   from AVR_STAT_ASM_HTTP_ATTACK_DATA_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_ASM_POLICY ON A.policy_crc=AVR_DIM_ASM_POLICY.asm_policy_crc and A.vip_crc=AVR_DIM_ASM_POLICY.vip_crc LEFT JOIN AVR_DIM_ASM_HTTP_VIRUS ON A.vip_crc=AVR_DIM_ASM_HTTP_VIRUS.vip_crc  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_ASM_HTTP_VIOLATION "\{AVR_STAT_ASM_HTTP_VIOLATION|4\} \{select  A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_ASM_POLICY.asm_policy_name, AVR_DIM_ENFORCEMENT_ACTION.action_name, A.severity_id,  A.rating,  AVR_DIM_ASM_REPEV_PROTOCOL.protocol_name, A.attack_types,  AVR_DIM_ASM_HTTP_VIOLATION.violation_name, AVR_DIM_ASM_HTTP_VIRUS.virus_id, AVR_DIM_ASM_HTTP_VIRUS.virus_name   from AVR_STAT_ASM_HTTP_VIOLATION_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_ASM_POLICY ON A.policy_crc=AVR_DIM_ASM_POLICY.asm_policy_crc and A.vip_crc=AVR_DIM_ASM_POLICY.vip_crc LEFT JOIN AVR_DIM_ENFORCEMENT_ACTION ON A.action_id=AVR_DIM_ENFORCEMENT_ACTION.action_type   LEFT JOIN AVR_DIM_ASM_REPEV_PROTOCOL ON A.protocol_id=AVR_DIM_ASM_REPEV_PROTOCOL.protocol_id  LEFT JOIN AVR_DIM_ASM_HTTP_VIOLATION ON A.violation_crc=AVR_DIM_ASM_HTTP_VIOLATION.violation_id LEFT JOIN AVR_DIM_ASM_HTTP_VIRUS ON A.vip_crc=AVR_DIM_ASM_HTTP_VIRUS.vip_crc  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_ASM_NETWORK "\{AVR_STAT_ASM_NETWORK|4\} \{select  A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_ASM_POLICY.asm_policy_name, AVR_DIM_ENFORCEMENT_ACTION.action_name, A.total_request_size   from AVR_STAT_ASM_NETWORK_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_ASM_POLICY ON A.policy_crc=AVR_DIM_ASM_POLICY.asm_policy_crc and A.vip_crc=AVR_DIM_ASM_POLICY.vip_crc LEFT JOIN AVR_DIM_ENFORCEMENT_ACTION ON A.action_id=AVR_DIM_ENFORCEMENT_ACTION.action_type  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_GEO_LOCATION "\{AVR_STAT_GEO_LOCATION|4\} \{select  A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_DOS_L7_PROFILE.profile_name, A.dosl7_attack_id,  AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_name, A.country_code,  A.max_tps,  A.client_latency_hits,  A.max_client_latency,  A.client_latency,  A.max_server_latency,  A.server_latency,  A.max_request_throughput,  A.total_request_size,  A.max_response_throughput,  A.total_response_size,  A.latency_hist_1,  A.latency_hist_2,  A.latency_hist_3,  A.latency_hist_4,  A.latency_hist_5,  A.latency_hist_6,  A.latency_hist_7,  A.latency_hist_8,  A.latency_hist_9,  A.latency_hist_10,  A.latency_hist_11,  A.latency_hist_12,  A.latency_hist_13,  A.latency_hist_14,  A.latency_hist_15,  A.latency_hist_16,  A.concurrent_sessions,  A.sessions   from AVR_STAT_GEO_LOCATION_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_DOS_L7_PROFILE ON A.dosl7_profile_crc=AVR_DIM_DOS_L7_PROFILE.dosl7_profile_crc  LEFT JOIN AVR_DIM_TRANSACTION_OUTCOME ON A.transaction_outcome_id=AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_id  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_METHOD "\{AVR_STAT_METHOD|4\} \{select A.aggr_period,  A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_DOS_L7_PROFILE.profile_name, A.dosl7_attack_id,  AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_name, AVR_DIM_METHOD.method_name, A.latency_hist_1,  A.latency_hist_2,  A.latency_hist_3,  A.latency_hist_4,  A.latency_hist_5,  A.latency_hist_6,  A.latency_hist_7,  A.latency_hist_8,  A.latency_hist_9,  A.latency_hist_10,  A.latency_hist_11,  A.latency_hist_12,  A.latency_hist_13,  A.latency_hist_14,  A.latency_hist_15,  A.latency_hist_16    from AVR_STAT_METHOD_T A    LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_DOS_L7_PROFILE ON A.dosl7_profile_crc=AVR_DIM_DOS_L7_PROFILE.dosl7_profile_crc  LEFT JOIN AVR_DIM_TRANSACTION_OUTCOME ON A.transaction_outcome_id=AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_id LEFT JOIN AVR_DIM_METHOD ON A.method_crc=AVR_DIM_METHOD.method_crc where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_USER_AGENT "\{AVR_STAT_USER_AGENT|4\} \{select A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_DOS_L7_PROFILE.profile_name, A.dosl7_attack_id,  AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_name, AVR_DIM_USER_AGENT.user_agent_name, A.latency_hist_1,  A.latency_hist_2,  A.latency_hist_3,  A.latency_hist_4,  A.latency_hist_5,  A.latency_hist_6,  A.latency_hist_7,  A.latency_hist_8,  A.latency_hist_9,  A.latency_hist_10,  A.latency_hist_11,  A.latency_hist_12,  A.latency_hist_13,  A.latency_hist_14,  A.latency_hist_15,  A.latency_hist_16   from AVR_STAT_USER_AGENT_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_DOS_L7_PROFILE ON A.dosl7_profile_crc=AVR_DIM_DOS_L7_PROFILE.dosl7_profile_crc  LEFT JOIN AVR_DIM_TRANSACTION_OUTCOME ON A.transaction_outcome_id=AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_id LEFT JOIN AVR_DIM_USER_AGENT ON A.user_agent_crc=AVR_DIM_USER_AGENT.user_agent_crc  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_VIP "\{AVR_STAT_VIP|4\} \{select  A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_DOS_L7_PROFILE.profile_name, A.dosl7_attack_id,  AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_name, A.max_tps,  A.client_latency_hits,  A.max_client_latency,  A.client_latency,  A.max_server_latency,  A.server_latency,  A.max_request_throughput,  A.total_request_size,  A.max_response_throughput,  A.total_response_size,  A.latency_hist_1,  A.latency_hist_2,  A.latency_hist_3,  A.latency_hist_4,  A.latency_hist_5,  A.latency_hist_6,  A.latency_hist_7,  A.latency_hist_8,  A.latency_hist_9,  A.latency_hist_10,  A.latency_hist_11,  A.latency_hist_12,  A.latency_hist_13,  A.latency_hist_14,  A.latency_hist_15,  A.latency_hist_16,  A.concurrent_sessions,  A.sessions   from AVR_STAT_VIP_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_DOS_L7_PROFILE ON A.dosl7_profile_crc=AVR_DIM_DOS_L7_PROFILE.dosl7_profile_crc  LEFT JOIN AVR_DIM_TRANSACTION_OUTCOME ON A.transaction_outcome_id=AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_id  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_ENFORCED_ACL "\{AVR_STAT_ENFORCED_ACL|6\} \{select  	 	aggr_period, 	time_stamp, 	hits_count, 	AVR_DIM_APPLICATION.app_name,  	AVR_DIM_ACL_RULE.rule_name, 	AVR_DIM_ACL_CONTEXT_INFO_TYPE.context_info_type_name, 	AVR_DIM_ACL_CONTEXT_INFO.context_info_name, 	AVR_DIM_FW_ACL_ACTIONS.action, 	AVR_DIM_VLAN.vlan_name, 	AVR_DIM_ACL_POLICY.policy_name, 	HEX( source_ip ) as source_ip, 	source_port, 	HEX( dest_ip ) as dest_ip, 	dest_port, 	AVR_DIM_ACL_SA_TRANS.translate_reason_name, 	AVR_DIM_ACL_TRANSLATE_TYPE.translate_type_name, 	HEX( self_ip ) as self_ip, 	HEX( server_ip ) as server_ip, 	source_country_code, 	dest_country_code 	from AVR_STAT_ENFORCED_ACL_T A  	LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc  	LEFT JOIN AVR_DIM_ACL_RULE ON A.rule_crc=AVR_DIM_ACL_RULE.rule_crc 	LEFT JOIN AVR_DIM_ACL_CONTEXT_INFO_TYPE ON A.context_info_type_id=AVR_DIM_ACL_CONTEXT_INFO_TYPE.context_info_type_id 	LEFT JOIN AVR_DIM_ACL_CONTEXT_INFO ON A.context_info_crc=AVR_DIM_ACL_CONTEXT_INFO.context_info_crc 	LEFT JOIN AVR_DIM_FW_ACL_ACTIONS ON A.action_id=AVR_DIM_FW_ACL_ACTIONS.action_id 	LEFT JOIN AVR_DIM_VLAN ON A.vlan_crc=AVR_DIM_VLAN.vlan_crc 	LEFT JOIN AVR_DIM_ACL_POLICY ON A.policy_crc=AVR_DIM_ACL_POLICY.policy_crc   	LEFT JOIN AVR_DIM_ACL_SA_TRANS ON A.translate_reason_crc=AVR_DIM_ACL_SA_TRANS.translate_reason_crc 	LEFT JOIN AVR_DIM_ACL_TRANSLATE_TYPE ON A.translate_type_id=AVR_DIM_ACL_TRANSLATE_TYPE.translate_type_id where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_STAGING_ACL "\{AVR_STAT_STAGING_ACL|6\} \{select  	 	aggr_period, 	time_stamp, 	hits_count, 	AVR_DIM_APPLICATION.app_name,  	AVR_DIM_ACL_RULE.rule_name, 	AVR_DIM_ACL_CONTEXT_INFO_TYPE.context_info_type_name, 	AVR_DIM_ACL_CONTEXT_INFO.context_info_name, 	AVR_DIM_FW_ACL_ACTIONS.action, 	AVR_DIM_VLAN.vlan_name, 	AVR_DIM_ACL_POLICY.policy_name, 	HEX( source_ip ) as source_ip, 	source_port, 	HEX( dest_ip ) as dest_ip, 	dest_port, 	 	 	source_country_code, 	dest_country_code 	from AVR_STAT_STAGING_ACL_T A  	LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc  	LEFT JOIN AVR_DIM_ACL_RULE ON A.rule_crc=AVR_DIM_ACL_RULE.rule_crc 	LEFT JOIN AVR_DIM_ACL_CONTEXT_INFO_TYPE ON A.context_info_type_id=AVR_DIM_ACL_CONTEXT_INFO_TYPE.context_info_type_id 	LEFT JOIN AVR_DIM_ACL_CONTEXT_INFO ON A.context_info_crc=AVR_DIM_ACL_CONTEXT_INFO.context_info_crc 	LEFT JOIN AVR_DIM_FW_ACL_ACTIONS ON A.action_id=AVR_DIM_FW_ACL_ACTIONS.action_id 	LEFT JOIN AVR_DIM_VLAN ON A.vlan_crc=AVR_DIM_VLAN.vlan_crc 	LEFT JOIN AVR_DIM_ACL_POLICY ON A.policy_crc=AVR_DIM_ACL_POLICY.policy_crc where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_TCP "\{AVR_STAT_TCP|5\} \{ select  A.aggr_period, A.time_stamp, A.hits_count, AVR_DIM_APPLICATION.app_name, A.request_side, AVR_DIM_VIP.vip_name, HEX(A.remote_host_ip) as remote_host_ip, HEX(A.subnet) as subnet, AVR_DIM_TCP_NEXTHOP.nexthop_str, AVR_DIM_TCP_USERKEY.user_key, AVR_DIM_PEM_SUBSCRIBER.subscriber_name, AVR_DIM_PEM_SUBSCRIBER_TYPE.subscriber_type_name, AVR_DIM_PEM_TOWER.tower_name, AVR_DIM_RADIO_TYPE.radio_type, A.continent_code, AVR_DIM_TCP_COUNTRY_REGION.country_region, AVR_DIM_TCP_CITY_POSTCODE.city_postcode, A.rtt_count, A.rtt_sum, A.rtt_max, A.rtt_min, A.rtt_var_sum, A.pkts_recv, A.pkts_lost, A.pkts_sent, A.goodput_snd, A.goodput_rcv, A.ds_3whs, A.ds_rwnd, A.ds_retx, A.ds_waitforack, A.ds_closing, A.ds_cwnd, A.ds_nagle, A.ds_sndbuf, A.ds_app, A.ds_ratepace, A.cs_numstarts, A.cs_numendings, A.cs_dursum from AVR_STAT_TCP_T A LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc   LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc    LEFT JOIN AVR_DIM_TCP_NEXTHOP ON A.nexthop_crc=AVR_DIM_TCP_NEXTHOP.nexthop_crc LEFT JOIN AVR_DIM_TCP_USERKEY ON A.user_key_crc=AVR_DIM_TCP_USERKEY.user_key_crc LEFT JOIN AVR_DIM_TCP_CITY_POSTCODE ON A.city_postcode_crc=AVR_DIM_TCP_CITY_POSTCODE.city_postcode_crc LEFT JOIN AVR_DIM_TCP_COUNTRY_REGION ON A.country_region_crc=AVR_DIM_TCP_COUNTRY_REGION.country_region_crc LEFT JOIN AVR_DIM_PEM_SUBSCRIBER ON A.subscriber_name_crc=AVR_DIM_PEM_SUBSCRIBER.subscriber_name_crc LEFT JOIN AVR_DIM_PEM_TOWER ON A.tower_name_crc=AVR_DIM_PEM_TOWER.tower_name_crc LEFT JOIN AVR_DIM_RADIO_TYPE ON A.radio_type_crc=AVR_DIM_RADIO_TYPE.radio_type_crc LEFT JOIN AVR_DIM_PEM_SUBSCRIBER_TYPE ON A.subscriber_id_type=AVR_DIM_PEM_SUBSCRIBER_TYPE.subscriber_type_id  where A.time_stamp IN (<tosendbuckets>)\}"
		}
	}	
	if {$::version == "12.1.0" || $::version == "12.1.1" || $::version == "12.0.0"} {
		array set avrmapping {
			AVR_STAT_DNS_QUERY "\{AVR_STAT_DNS_QUERY|4\} \{ select     A.aggr_period,   A.time_stamp,    A.hits_count, AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, attack_id, attack_type_id, AVR_DIM_DNS_QUERY_TYPE.query_type_name, AVR_DIM_DNS_QUERY_NAME.query_name, AVR_DIM_DNS_REQUEST_TYPE.request_type_name   from AVR_STAT_DNS_QUERY_T A  LEFT JOIN AVR_DIM_DNS_QUERY_TYPE ON A.query_type_id=AVR_DIM_DNS_QUERY_TYPE.query_type_id LEFT JOIN AVR_DIM_DNS_QUERY_NAME ON A.query_name_crc=AVR_DIM_DNS_QUERY_NAME.query_name_crc LEFT JOIN AVR_DIM_DNS_REQUEST_TYPE ON A.transaction_outcome_id=AVR_DIM_DNS_REQUEST_TYPE.request_type_id   LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc   where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_DNS_CLIENT_IP "\{AVR_STAT_DNS_CLIENT_IP|4\} \{ select     A.aggr_period,   A.time_stamp,    A.hits_count, AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, attack_id, attack_type_id, AVR_DIM_DNS_QUERY_TYPE.query_type_name, HEX(A.client_ip) as client_ip,  AVR_DIM_DNS_REQUEST_TYPE.request_type_name   from AVR_STAT_DNS_CLIENT_IP_T A  LEFT JOIN AVR_DIM_DNS_QUERY_TYPE ON A.query_type_id=AVR_DIM_DNS_QUERY_TYPE.query_type_id LEFT JOIN AVR_DIM_DNS_REQUEST_TYPE ON A.transaction_outcome_id=AVR_DIM_DNS_REQUEST_TYPE.request_type_id   LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc   where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_APM_SWG_BLOCKED "\{AVR_STAT_APM_SWG_BLOCKED|-2\} \{select    A.aggr_period,  A.time_stamp,   A.hits_count,   ssl_bypass, AVR_DIM_APM_SWG_USERNAME.username_str, AVR_DIM_APM_SWG_URL.url_str,  HEX(A.client_ip) as client_ip, AVR_DIM_APM_SWG_CATEGORY.category_full_str, AVR_DIM_APM_SWG_RISK_CLASS.risk_class_str, AVR_DIM_APM_SWG_URL_FILTER.url_filter_full_str, AVR_DIM_APM_SWG_USER_GROUP.user_group_str, AVR_DIM_APM_SWG_APPLICATION.application_name_str, AVR_DIM_APM_SWG_APPLICATION_FAMILY.application_family_name_str     from AVR_STAT_APM_SWG_BLOCKED_T A   LEFT JOIN AVR_DIM_APM_SWG_USERNAME ON A.username_crc=AVR_DIM_APM_SWG_USERNAME.username_crc LEFT JOIN AVR_DIM_APM_SWG_URL ON A.url_crc=AVR_DIM_APM_SWG_URL.url_crc LEFT JOIN AVR_DIM_APM_SWG_CATEGORY ON A.category_crc=AVR_DIM_APM_SWG_CATEGORY.category_crc  LEFT JOIN AVR_DIM_APM_SWG_RISK_CLASS ON A.risk_class_crc=AVR_DIM_APM_SWG_RISK_CLASS.risk_class_crc LEFT JOIN AVR_DIM_APM_SWG_URL_FILTER ON A.url_filter_crc=AVR_DIM_APM_SWG_URL_FILTER.url_filter_crc LEFT JOIN AVR_DIM_APM_SWG_USER_GROUP ON A.user_group_crc=AVR_DIM_APM_SWG_USER_GROUP.user_group_crc LEFT JOIN AVR_DIM_APM_SWG_APPLICATION ON A.application_name_crc=AVR_DIM_APM_SWG_APPLICATION.application_name_crc LEFT JOIN AVR_DIM_APM_SWG_APPLICATION_FAMILY ON A.application_family_name_crc=AVR_DIM_APM_SWG_APPLICATION_FAMILY.application_family_name_crc where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_APM_SWG_URL_INFO "\{AVR_STAT_APM_SWG_URL_INFO|-2\} \{select    A.aggr_period,  A.time_stamp,   A.hits_count,   AVR_DIM_APM_SWG_ACTION.action_str,  ssl_bypass, AVR_DIM_APM_SWG_HOST_NAME.host_name_str, AVR_DIM_APM_SWG_URL.url_str, AVR_DIM_APM_SWG_CATEGORY.category_full_str, AVR_DIM_APM_SWG_RISK_CLASS.risk_class_str, AVR_DIM_APM_SWG_URL_FILTER.url_filter_full_str, AVR_DIM_APM_SWG_USER_GROUP.user_group_str, AVR_DIM_APM_SWG_APPLICATION.application_name_str, AVR_DIM_APM_SWG_APPLICATION_FAMILY.application_family_name_str     from AVR_STAT_APM_SWG_URL_INFO_T A   LEFT JOIN AVR_DIM_APM_SWG_ACTION ON A.action_id=AVR_DIM_APM_SWG_ACTION.action_id LEFT JOIN AVR_DIM_APM_SWG_HOST_NAME ON A.host_name_crc=AVR_DIM_APM_SWG_HOST_NAME.host_name_crc LEFT JOIN AVR_DIM_APM_SWG_URL ON A.url_crc=AVR_DIM_APM_SWG_URL.url_crc LEFT JOIN AVR_DIM_APM_SWG_CATEGORY ON A.category_crc=AVR_DIM_APM_SWG_CATEGORY.category_crc  LEFT JOIN AVR_DIM_APM_SWG_RISK_CLASS ON A.risk_class_crc=AVR_DIM_APM_SWG_RISK_CLASS.risk_class_crc LEFT JOIN AVR_DIM_APM_SWG_URL_FILTER ON A.url_filter_crc=AVR_DIM_APM_SWG_URL_FILTER.url_filter_crc LEFT JOIN AVR_DIM_APM_SWG_USER_GROUP ON A.user_group_crc=AVR_DIM_APM_SWG_USER_GROUP.user_group_crc LEFT JOIN AVR_DIM_APM_SWG_APPLICATION ON A.application_name_crc=AVR_DIM_APM_SWG_APPLICATION.application_name_crc LEFT JOIN AVR_DIM_APM_SWG_APPLICATION_FAMILY ON A.application_family_name_crc=AVR_DIM_APM_SWG_APPLICATION_FAMILY.application_family_name_crc where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_APM_SWG_USER_INFO "\{AVR_STAT_APM_SWG_USER_INFO|-2\} \{select    A.aggr_period,  A.time_stamp,   A.hits_count,   AVR_DIM_APM_SWG_ACTION.action_str,  ssl_bypass, AVR_DIM_APM_SWG_USERNAME.username_str,  HEX(A.client_ip) as client_ip, AVR_DIM_APM_SWG_CATEGORY.category_full_str, AVR_DIM_APM_SWG_RISK_CLASS.risk_class_str, AVR_DIM_APM_SWG_URL_FILTER.url_filter_full_str, AVR_DIM_APM_SWG_USER_GROUP.user_group_str, AVR_DIM_APM_SWG_APPLICATION.application_name_str, AVR_DIM_APM_SWG_APPLICATION_FAMILY.application_family_name_str     from AVR_STAT_APM_SWG_USER_INFO_T A   LEFT JOIN AVR_DIM_APM_SWG_ACTION ON A.action_id=AVR_DIM_APM_SWG_ACTION.action_id LEFT JOIN AVR_DIM_APM_SWG_USERNAME ON A.username_crc=AVR_DIM_APM_SWG_USERNAME.username_crc LEFT JOIN AVR_DIM_APM_SWG_CATEGORY ON A.category_crc=AVR_DIM_APM_SWG_CATEGORY.category_crc  LEFT JOIN AVR_DIM_APM_SWG_RISK_CLASS ON A.risk_class_crc=AVR_DIM_APM_SWG_RISK_CLASS.risk_class_crc LEFT JOIN AVR_DIM_APM_SWG_URL_FILTER ON A.url_filter_crc=AVR_DIM_APM_SWG_URL_FILTER.url_filter_crc LEFT JOIN AVR_DIM_APM_SWG_USER_GROUP ON A.user_group_crc=AVR_DIM_APM_SWG_USER_GROUP.user_group_crc LEFT JOIN AVR_DIM_APM_SWG_APPLICATION ON A.application_name_crc=AVR_DIM_APM_SWG_APPLICATION.application_name_crc LEFT JOIN AVR_DIM_APM_SWG_APPLICATION_FAMILY ON A.application_family_name_crc=AVR_DIM_APM_SWG_APPLICATION_FAMILY.application_family_name_crc where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_URL "\{AVR_STAT_URL|4\} \{select   A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_DOS_L7_PROFILE.profile_name, A.dosl7_attack_id,  AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_name, HEX( AVR_DIM_POOL_MEMBER.pool_member_addr) as pool_member_addr, AVR_DIM_POOL_MEMBER.pool_member_port, AVR_DIM_URL.url_name, A.max_tps,  A.client_latency_hits,  A.max_client_latency,  A.client_latency,  A.max_server_latency,  A.server_latency,  A.max_request_throughput,  A.total_request_size,  A.max_response_throughput,  A.total_response_size,  A.latency_hist_1,  A.latency_hist_2,  A.latency_hist_3,  A.latency_hist_4,  A.latency_hist_5,  A.latency_hist_6,  A.latency_hist_7,  A.latency_hist_8,  A.latency_hist_9,  A.latency_hist_10,  A.latency_hist_11,  A.latency_hist_12,  A.latency_hist_13,  A.latency_hist_14,  A.latency_hist_15,  A.latency_hist_16   from AVR_STAT_URL_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_DOS_L7_PROFILE ON A.dosl7_profile_crc=AVR_DIM_DOS_L7_PROFILE.dosl7_profile_crc  LEFT JOIN AVR_DIM_TRANSACTION_OUTCOME ON A.transaction_outcome_id=AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_id LEFT JOIN AVR_DIM_POOL_MEMBER ON A.pool_member_crc=AVR_DIM_POOL_MEMBER.pool_member_crc LEFT JOIN AVR_DIM_URL ON A.url_crc=AVR_DIM_URL.url_crc where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_RESPONSE_CODE "\{AVR_STAT_RESPONSE_CODE|4\} \{select   A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_DOS_L7_PROFILE.profile_name, A.dosl7_attack_id,  AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_name, HEX( AVR_DIM_POOL_MEMBER.pool_member_addr) as pool_member_addr, AVR_DIM_POOL_MEMBER.pool_member_port, AVR_DIM_URL.url_name, A.max_tps,  A.client_latency_hits,  A.max_client_latency,  A.client_latency,  A.max_server_latency,  A.server_latency,  A.max_request_throughput,  A.total_request_size,  A.max_response_throughput,  A.total_response_size,  A.response_code, A.latency_hist_1,  A.latency_hist_2,  A.latency_hist_3,  A.latency_hist_4,  A.latency_hist_5,  A.latency_hist_6,  A.latency_hist_7,  A.latency_hist_8,  A.latency_hist_9,  A.latency_hist_10,  A.latency_hist_11,  A.latency_hist_12,  A.latency_hist_13,  A.latency_hist_14,  A.latency_hist_15,  A.latency_hist_16   from AVR_STAT_RESPONSE_CODE_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_DOS_L7_PROFILE ON A.dosl7_profile_crc=AVR_DIM_DOS_L7_PROFILE.dosl7_profile_crc  LEFT JOIN AVR_DIM_TRANSACTION_OUTCOME ON A.transaction_outcome_id=AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_id LEFT JOIN AVR_DIM_POOL_MEMBER ON A.pool_member_crc=AVR_DIM_POOL_MEMBER.pool_member_crc LEFT JOIN AVR_DIM_URL ON A.url_crc=AVR_DIM_URL.url_crc where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_CLIENT_IP "\{AVR_STAT_CLIENT_IP|4\} \{select   A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_DOS_L7_PROFILE.profile_name, A.dosl7_attack_id,  AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_name, HEX( A.client_ip) as client_ip, HEX(AVR_DIM_CLIENT_SUBNET.subnet_addr) as subnet_addr, A.max_tps,  A.client_latency_hits,  A.max_client_latency,  A.client_latency,  A.max_server_latency,  A.server_latency,  A.max_request_throughput,  A.total_request_size,  A.max_response_throughput,  A.total_response_size, A.latency_hist_1,  A.latency_hist_2,  A.latency_hist_3,  A.latency_hist_4,  A.latency_hist_5,  A.latency_hist_6,  A.latency_hist_7,  A.latency_hist_8,  A.latency_hist_9,  A.latency_hist_10,  A.latency_hist_11,  A.latency_hist_12,  A.latency_hist_13,  A.latency_hist_14,  A.latency_hist_15,  A.latency_hist_16   from AVR_STAT_CLIENT_IP_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_DOS_L7_PROFILE ON A.dosl7_profile_crc=AVR_DIM_DOS_L7_PROFILE.dosl7_profile_crc  LEFT JOIN AVR_DIM_TRANSACTION_OUTCOME ON A.transaction_outcome_id=AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_id LEFT JOIN AVR_DIM_CLIENT_SUBNET ON A.subnet_crc=AVR_DIM_CLIENT_SUBNET.subnet_crc where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_POOL_MEMBER "\{AVR_STAT_POOL_MEMBER|4\} \{select  A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_DOS_L7_PROFILE.profile_name, A.dosl7_attack_id,  AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_name, HEX( AVR_DIM_POOL_MEMBER.pool_member_addr) as pool_member_addr, AVR_DIM_POOL_MEMBER.pool_member_port, A.max_tps,  A.client_latency_hits,  A.max_client_latency,  A.client_latency,  A.max_server_latency,  A.server_latency,  A.max_request_throughput,  A.total_request_size,  A.max_response_throughput,  A.total_response_size,  A.latency_hist_1,  A.latency_hist_2,  A.latency_hist_3,  A.latency_hist_4,  A.latency_hist_5,  A.latency_hist_6,  A.latency_hist_7,  A.latency_hist_8,  A.latency_hist_9,  A.latency_hist_10,  A.latency_hist_11,  A.latency_hist_12,  A.latency_hist_13,  A.latency_hist_14,  A.latency_hist_15,  A.latency_hist_16   from AVR_STAT_POOL_MEMBER_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_DOS_L7_PROFILE ON A.dosl7_profile_crc=AVR_DIM_DOS_L7_PROFILE.dosl7_profile_crc  LEFT JOIN AVR_DIM_TRANSACTION_OUTCOME ON A.transaction_outcome_id=AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_id LEFT JOIN AVR_DIM_POOL_MEMBER ON A.pool_member_crc=AVR_DIM_POOL_MEMBER.pool_member_crc  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_ASM_ANOMALIES "\{AVR_STAT_ASM_ANOMALIES|4\} \{select  A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_ASM_POLICY.asm_policy_name, AVR_DIM_ASM_ANOMALIES.anomaly_type_name, A.new_attacks_count,  A.rejected_requests_count,  A.total_violations    from AVR_STAT_ASM_ANOMALIES_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_ASM_POLICY ON A.policy_crc=AVR_DIM_ASM_POLICY.asm_policy_crc and A.vip_crc=AVR_DIM_ASM_POLICY.vip_crc LEFT JOIN AVR_DIM_ASM_ANOMALIES ON A.anomaly_type_id=AVR_DIM_ASM_ANOMALIES.anomaly_type_id  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_ASM_HTTP_ATTACK_DATA "\{AVR_STAT_ASM_HTTP_ATTACK_DATA|4\} \{select  A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_ASM_POLICY.asm_policy_name, A.action_id,  A.severity_id,  A.rating,  A.protocol_id,  A.attack_types,  AVR_DIM_ASM_HTTP_VIRUS.virus_id,  AVR_DIM_ASM_HTTP_VIRUS.virus_name   from AVR_STAT_ASM_HTTP_ATTACK_DATA_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_ASM_POLICY ON A.policy_crc=AVR_DIM_ASM_POLICY.asm_policy_crc and A.vip_crc=AVR_DIM_ASM_POLICY.vip_crc LEFT JOIN AVR_DIM_ASM_HTTP_VIRUS ON A.vip_crc=AVR_DIM_ASM_HTTP_VIRUS.vip_crc  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_ASM_HTTP_VIOLATION "\{AVR_STAT_ASM_HTTP_VIOLATION|4\} \{select  A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_ASM_POLICY.asm_policy_name, AVR_DIM_ENFORCEMENT_ACTION.action_name, A.severity_id,  A.rating,  AVR_DIM_ASM_REPEV_PROTOCOL.protocol_name, A.attack_types,  AVR_DIM_ASM_HTTP_VIOLATION.violation_name, AVR_DIM_ASM_HTTP_VIRUS.virus_id, AVR_DIM_ASM_HTTP_VIRUS.virus_name   from AVR_STAT_ASM_HTTP_VIOLATION_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_ASM_POLICY ON A.policy_crc=AVR_DIM_ASM_POLICY.asm_policy_crc and A.vip_crc=AVR_DIM_ASM_POLICY.vip_crc LEFT JOIN AVR_DIM_ENFORCEMENT_ACTION ON A.action_id=AVR_DIM_ENFORCEMENT_ACTION.action_type   LEFT JOIN AVR_DIM_ASM_REPEV_PROTOCOL ON A.protocol_id=AVR_DIM_ASM_REPEV_PROTOCOL.protocol_id  LEFT JOIN AVR_DIM_ASM_HTTP_VIOLATION ON A.violation_crc=AVR_DIM_ASM_HTTP_VIOLATION.violation_id LEFT JOIN AVR_DIM_ASM_HTTP_VIRUS ON A.vip_crc=AVR_DIM_ASM_HTTP_VIRUS.vip_crc  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_ASM_NETWORK "\{AVR_STAT_ASM_NETWORK|4\} \{select  A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_ASM_POLICY.asm_policy_name, AVR_DIM_ENFORCEMENT_ACTION.action_name, A.total_request_size   from AVR_STAT_ASM_NETWORK_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_ASM_POLICY ON A.policy_crc=AVR_DIM_ASM_POLICY.asm_policy_crc and A.vip_crc=AVR_DIM_ASM_POLICY.vip_crc LEFT JOIN AVR_DIM_ENFORCEMENT_ACTION ON A.action_id=AVR_DIM_ENFORCEMENT_ACTION.action_type  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_GEO_LOCATION "\{AVR_STAT_GEO_LOCATION|4\} \{select  A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_DOS_L7_PROFILE.profile_name, A.dosl7_attack_id,  AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_name, A.country_code,  A.max_tps,  A.client_latency_hits,  A.max_client_latency,  A.client_latency,  A.max_server_latency,  A.server_latency,  A.max_request_throughput,  A.total_request_size,  A.max_response_throughput,  A.total_response_size,  A.latency_hist_1,  A.latency_hist_2,  A.latency_hist_3,  A.latency_hist_4,  A.latency_hist_5,  A.latency_hist_6,  A.latency_hist_7,  A.latency_hist_8,  A.latency_hist_9,  A.latency_hist_10,  A.latency_hist_11,  A.latency_hist_12,  A.latency_hist_13,  A.latency_hist_14,  A.latency_hist_15,  A.latency_hist_16,  A.concurrent_sessions,  A.sessions   from AVR_STAT_GEO_LOCATION_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_DOS_L7_PROFILE ON A.dosl7_profile_crc=AVR_DIM_DOS_L7_PROFILE.dosl7_profile_crc  LEFT JOIN AVR_DIM_TRANSACTION_OUTCOME ON A.transaction_outcome_id=AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_id  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_METHOD "\{AVR_STAT_METHOD|4\} \{select A.aggr_period,  A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_DOS_L7_PROFILE.profile_name, A.dosl7_attack_id,  AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_name, AVR_DIM_METHOD.method_name, A.latency_hist_1,  A.latency_hist_2,  A.latency_hist_3,  A.latency_hist_4,  A.latency_hist_5,  A.latency_hist_6,  A.latency_hist_7,  A.latency_hist_8,  A.latency_hist_9,  A.latency_hist_10,  A.latency_hist_11,  A.latency_hist_12,  A.latency_hist_13,  A.latency_hist_14,  A.latency_hist_15,  A.latency_hist_16    from AVR_STAT_METHOD_T A    LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_DOS_L7_PROFILE ON A.dosl7_profile_crc=AVR_DIM_DOS_L7_PROFILE.dosl7_profile_crc  LEFT JOIN AVR_DIM_TRANSACTION_OUTCOME ON A.transaction_outcome_id=AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_id LEFT JOIN AVR_DIM_METHOD ON A.method_crc=AVR_DIM_METHOD.method_crc where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_USER_AGENT "\{AVR_STAT_USER_AGENT|4\} \{select A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_DOS_L7_PROFILE.profile_name, A.dosl7_attack_id,  AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_name, AVR_DIM_USER_AGENT.user_agent_name, A.latency_hist_1,  A.latency_hist_2,  A.latency_hist_3,  A.latency_hist_4,  A.latency_hist_5,  A.latency_hist_6,  A.latency_hist_7,  A.latency_hist_8,  A.latency_hist_9,  A.latency_hist_10,  A.latency_hist_11,  A.latency_hist_12,  A.latency_hist_13,  A.latency_hist_14,  A.latency_hist_15,  A.latency_hist_16   from AVR_STAT_USER_AGENT_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_DOS_L7_PROFILE ON A.dosl7_profile_crc=AVR_DIM_DOS_L7_PROFILE.dosl7_profile_crc  LEFT JOIN AVR_DIM_TRANSACTION_OUTCOME ON A.transaction_outcome_id=AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_id LEFT JOIN AVR_DIM_USER_AGENT ON A.user_agent_crc=AVR_DIM_USER_AGENT.user_agent_crc  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_VIP "\{AVR_STAT_VIP|4\} \{select  A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_DOS_L7_PROFILE.profile_name, A.dosl7_attack_id,  AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_name, A.max_tps,  A.client_latency_hits,  A.max_client_latency,  A.client_latency,  A.max_server_latency,  A.server_latency,  A.max_request_throughput,  A.total_request_size,  A.max_response_throughput,  A.total_response_size,  A.latency_hist_1,  A.latency_hist_2,  A.latency_hist_3,  A.latency_hist_4,  A.latency_hist_5,  A.latency_hist_6,  A.latency_hist_7,  A.latency_hist_8,  A.latency_hist_9,  A.latency_hist_10,  A.latency_hist_11,  A.latency_hist_12,  A.latency_hist_13,  A.latency_hist_14,  A.latency_hist_15,  A.latency_hist_16,  A.concurrent_sessions,  A.sessions   from AVR_STAT_VIP_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_DOS_L7_PROFILE ON A.dosl7_profile_crc=AVR_DIM_DOS_L7_PROFILE.dosl7_profile_crc  LEFT JOIN AVR_DIM_TRANSACTION_OUTCOME ON A.transaction_outcome_id=AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_id  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_ENFORCED_ACL "\{AVR_STAT_ENFORCED_ACL|6\} \{select  	 	aggr_period, 	time_stamp, 	hits_count, 	AVR_DIM_APPLICATION.app_name,  	AVR_DIM_ACL_RULE.rule_name, 	AVR_DIM_ACL_CONTEXT_INFO_TYPE.context_info_type_name, 	AVR_DIM_ACL_CONTEXT_INFO.context_info_name, 	AVR_DIM_FW_ACL_ACTIONS.action, 	AVR_DIM_VLAN.vlan_name, 	AVR_DIM_ACL_POLICY.policy_name, 	HEX( source_ip ) as source_ip, 	source_port, 	HEX( dest_ip ) as dest_ip, 	dest_port, 	AVR_DIM_ACL_SA_TRANS.translate_reason_name, 	AVR_DIM_ACL_TRANSLATE_TYPE.translate_type_name, 	HEX( self_ip ) as self_ip, 	HEX( server_ip ) as server_ip, 	source_country_code, 	dest_country_code 	from AVR_STAT_ENFORCED_ACL_T A  	LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc  	LEFT JOIN AVR_DIM_ACL_RULE ON A.rule_crc=AVR_DIM_ACL_RULE.rule_crc 	LEFT JOIN AVR_DIM_ACL_CONTEXT_INFO_TYPE ON A.context_info_type_id=AVR_DIM_ACL_CONTEXT_INFO_TYPE.context_info_type_id 	LEFT JOIN AVR_DIM_ACL_CONTEXT_INFO ON A.context_info_crc=AVR_DIM_ACL_CONTEXT_INFO.context_info_crc 	LEFT JOIN AVR_DIM_FW_ACL_ACTIONS ON A.action_id=AVR_DIM_FW_ACL_ACTIONS.action_id 	LEFT JOIN AVR_DIM_VLAN ON A.vlan_crc=AVR_DIM_VLAN.vlan_crc 	LEFT JOIN AVR_DIM_ACL_POLICY ON A.policy_crc=AVR_DIM_ACL_POLICY.policy_crc   	LEFT JOIN AVR_DIM_ACL_SA_TRANS ON A.translate_reason_crc=AVR_DIM_ACL_SA_TRANS.translate_reason_crc 	LEFT JOIN AVR_DIM_ACL_TRANSLATE_TYPE ON A.translate_type_id=AVR_DIM_ACL_TRANSLATE_TYPE.translate_type_id where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_STAGING_ACL "\{AVR_STAT_STAGING_ACL|6\} \{select  	 	aggr_period, 	time_stamp, 	hits_count, 	AVR_DIM_APPLICATION.app_name,  	AVR_DIM_ACL_RULE.rule_name, 	AVR_DIM_ACL_CONTEXT_INFO_TYPE.context_info_type_name, 	AVR_DIM_ACL_CONTEXT_INFO.context_info_name, 	AVR_DIM_FW_ACL_ACTIONS.action, 	AVR_DIM_VLAN.vlan_name, 	AVR_DIM_ACL_POLICY.policy_name, 	HEX( source_ip ) as source_ip, 	source_port, 	HEX( dest_ip ) as dest_ip, 	dest_port, 	 	 	source_country_code, 	dest_country_code 	from AVR_STAT_STAGING_ACL_T A  	LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc  	LEFT JOIN AVR_DIM_ACL_RULE ON A.rule_crc=AVR_DIM_ACL_RULE.rule_crc 	LEFT JOIN AVR_DIM_ACL_CONTEXT_INFO_TYPE ON A.context_info_type_id=AVR_DIM_ACL_CONTEXT_INFO_TYPE.context_info_type_id 	LEFT JOIN AVR_DIM_ACL_CONTEXT_INFO ON A.context_info_crc=AVR_DIM_ACL_CONTEXT_INFO.context_info_crc 	LEFT JOIN AVR_DIM_FW_ACL_ACTIONS ON A.action_id=AVR_DIM_FW_ACL_ACTIONS.action_id 	LEFT JOIN AVR_DIM_VLAN ON A.vlan_crc=AVR_DIM_VLAN.vlan_crc 	LEFT JOIN AVR_DIM_ACL_POLICY ON A.policy_crc=AVR_DIM_ACL_POLICY.policy_crc where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_TCP "\{AVR_STAT_TCP|5\} \{ select  A.aggr_period, A.time_stamp, A.hits_count, AVR_DIM_APPLICATION.app_name, A.request_side, AVR_DIM_VIP.vip_name, HEX(A.remote_host_ip) as remote_host_ip, HEX(A.subnet) as subnet, AVR_DIM_TCP_NEXTHOP.nexthop_str, AVR_DIM_TCP_USERKEY.user_key, AVR_DIM_PEM_SUBSCRIBER.subscriber_name, AVR_DIM_PEM_SUBSCRIBER_TYPE.subscriber_type_name, AVR_DIM_PEM_TOWER.tower_name, AVR_DIM_RADIO_TYPE.radio_type, A.continent_code, AVR_DIM_TCP_COUNTRY_REGION.country_region, AVR_DIM_TCP_CITY_POSTCODE.city_postcode, A.rtt_count, A.rtt_sum, A.rtt_max, A.rtt_min, A.rtt_var_sum, A.pkts_recv, A.pkts_lost, A.pkts_sent, A.goodput_snd, A.goodput_rcv, A.ds_3whs, A.ds_rwnd, A.ds_retx, A.ds_waitforack, A.ds_closing, A.ds_cwnd, A.ds_nagle, A.ds_sndbuf, A.ds_app, A.ds_ratepace, A.cs_numstarts, A.cs_numendings, A.cs_dursum from AVR_STAT_TCP_T A LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc   LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc    LEFT JOIN AVR_DIM_TCP_NEXTHOP ON A.nexthop_crc=AVR_DIM_TCP_NEXTHOP.nexthop_crc LEFT JOIN AVR_DIM_TCP_USERKEY ON A.user_key_crc=AVR_DIM_TCP_USERKEY.user_key_crc LEFT JOIN AVR_DIM_TCP_CITY_POSTCODE ON A.city_postcode_crc=AVR_DIM_TCP_CITY_POSTCODE.city_postcode_crc LEFT JOIN AVR_DIM_TCP_COUNTRY_REGION ON A.country_region_crc=AVR_DIM_TCP_COUNTRY_REGION.country_region_crc LEFT JOIN AVR_DIM_PEM_SUBSCRIBER ON A.subscriber_name_crc=AVR_DIM_PEM_SUBSCRIBER.subscriber_name_crc LEFT JOIN AVR_DIM_PEM_TOWER ON A.tower_name_crc=AVR_DIM_PEM_TOWER.tower_name_crc LEFT JOIN AVR_DIM_RADIO_TYPE ON A.radio_type_crc=AVR_DIM_RADIO_TYPE.radio_type_crc LEFT JOIN AVR_DIM_PEM_SUBSCRIBER_TYPE ON A.subscriber_id_type=AVR_DIM_PEM_SUBSCRIBER_TYPE.subscriber_type_id  where A.time_stamp IN (<tosendbuckets>)\}"
		}
	}
	if {$::version == "11.6.0" || $::version == "11.6.1" || $::version == "11.6.2" || $::version == "11.6.3" || $::version == "11.6.4" || $::version == "11.6.5" || $::version == "11.6.6"} {
		array set avrmapping {
			AVR_STAT_DNS_QUERY "\{AVR_STAT_DNS_QUERY|4\} \{ select     A.aggr_period,   A.time_stamp,    A.hits_count, AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name,  AVR_DIM_DNS_QUERY_TYPE.query_type_name, AVR_DIM_DNS_QUERY_NAME.query_name   from AVR_STAT_DNS_QUERY_T A  LEFT JOIN AVR_DIM_DNS_QUERY_TYPE ON A.query_type_id=AVR_DIM_DNS_QUERY_TYPE.query_type_id LEFT JOIN AVR_DIM_DNS_QUERY_NAME ON A.query_name_crc=AVR_DIM_DNS_QUERY_NAME.query_name_crc   LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc   where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_DNS_CLIENT_IP "\{AVR_STAT_DNS_CLIENT_IP|4\} \{ select     A.aggr_period,   A.time_stamp,    A.hits_count, AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name,  AVR_DIM_DNS_QUERY_TYPE.query_type_name, HEX(A.client_ip) as client_ip   from AVR_STAT_DNS_CLIENT_IP_T A  LEFT JOIN AVR_DIM_DNS_QUERY_TYPE ON A.query_type_id=AVR_DIM_DNS_QUERY_TYPE.query_type_id   LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc   where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_APM_SWG_BLOCKED "\{AVR_STAT_APM_SWG_BLOCKED|-2\} \{select    A.aggr_period,  A.time_stamp,   A.hits_count,   ssl_bypass, AVR_DIM_APM_SWG_USERNAME.username_str, AVR_DIM_APM_SWG_URL.url_str,  HEX(A.client_ip) as client_ip, AVR_DIM_APM_SWG_CATEGORY.category_full_str, AVR_DIM_APM_SWG_RISK_CLASS.risk_class_str, AVR_DIM_APM_SWG_URL_FILTER.url_filter_full_str, AVR_DIM_APM_SWG_USER_GROUP.user_group_str, AVR_DIM_APM_SWG_APPLICATION.application_name_str, AVR_DIM_APM_SWG_APPLICATION_FAMILY.application_family_name_str     from AVR_STAT_APM_SWG_BLOCKED_T A   LEFT JOIN AVR_DIM_APM_SWG_USERNAME ON A.username_crc=AVR_DIM_APM_SWG_USERNAME.username_crc LEFT JOIN AVR_DIM_APM_SWG_URL ON A.url_crc=AVR_DIM_APM_SWG_URL.url_crc LEFT JOIN AVR_DIM_APM_SWG_CATEGORY ON A.category_crc=AVR_DIM_APM_SWG_CATEGORY.category_crc  LEFT JOIN AVR_DIM_APM_SWG_RISK_CLASS ON A.risk_class_crc=AVR_DIM_APM_SWG_RISK_CLASS.risk_class_crc LEFT JOIN AVR_DIM_APM_SWG_URL_FILTER ON A.url_filter_crc=AVR_DIM_APM_SWG_URL_FILTER.url_filter_crc LEFT JOIN AVR_DIM_APM_SWG_USER_GROUP ON A.user_group_crc=AVR_DIM_APM_SWG_USER_GROUP.user_group_crc LEFT JOIN AVR_DIM_APM_SWG_APPLICATION ON A.application_name_crc=AVR_DIM_APM_SWG_APPLICATION.application_name_crc LEFT JOIN AVR_DIM_APM_SWG_APPLICATION_FAMILY ON A.application_family_name_crc=AVR_DIM_APM_SWG_APPLICATION_FAMILY.application_family_name_crc where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_APM_SWG_URL_INFO "\{AVR_STAT_APM_SWG_URL_INFO|-2\} \{select    A.aggr_period,  A.time_stamp,   A.hits_count,   AVR_DIM_APM_SWG_ACTION.action_str,  ssl_bypass, AVR_DIM_APM_SWG_HOST_NAME.host_name_str, AVR_DIM_APM_SWG_URL.url_str, AVR_DIM_APM_SWG_CATEGORY.category_full_str, AVR_DIM_APM_SWG_RISK_CLASS.risk_class_str, AVR_DIM_APM_SWG_URL_FILTER.url_filter_full_str, AVR_DIM_APM_SWG_USER_GROUP.user_group_str, AVR_DIM_APM_SWG_APPLICATION.application_name_str, AVR_DIM_APM_SWG_APPLICATION_FAMILY.application_family_name_str     from AVR_STAT_APM_SWG_URL_INFO_T A   LEFT JOIN AVR_DIM_APM_SWG_ACTION ON A.action_id=AVR_DIM_APM_SWG_ACTION.action_id LEFT JOIN AVR_DIM_APM_SWG_HOST_NAME ON A.host_name_crc=AVR_DIM_APM_SWG_HOST_NAME.host_name_crc LEFT JOIN AVR_DIM_APM_SWG_URL ON A.url_crc=AVR_DIM_APM_SWG_URL.url_crc LEFT JOIN AVR_DIM_APM_SWG_CATEGORY ON A.category_crc=AVR_DIM_APM_SWG_CATEGORY.category_crc  LEFT JOIN AVR_DIM_APM_SWG_RISK_CLASS ON A.risk_class_crc=AVR_DIM_APM_SWG_RISK_CLASS.risk_class_crc LEFT JOIN AVR_DIM_APM_SWG_URL_FILTER ON A.url_filter_crc=AVR_DIM_APM_SWG_URL_FILTER.url_filter_crc LEFT JOIN AVR_DIM_APM_SWG_USER_GROUP ON A.user_group_crc=AVR_DIM_APM_SWG_USER_GROUP.user_group_crc LEFT JOIN AVR_DIM_APM_SWG_APPLICATION ON A.application_name_crc=AVR_DIM_APM_SWG_APPLICATION.application_name_crc LEFT JOIN AVR_DIM_APM_SWG_APPLICATION_FAMILY ON A.application_family_name_crc=AVR_DIM_APM_SWG_APPLICATION_FAMILY.application_family_name_crc where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_APM_SWG_USER_INFO "\{AVR_STAT_APM_SWG_USER_INFO|-2\} \{select    A.aggr_period,  A.time_stamp,   A.hits_count,   AVR_DIM_APM_SWG_ACTION.action_str,  ssl_bypass, AVR_DIM_APM_SWG_USERNAME.username_str,  HEX(A.client_ip) as client_ip, AVR_DIM_APM_SWG_CATEGORY.category_full_str, AVR_DIM_APM_SWG_RISK_CLASS.risk_class_str, AVR_DIM_APM_SWG_URL_FILTER.url_filter_full_str, AVR_DIM_APM_SWG_USER_GROUP.user_group_str, AVR_DIM_APM_SWG_APPLICATION.application_name_str, AVR_DIM_APM_SWG_APPLICATION_FAMILY.application_family_name_str     from AVR_STAT_APM_SWG_USER_INFO_T A   LEFT JOIN AVR_DIM_APM_SWG_ACTION ON A.action_id=AVR_DIM_APM_SWG_ACTION.action_id LEFT JOIN AVR_DIM_APM_SWG_USERNAME ON A.username_crc=AVR_DIM_APM_SWG_USERNAME.username_crc LEFT JOIN AVR_DIM_APM_SWG_CATEGORY ON A.category_crc=AVR_DIM_APM_SWG_CATEGORY.category_crc  LEFT JOIN AVR_DIM_APM_SWG_RISK_CLASS ON A.risk_class_crc=AVR_DIM_APM_SWG_RISK_CLASS.risk_class_crc LEFT JOIN AVR_DIM_APM_SWG_URL_FILTER ON A.url_filter_crc=AVR_DIM_APM_SWG_URL_FILTER.url_filter_crc LEFT JOIN AVR_DIM_APM_SWG_USER_GROUP ON A.user_group_crc=AVR_DIM_APM_SWG_USER_GROUP.user_group_crc LEFT JOIN AVR_DIM_APM_SWG_APPLICATION ON A.application_name_crc=AVR_DIM_APM_SWG_APPLICATION.application_name_crc LEFT JOIN AVR_DIM_APM_SWG_APPLICATION_FAMILY ON A.application_family_name_crc=AVR_DIM_APM_SWG_APPLICATION_FAMILY.application_family_name_crc where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_URL "\{AVR_STAT_URL|4\} \{select   A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_DOS_L7_PROFILE.profile_name, A.dosl7_attack_id,  '' as transaction_outcome_name, HEX( AVR_DIM_POOL_MEMBER.pool_member_addr) as pool_member_addr, AVR_DIM_POOL_MEMBER.pool_member_port, AVR_DIM_URL.url_name, A.max_tps,  A.client_latency_hits,  A.max_client_latency,  A.client_latency,  A.max_server_latency,  A.server_latency,  A.max_request_throughput,  A.total_request_size,  A.max_response_throughput,  A.total_response_size,  A.latency_hist_1,  A.latency_hist_2,  A.latency_hist_3,  A.latency_hist_4,  A.latency_hist_5,  A.latency_hist_6,  A.latency_hist_7,  A.latency_hist_8,  A.latency_hist_9,  A.latency_hist_10,  A.latency_hist_11,  A.latency_hist_12,  A.latency_hist_13,  A.latency_hist_14,  A.latency_hist_15,  A.latency_hist_16   from AVR_STAT_URL_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_DOS_L7_PROFILE ON A.dosl7_profile_crc=AVR_DIM_DOS_L7_PROFILE.dosl7_profile_crc LEFT JOIN AVR_DIM_POOL_MEMBER ON A.pool_member_crc=AVR_DIM_POOL_MEMBER.pool_member_crc LEFT JOIN AVR_DIM_URL ON A.url_crc=AVR_DIM_URL.url_crc  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_RESPONSE_CODE "\{AVR_STAT_RESPONSE_CODE|4\} \{select   A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_DOS_L7_PROFILE.profile_name, A.dosl7_attack_id,  '' as transaction_outcome_name, HEX( AVR_DIM_POOL_MEMBER.pool_member_addr) as pool_member_addr, AVR_DIM_POOL_MEMBER.pool_member_port, AVR_DIM_URL.url_name, A.max_tps,  A.client_latency_hits,  A.max_client_latency,  A.client_latency,  A.max_server_latency,  A.server_latency,  A.max_request_throughput,  A.total_request_size,  A.max_response_throughput,  A.total_response_size,  A.response_code, A.latency_hist_1,  A.latency_hist_2,  A.latency_hist_3,  A.latency_hist_4,  A.latency_hist_5,  A.latency_hist_6,  A.latency_hist_7,  A.latency_hist_8,  A.latency_hist_9,  A.latency_hist_10,  A.latency_hist_11,  A.latency_hist_12,  A.latency_hist_13,  A.latency_hist_14,  A.latency_hist_15,  A.latency_hist_16   from AVR_STAT_RESPONSE_CODE_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_DOS_L7_PROFILE ON A.dosl7_profile_crc=AVR_DIM_DOS_L7_PROFILE.dosl7_profile_crc LEFT JOIN AVR_DIM_POOL_MEMBER ON A.pool_member_crc=AVR_DIM_POOL_MEMBER.pool_member_crc LEFT JOIN AVR_DIM_URL ON A.url_crc=AVR_DIM_URL.url_crc  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_CLIENT_IP "\{AVR_STAT_CLIENT_IP|4\} \{select   A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_DOS_L7_PROFILE.profile_name, A.dosl7_attack_id,  '' as transaction_outcome_name, HEX( A.client_ip) as client_ip, HEX(AVR_DIM_CLIENT_SUBNET.subnet_addr) as subnet_addr, A.max_tps,  A.client_latency_hits,  A.max_client_latency,  A.client_latency,  A.max_server_latency,  A.server_latency,  A.max_request_throughput,  A.total_request_size,  A.max_response_throughput,  A.total_response_size, A.latency_hist_1,  A.latency_hist_2,  A.latency_hist_3,  A.latency_hist_4,  A.latency_hist_5,  A.latency_hist_6,  A.latency_hist_7,  A.latency_hist_8,  A.latency_hist_9,  A.latency_hist_10,  A.latency_hist_11,  A.latency_hist_12,  A.latency_hist_13,  A.latency_hist_14,  A.latency_hist_15,  A.latency_hist_16   from AVR_STAT_CLIENT_IP_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_DOS_L7_PROFILE ON A.dosl7_profile_crc=AVR_DIM_DOS_L7_PROFILE.dosl7_profile_crc LEFT JOIN AVR_DIM_CLIENT_SUBNET ON A.subnet_crc=AVR_DIM_CLIENT_SUBNET.subnet_crc where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_POOL_MEMBER "\{AVR_STAT_POOL_MEMBER|4\} \{select  A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_DOS_L7_PROFILE.profile_name, '' as dosl7_attack_id,  '' as transaction_outcome_name, HEX( AVR_DIM_POOL_MEMBER.pool_member_addr) as pool_member_addr, AVR_DIM_POOL_MEMBER.pool_member_port, A.max_tps,  A.client_latency_hits,  A.max_client_latency,  A.client_latency,  A.max_server_latency,  A.server_latency,  A.max_request_throughput,  A.total_request_size,  A.max_response_throughput,  A.total_response_size,  A.latency_hist_1,  A.latency_hist_2,  A.latency_hist_3,  A.latency_hist_4,  A.latency_hist_5,  A.latency_hist_6,  A.latency_hist_7,  A.latency_hist_8,  A.latency_hist_9,  A.latency_hist_10,  A.latency_hist_11,  A.latency_hist_12,  A.latency_hist_13,  A.latency_hist_14,  A.latency_hist_15,  A.latency_hist_16   from AVR_STAT_POOL_MEMBER_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_DOS_L7_PROFILE ON A.dosl7_profile_crc=AVR_DIM_DOS_L7_PROFILE.dosl7_profile_crc LEFT JOIN AVR_DIM_POOL_MEMBER ON A.pool_member_crc=AVR_DIM_POOL_MEMBER.pool_member_crc where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_ASM_ANOMALIES "\{AVR_STAT_ASM_ANOMALIES|4\} \{select  A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_ASM_POLICY.asm_policy_name, AVR_DIM_ASM_ANOMALIES.anomaly_type_name, A.new_attacks_count,  A.rejected_requests_count,  A.total_violations    from AVR_STAT_ASM_ANOMALIES_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_ASM_POLICY ON A.policy_crc=AVR_DIM_ASM_POLICY.asm_policy_crc and A.vip_crc=AVR_DIM_ASM_POLICY.vip_crc LEFT JOIN AVR_DIM_ASM_ANOMALIES ON A.anomaly_type_id=AVR_DIM_ASM_ANOMALIES.anomaly_type_id  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_ASM_HTTP_ATTACK_DATA "\{AVR_STAT_ASM_HTTP_ATTACK_DATA|4\} \{select  A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_ASM_POLICY.asm_policy_name, A.action_id,  A.severity_id,   A.protocol_id,  A.attack_types,  AVR_DIM_ASM_HTTP_VIRUS.virus_id,  AVR_DIM_ASM_HTTP_VIRUS.virus_name   from AVR_STAT_ASM_HTTP_ATTACK_DATA_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_ASM_POLICY ON A.policy_crc=AVR_DIM_ASM_POLICY.asm_policy_crc and A.vip_crc=AVR_DIM_ASM_POLICY.vip_crc LEFT JOIN AVR_DIM_ASM_HTTP_VIRUS ON A.vip_crc=AVR_DIM_ASM_HTTP_VIRUS.vip_crc  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_ASM_HTTP_VIOLATION "\{AVR_STAT_ASM_HTTP_VIOLATION|4\} \{select  A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_ASM_POLICY.asm_policy_name, AVR_DIM_ENFORCEMENT_ACTION.action_name, A.severity_id,    AVR_DIM_ASM_REPEV_PROTOCOL.protocol_name, A.attack_types,  AVR_DIM_ASM_HTTP_VIOLATION.violation_name, AVR_DIM_ASM_HTTP_VIRUS.virus_id, AVR_DIM_ASM_HTTP_VIRUS.virus_name   from AVR_STAT_ASM_HTTP_VIOLATION_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_ASM_POLICY ON A.policy_crc=AVR_DIM_ASM_POLICY.asm_policy_crc and A.vip_crc=AVR_DIM_ASM_POLICY.vip_crc LEFT JOIN AVR_DIM_ENFORCEMENT_ACTION ON A.action_id=AVR_DIM_ENFORCEMENT_ACTION.action_type   LEFT JOIN AVR_DIM_ASM_REPEV_PROTOCOL ON A.protocol_id=AVR_DIM_ASM_REPEV_PROTOCOL.protocol_id  LEFT JOIN AVR_DIM_ASM_HTTP_VIOLATION ON A.violation_crc=AVR_DIM_ASM_HTTP_VIOLATION.violation_id LEFT JOIN AVR_DIM_ASM_HTTP_VIRUS ON A.vip_crc=AVR_DIM_ASM_HTTP_VIRUS.vip_crc  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_ASM_NETWORK "\{AVR_STAT_ASM_NETWORK|4\} \{select  A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_ASM_POLICY.asm_policy_name, AVR_DIM_ENFORCEMENT_ACTION.action_name, A.total_request_size   from AVR_STAT_ASM_NETWORK_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_ASM_POLICY ON A.policy_crc=AVR_DIM_ASM_POLICY.asm_policy_crc and A.vip_crc=AVR_DIM_ASM_POLICY.vip_crc LEFT JOIN AVR_DIM_ENFORCEMENT_ACTION ON A.action_id=AVR_DIM_ENFORCEMENT_ACTION.action_type  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_GEO_LOCATION "\{AVR_STAT_GEO_LOCATION|4\} \{select  A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_DOS_L7_PROFILE.profile_name, A.dosl7_attack_id,  AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_name, A.country_code,  A.max_tps,  A.client_latency_hits,  A.max_client_latency,  A.client_latency,  A.max_server_latency,  A.server_latency,  A.max_request_throughput,  A.total_request_size,  A.max_response_throughput,  A.total_response_size,  A.latency_hist_1,  A.latency_hist_2,  A.latency_hist_3,  A.latency_hist_4,  A.latency_hist_5,  A.latency_hist_6,  A.latency_hist_7,  A.latency_hist_8,  A.latency_hist_9,  A.latency_hist_10,  A.latency_hist_11,  A.latency_hist_12,  A.latency_hist_13,  A.latency_hist_14,  A.latency_hist_15,  A.latency_hist_16,  A.concurrent_sessions,  A.sessions   from AVR_STAT_GEO_LOCATION_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_DOS_L7_PROFILE ON A.dosl7_profile_crc=AVR_DIM_DOS_L7_PROFILE.dosl7_profile_crc  LEFT JOIN AVR_DIM_TRANSACTION_OUTCOME ON A.transaction_outcome_id=AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_id  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_METHOD "\{AVR_STAT_METHOD|4\} \{select A.aggr_period,  A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_DOS_L7_PROFILE.profile_name, A.dosl7_attack_id,  AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_name, AVR_DIM_METHOD.method_name, A.latency_hist_1,  A.latency_hist_2,  A.latency_hist_3,  A.latency_hist_4,  A.latency_hist_5,  A.latency_hist_6,  A.latency_hist_7,  A.latency_hist_8,  A.latency_hist_9,  A.latency_hist_10,  A.latency_hist_11,  A.latency_hist_12,  A.latency_hist_13,  A.latency_hist_14,  A.latency_hist_15,  A.latency_hist_16    from AVR_STAT_METHOD_T A    LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_DOS_L7_PROFILE ON A.dosl7_profile_crc=AVR_DIM_DOS_L7_PROFILE.dosl7_profile_crc  LEFT JOIN AVR_DIM_TRANSACTION_OUTCOME ON A.transaction_outcome_id=AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_id LEFT JOIN AVR_DIM_METHOD ON A.method_crc=AVR_DIM_METHOD.method_crc where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_USER_AGENT "\{AVR_STAT_USER_AGENT|4\} \{select A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_DOS_L7_PROFILE.profile_name, A.dosl7_attack_id,  AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_name, AVR_DIM_USER_AGENT.user_agent_name, A.latency_hist_1,  A.latency_hist_2,  A.latency_hist_3,  A.latency_hist_4,  A.latency_hist_5,  A.latency_hist_6,  A.latency_hist_7,  A.latency_hist_8,  A.latency_hist_9,  A.latency_hist_10,  A.latency_hist_11,  A.latency_hist_12,  A.latency_hist_13,  A.latency_hist_14,  A.latency_hist_15,  A.latency_hist_16   from AVR_STAT_USER_AGENT_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_DOS_L7_PROFILE ON A.dosl7_profile_crc=AVR_DIM_DOS_L7_PROFILE.dosl7_profile_crc  LEFT JOIN AVR_DIM_TRANSACTION_OUTCOME ON A.transaction_outcome_id=AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_id LEFT JOIN AVR_DIM_USER_AGENT ON A.user_agent_crc=AVR_DIM_USER_AGENT.user_agent_crc  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_VIP "\{AVR_STAT_VIP|4\} \{select  A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_DOS_L7_PROFILE.profile_name, A.dosl7_attack_id,  AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_name, A.max_tps,  A.client_latency_hits,  A.max_client_latency,  A.client_latency,  A.max_server_latency,  A.server_latency,  A.max_request_throughput,  A.total_request_size,  A.max_response_throughput,  A.total_response_size,  A.latency_hist_1,  A.latency_hist_2,  A.latency_hist_3,  A.latency_hist_4,  A.latency_hist_5,  A.latency_hist_6,  A.latency_hist_7,  A.latency_hist_8,  A.latency_hist_9,  A.latency_hist_10,  A.latency_hist_11,  A.latency_hist_12,  A.latency_hist_13,  A.latency_hist_14,  A.latency_hist_15,  A.latency_hist_16,  A.concurrent_sessions,  A.sessions   from AVR_STAT_VIP_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_DOS_L7_PROFILE ON A.dosl7_profile_crc=AVR_DIM_DOS_L7_PROFILE.dosl7_profile_crc  LEFT JOIN AVR_DIM_TRANSACTION_OUTCOME ON A.transaction_outcome_id=AVR_DIM_TRANSACTION_OUTCOME.transaction_outcome_id  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_ENFORCED_ACL "\{AVR_STAT_ENFORCED_ACL|6\} \{select  	 	aggr_period, 	time_stamp, 	hits_count, 	AVR_DIM_APPLICATION.app_name,  	AVR_DIM_ACL_RULE.rule_name, 	AVR_DIM_ACL_CONTEXT_INFO_TYPE.context_info_type_name, 	AVR_DIM_ACL_CONTEXT_INFO.context_info_name, 	AVR_DIM_FW_ACL_ACTIONS.action, 	AVR_DIM_VLAN.vlan_name, 	AVR_DIM_ACL_POLICY.policy_name, 	HEX( source_ip ) as source_ip, 	source_port, 	HEX( dest_ip ) as dest_ip, 	dest_port, 	AVR_DIM_ACL_SA_TRANS.translate_reason_name, 	AVR_DIM_ACL_TRANSLATE_TYPE.translate_type_name, 	HEX( self_ip ) as self_ip, 	HEX( server_ip ) as server_ip, 	source_country_code, 	dest_country_code 	from AVR_STAT_ENFORCED_ACL_T A  	LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc  	LEFT JOIN AVR_DIM_ACL_RULE ON A.rule_crc=AVR_DIM_ACL_RULE.rule_crc 	LEFT JOIN AVR_DIM_ACL_CONTEXT_INFO_TYPE ON A.context_info_type_id=AVR_DIM_ACL_CONTEXT_INFO_TYPE.context_info_type_id 	LEFT JOIN AVR_DIM_ACL_CONTEXT_INFO ON A.context_info_crc=AVR_DIM_ACL_CONTEXT_INFO.context_info_crc 	LEFT JOIN AVR_DIM_FW_ACL_ACTIONS ON A.action_id=AVR_DIM_FW_ACL_ACTIONS.action_id 	LEFT JOIN AVR_DIM_VLAN ON A.vlan_crc=AVR_DIM_VLAN.vlan_crc 	LEFT JOIN AVR_DIM_ACL_POLICY ON A.policy_crc=AVR_DIM_ACL_POLICY.policy_crc   	LEFT JOIN AVR_DIM_ACL_SA_TRANS ON A.translate_reason_crc=AVR_DIM_ACL_SA_TRANS.translate_reason_crc 	LEFT JOIN AVR_DIM_ACL_TRANSLATE_TYPE ON A.translate_type_id=AVR_DIM_ACL_TRANSLATE_TYPE.translate_type_id where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_STAGING_ACL "\{AVR_STAT_STAGING_ACL|6\} \{select  	 	aggr_period, 	time_stamp, 	hits_count, 	AVR_DIM_APPLICATION.app_name,  	AVR_DIM_ACL_RULE.rule_name, 	AVR_DIM_ACL_CONTEXT_INFO_TYPE.context_info_type_name, 	AVR_DIM_ACL_CONTEXT_INFO.context_info_name, 	AVR_DIM_FW_ACL_ACTIONS.action, 	AVR_DIM_VLAN.vlan_name, 	AVR_DIM_ACL_POLICY.policy_name, 	HEX( source_ip ) as source_ip, 	source_port, 	HEX( dest_ip ) as dest_ip, 	dest_port, 	 	 	source_country_code, 	dest_country_code 	from AVR_STAT_STAGING_ACL_T A  	LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc  	LEFT JOIN AVR_DIM_ACL_RULE ON A.rule_crc=AVR_DIM_ACL_RULE.rule_crc 	LEFT JOIN AVR_DIM_ACL_CONTEXT_INFO_TYPE ON A.context_info_type_id=AVR_DIM_ACL_CONTEXT_INFO_TYPE.context_info_type_id 	LEFT JOIN AVR_DIM_ACL_CONTEXT_INFO ON A.context_info_crc=AVR_DIM_ACL_CONTEXT_INFO.context_info_crc 	LEFT JOIN AVR_DIM_FW_ACL_ACTIONS ON A.action_id=AVR_DIM_FW_ACL_ACTIONS.action_id 	LEFT JOIN AVR_DIM_VLAN ON A.vlan_crc=AVR_DIM_VLAN.vlan_crc 	LEFT JOIN AVR_DIM_ACL_POLICY ON A.policy_crc=AVR_DIM_ACL_POLICY.policy_crc where A.time_stamp IN (<tosendbuckets>)\}"
		}	
	}	
	if {$::version == "11.4.0" || $::version == "11.4.1" || $::version == "11.4.2" || $::version == "11.5.0" || $::version == "11.5.1" || $::version == "11.5.2" || $::version == "11.5.3" || $::version == "11.5.4" || $::version == "11.5.5" || $::version == "11.5.6"} {
		array set avrmapping {
			AVR_STAT_DNS_QUERY "\{AVR_STAT_DNS_QUERY|4\} \{ select     A.aggr_period,   A.time_stamp,    A.hits_count, AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name,  AVR_DIM_DNS_QUERY_TYPE.query_type_name, AVR_DIM_DNS_QUERY_NAME.query_name   from AVR_STAT_DNS_QUERY_T A  LEFT JOIN AVR_DIM_DNS_QUERY_TYPE ON A.query_type_id=AVR_DIM_DNS_QUERY_TYPE.query_type_id LEFT JOIN AVR_DIM_DNS_QUERY_NAME ON A.query_name_crc=AVR_DIM_DNS_QUERY_NAME.query_name_crc   LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc   where A.time_stamp IN (<tosendbuckets>)\}"
 			AVR_STAT_DNS_CLIENT_IP "\{AVR_STAT_DNS_CLIENT_IP|4\} \{ select     A.aggr_period,   A.time_stamp,    A.hits_count, AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name,  AVR_DIM_DNS_QUERY_TYPE.query_type_name, HEX(A.client_ip) as client_ip   from AVR_STAT_DNS_CLIENT_IP_T A  LEFT JOIN AVR_DIM_DNS_QUERY_TYPE ON A.query_type_id=AVR_DIM_DNS_QUERY_TYPE.query_type_id   LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc   where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_APM_SWG_BLOCKED "\{AVR_STAT_APM_SWG_BLOCKED|-2\} \{select    A.aggr_period,  A.time_stamp,   A.hits_count,   ssl_bypass, AVR_DIM_APM_SWG_USERNAME.username_str, AVR_DIM_APM_SWG_URL.url_str,  HEX(A.client_ip) as client_ip, AVR_DIM_APM_SWG_CATEGORY.category_full_str, AVR_DIM_APM_SWG_RISK_CLASS.risk_class_str, AVR_DIM_APM_SWG_URL_FILTER.url_filter_full_str, AVR_DIM_APM_SWG_USER_GROUP.user_group_str, AVR_DIM_APM_SWG_APPLICATION.application_name_str, AVR_DIM_APM_SWG_APPLICATION_FAMILY.application_family_name_str     from AVR_STAT_APM_SWG_BLOCKED_T A   LEFT JOIN AVR_DIM_APM_SWG_USERNAME ON A.username_crc=AVR_DIM_APM_SWG_USERNAME.username_crc LEFT JOIN AVR_DIM_APM_SWG_URL ON A.url_crc=AVR_DIM_APM_SWG_URL.url_crc LEFT JOIN AVR_DIM_APM_SWG_CATEGORY ON A.category_crc=AVR_DIM_APM_SWG_CATEGORY.category_crc  LEFT JOIN AVR_DIM_APM_SWG_RISK_CLASS ON A.risk_class_crc=AVR_DIM_APM_SWG_RISK_CLASS.risk_class_crc LEFT JOIN AVR_DIM_APM_SWG_URL_FILTER ON A.url_filter_crc=AVR_DIM_APM_SWG_URL_FILTER.url_filter_crc LEFT JOIN AVR_DIM_APM_SWG_USER_GROUP ON A.user_group_crc=AVR_DIM_APM_SWG_USER_GROUP.user_group_crc LEFT JOIN AVR_DIM_APM_SWG_APPLICATION ON A.application_name_crc=AVR_DIM_APM_SWG_APPLICATION.application_name_crc LEFT JOIN AVR_DIM_APM_SWG_APPLICATION_FAMILY ON A.application_family_name_crc=AVR_DIM_APM_SWG_APPLICATION_FAMILY.application_family_name_crc where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_APM_SWG_URL_INFO "\{AVR_STAT_APM_SWG_URL_INFO|-2\} \{select    A.aggr_period,  A.time_stamp,   A.hits_count,   AVR_DIM_APM_SWG_ACTION.action_str,  ssl_bypass, AVR_DIM_APM_SWG_HOST_NAME.host_name_str, AVR_DIM_APM_SWG_URL.url_str, AVR_DIM_APM_SWG_CATEGORY.category_full_str, AVR_DIM_APM_SWG_RISK_CLASS.risk_class_str, AVR_DIM_APM_SWG_URL_FILTER.url_filter_full_str, AVR_DIM_APM_SWG_USER_GROUP.user_group_str, AVR_DIM_APM_SWG_APPLICATION.application_name_str, AVR_DIM_APM_SWG_APPLICATION_FAMILY.application_family_name_str     from AVR_STAT_APM_SWG_URL_INFO_T A   LEFT JOIN AVR_DIM_APM_SWG_ACTION ON A.action_id=AVR_DIM_APM_SWG_ACTION.action_id LEFT JOIN AVR_DIM_APM_SWG_HOST_NAME ON A.host_name_crc=AVR_DIM_APM_SWG_HOST_NAME.host_name_crc LEFT JOIN AVR_DIM_APM_SWG_URL ON A.url_crc=AVR_DIM_APM_SWG_URL.url_crc LEFT JOIN AVR_DIM_APM_SWG_CATEGORY ON A.category_crc=AVR_DIM_APM_SWG_CATEGORY.category_crc  LEFT JOIN AVR_DIM_APM_SWG_RISK_CLASS ON A.risk_class_crc=AVR_DIM_APM_SWG_RISK_CLASS.risk_class_crc LEFT JOIN AVR_DIM_APM_SWG_URL_FILTER ON A.url_filter_crc=AVR_DIM_APM_SWG_URL_FILTER.url_filter_crc LEFT JOIN AVR_DIM_APM_SWG_USER_GROUP ON A.user_group_crc=AVR_DIM_APM_SWG_USER_GROUP.user_group_crc LEFT JOIN AVR_DIM_APM_SWG_APPLICATION ON A.application_name_crc=AVR_DIM_APM_SWG_APPLICATION.application_name_crc LEFT JOIN AVR_DIM_APM_SWG_APPLICATION_FAMILY ON A.application_family_name_crc=AVR_DIM_APM_SWG_APPLICATION_FAMILY.application_family_name_crc where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_APM_SWG_USER_INFO "\{AVR_STAT_APM_SWG_USER_INFO|-2\} \{select    A.aggr_period,  A.time_stamp,   A.hits_count,   AVR_DIM_APM_SWG_ACTION.action_str,  ssl_bypass, AVR_DIM_APM_SWG_USERNAME.username_str,  HEX(A.client_ip) as client_ip, AVR_DIM_APM_SWG_CATEGORY.category_full_str, AVR_DIM_APM_SWG_RISK_CLASS.risk_class_str, AVR_DIM_APM_SWG_URL_FILTER.url_filter_full_str, AVR_DIM_APM_SWG_USER_GROUP.user_group_str, AVR_DIM_APM_SWG_APPLICATION.application_name_str, AVR_DIM_APM_SWG_APPLICATION_FAMILY.application_family_name_str     from AVR_STAT_APM_SWG_USER_INFO_T A   LEFT JOIN AVR_DIM_APM_SWG_ACTION ON A.action_id=AVR_DIM_APM_SWG_ACTION.action_id LEFT JOIN AVR_DIM_APM_SWG_USERNAME ON A.username_crc=AVR_DIM_APM_SWG_USERNAME.username_crc LEFT JOIN AVR_DIM_APM_SWG_CATEGORY ON A.category_crc=AVR_DIM_APM_SWG_CATEGORY.category_crc  LEFT JOIN AVR_DIM_APM_SWG_RISK_CLASS ON A.risk_class_crc=AVR_DIM_APM_SWG_RISK_CLASS.risk_class_crc LEFT JOIN AVR_DIM_APM_SWG_URL_FILTER ON A.url_filter_crc=AVR_DIM_APM_SWG_URL_FILTER.url_filter_crc LEFT JOIN AVR_DIM_APM_SWG_USER_GROUP ON A.user_group_crc=AVR_DIM_APM_SWG_USER_GROUP.user_group_crc LEFT JOIN AVR_DIM_APM_SWG_APPLICATION ON A.application_name_crc=AVR_DIM_APM_SWG_APPLICATION.application_name_crc LEFT JOIN AVR_DIM_APM_SWG_APPLICATION_FAMILY ON A.application_family_name_crc=AVR_DIM_APM_SWG_APPLICATION_FAMILY.application_family_name_crc where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_URL "\{AVR_STAT_URL|4\} \{select   A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, '' as profile_name, '' as dosl7_attack_id,  '' as transaction_outcome_name, HEX( AVR_DIM_POOL_MEMBER.pool_member_addr) as pool_member_addr, AVR_DIM_POOL_MEMBER.pool_member_port, AVR_DIM_URL.url_name, A.max_tps,  A.client_latency_hits,  A.max_client_latency,  A.client_latency,  A.max_server_latency,  A.server_latency,  A.max_request_throughput,  A.total_request_size,  A.max_response_throughput,  A.total_response_size,  '' as latency_hist_1,  '' as latency_hist_2,  '' as latency_hist_3,  '' as latency_hist_4,  '' as latency_hist_5,  '' as latency_hist_6,  '' as latency_hist_7,  '' as latency_hist_8,  '' as latency_hist_9,  '' as latency_hist_10,  '' as latency_hist_11,  '' as latency_hist_12,  '' as latency_hist_13,  '' as latency_hist_14,  '' as latency_hist_15,  '' as latency_hist_16   from AVR_STAT_URL_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_POOL_MEMBER ON A.pool_member_crc=AVR_DIM_POOL_MEMBER.pool_member_crc LEFT JOIN AVR_DIM_URL ON A.url_crc=AVR_DIM_URL.url_crc  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_RESPONSE_CODE "\{AVR_STAT_RESPONSE_CODE|4\} \{select   A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, '' as profile_name, '' as dosl7_attack_id,  '' as transaction_outcome_name, HEX( AVR_DIM_POOL_MEMBER.pool_member_addr) as pool_member_addr, AVR_DIM_POOL_MEMBER.pool_member_port, AVR_DIM_URL.url_name, '' as max_tps,  '' as client_latency_hits,  '' as max_client_latency,  '' as client_latency,  '' as max_server_latency,  '' as server_latency, '' as max_request_throughput,  '' as total_request_size,  '' as max_response_throughput,  '' as total_response_size,  A.response_code,  '' as latency_hist_1,  '' as latency_hist_2,  '' as latency_hist_3,  '' as latency_hist_4,  '' as latency_hist_5,  '' as latency_hist_6,  '' as latency_hist_7,  '' as latency_hist_8,  '' as latency_hist_9,  '' as latency_hist_10,  '' as latency_hist_11,  '' as latency_hist_12,  '' as latency_hist_13,  '' as latency_hist_14,  '' as latency_hist_15,  '' as latency_hist_16   from AVR_STAT_RESPONSE_CODE_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_POOL_MEMBER ON A.pool_member_crc=AVR_DIM_POOL_MEMBER.pool_member_crc LEFT JOIN AVR_DIM_URL ON A.url_crc=AVR_DIM_URL.url_crc  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_CLIENT_IP "\{AVR_STAT_CLIENT_IP|4\} \{select   A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, '' as profile_name, '' as dosl7_attack_id,  '' as transaction_outcome_name, HEX( A.client_ip) as client_ip, '' as subnet_addr, A.max_tps,  A.client_latency_hits,  A.max_client_latency,  A.client_latency,  A.max_server_latency,  A.server_latency,  A.max_request_throughput,  A.total_request_size,  A.max_response_throughput,  A.total_response_size, '' as latency_hist_1,  '' as latency_hist_2,  '' as latency_hist_3,  '' as latency_hist_4,  '' as latency_hist_5,  '' as latency_hist_6,  '' as latency_hist_7,  '' as latency_hist_8,  '' as latency_hist_9,  '' as latency_hist_10,  '' as latency_hist_11,  '' as latency_hist_12,  '' as latency_hist_13,  '' as latency_hist_14,  '' as latency_hist_15,  '' as latency_hist_16   from AVR_STAT_CLIENT_IP_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_POOL_MEMBER "\{AVR_STAT_POOL_MEMBER|4\} \{select  A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, '' as profile_name, '' as dosl7_attack_id,  '' as transaction_outcome_name, HEX( AVR_DIM_POOL_MEMBER.pool_member_addr) as pool_member_addr, AVR_DIM_POOL_MEMBER.pool_member_port, A.max_tps,  A.client_latency_hits,  A.max_client_latency,  A.client_latency,  A.max_server_latency,  A.server_latency,  A.max_request_throughput,  A.total_request_size,  A.max_response_throughput,  A.total_response_size,    '' as latency_hist_1,  '' as latency_hist_2,  '' as latency_hist_3,  '' as latency_hist_4,  '' as latency_hist_5,  '' as latency_hist_6,  '' as latency_hist_7,  '' as latency_hist_8,  '' as latency_hist_9,  '' as latency_hist_10,  '' as latency_hist_11,  '' as latency_hist_12,  '' as latency_hist_13,  '' as latency_hist_14,  '' as latency_hist_15,  '' as latency_hist_16   from AVR_STAT_POOL_MEMBER_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_POOL_MEMBER ON A.pool_member_crc=AVR_DIM_POOL_MEMBER.pool_member_crc  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_ASM_ANOMALIES "\{AVR_STAT_ASM_ANOMALIES|4\} \{select  A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_ASM_POLICY.asm_policy_name, AVR_DIM_ASM_ANOMALIES.anomaly_type_name, A.new_attacks_count,  A.rejected_requests_count,  A.total_violations    from AVR_STAT_ASM_ANOMALIES_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_ASM_POLICY ON A.policy_crc=AVR_DIM_ASM_POLICY.asm_policy_crc and A.vip_crc=AVR_DIM_ASM_POLICY.vip_crc LEFT JOIN AVR_DIM_ASM_ANOMALIES ON A.anomaly_type_id=AVR_DIM_ASM_ANOMALIES.anomaly_type_id  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_ASM_HTTP_ATTACK_DATA "\{AVR_STAT_ASM_HTTP_ATTACK_DATA|4\} \{select  A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_ASM_POLICY.asm_policy_name, A.action_id,  A.severity_id,   A.protocol_id,  A.attack_types,  AVR_DIM_ASM_HTTP_VIRUS.virus_id,  AVR_DIM_ASM_HTTP_VIRUS.virus_name   from AVR_STAT_ASM_HTTP_ATTACK_DATA_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_ASM_POLICY ON A.policy_crc=AVR_DIM_ASM_POLICY.asm_policy_crc and A.vip_crc=AVR_DIM_ASM_POLICY.vip_crc LEFT JOIN AVR_DIM_ASM_HTTP_VIRUS ON A.vip_crc=AVR_DIM_ASM_HTTP_VIRUS.vip_crc  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_ASM_HTTP_VIOLATION "\{AVR_STAT_ASM_HTTP_VIOLATION|4\} \{select  A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_ASM_POLICY.asm_policy_name, AVR_DIM_ENFORCEMENT_ACTION.action_name, A.severity_id,    AVR_DIM_ASM_REPEV_PROTOCOL.protocol_name, A.attack_types,  AVR_DIM_ASM_HTTP_VIOLATION.violation_name, AVR_DIM_ASM_HTTP_VIRUS.virus_id, AVR_DIM_ASM_HTTP_VIRUS.virus_name   from AVR_STAT_ASM_HTTP_VIOLATION_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_ASM_POLICY ON A.policy_crc=AVR_DIM_ASM_POLICY.asm_policy_crc and A.vip_crc=AVR_DIM_ASM_POLICY.vip_crc LEFT JOIN AVR_DIM_ENFORCEMENT_ACTION ON A.action_id=AVR_DIM_ENFORCEMENT_ACTION.action_type   LEFT JOIN AVR_DIM_ASM_REPEV_PROTOCOL ON A.protocol_id=AVR_DIM_ASM_REPEV_PROTOCOL.protocol_id  LEFT JOIN AVR_DIM_ASM_HTTP_VIOLATION ON A.violation_crc=AVR_DIM_ASM_HTTP_VIOLATION.violation_id LEFT JOIN AVR_DIM_ASM_HTTP_VIRUS ON A.vip_crc=AVR_DIM_ASM_HTTP_VIRUS.vip_crc  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_ASM_NETWORK "\{AVR_STAT_ASM_NETWORK|4\} \{select  A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, AVR_DIM_ASM_POLICY.asm_policy_name, AVR_DIM_ENFORCEMENT_ACTION.action_name, A.total_request_size   from AVR_STAT_ASM_NETWORK_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_ASM_POLICY ON A.policy_crc=AVR_DIM_ASM_POLICY.asm_policy_crc and A.vip_crc=AVR_DIM_ASM_POLICY.vip_crc LEFT JOIN AVR_DIM_ENFORCEMENT_ACTION ON A.action_id=AVR_DIM_ENFORCEMENT_ACTION.action_type  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_GEO_LOCATION "\{AVR_STAT_GEO_LOCATION|4\} \{select  A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, '' as profile_name, '' as dosl7_attack_id,  '' as transaction_outcome_name, A.country_code,  A.max_tps,  A.client_latency_hits,  A.max_client_latency,  A.client_latency,  A.max_server_latency,  A.server_latency,  A.max_request_throughput,  A.total_request_size,  A.max_response_throughput,  A.total_response_size,  '' as latency_hist_1,  '' as latency_hist_2,  '' as latency_hist_3,  '' as latency_hist_4,  '' as latency_hist_5,  '' as latency_hist_6,  '' as latency_hist_7,  '' as latency_hist_8,  '' as latency_hist_9,  '' as latency_hist_10,  '' as latency_hist_11,  '' as latency_hist_12,  '' as latency_hist_13,  '' as latency_hist_14,  '' as latency_hist_15,  '' as latency_hist_16,  A.concurrent_sessions,  A.sessions   from AVR_STAT_GEO_LOCATION_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc   where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_METHOD "\{AVR_STAT_METHOD|4\} \{select A.aggr_period,  A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, '' as profile_name, '' as dosl7_attack_id,  '' as transaction_outcome_name, AVR_DIM_METHOD.method_name, '' as latency_hist_1,  '' as latency_hist_2,  '' as latency_hist_3,  '' as latency_hist_4,  '' as latency_hist_5,  '' as latency_hist_6,  '' as latency_hist_7,  '' as latency_hist_8,  '' as latency_hist_9,  '' as latency_hist_10,  '' as latency_hist_11,  '' as latency_hist_12,  '' as latency_hist_13,  '' as latency_hist_14,  '' as latency_hist_15,  '' as latency_hist_16   from AVR_STAT_METHOD_T A    LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_METHOD ON A.method_crc=AVR_DIM_METHOD.method_crc where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_USER_AGENT "\{AVR_STAT_USER_AGENT|4\} \{select A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, '' as profile_name, '' as dosl7_attack_id,  '' as transaction_outcome_name, AVR_DIM_USER_AGENT.user_agent_name, '' as latency_hist_1,  '' as latency_hist_2,  '' as latency_hist_3,  '' as latency_hist_4,  '' as latency_hist_5,  '' as latency_hist_6,  '' as latency_hist_7,  '' as latency_hist_8,  '' as latency_hist_9,  '' as latency_hist_10,  '' as latency_hist_11,  '' as latency_hist_12,  '' as latency_hist_13,  '' as latency_hist_14,  '' as latency_hist_15,  '' as latency_hist_16      from AVR_STAT_USER_AGENT_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc LEFT JOIN AVR_DIM_USER_AGENT ON A.user_agent_crc=AVR_DIM_USER_AGENT.user_agent_crc  where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_VIP "\{AVR_STAT_VIP|4\} \{select  A.aggr_period, A.time_stamp,  A.hits_count,  AVR_DIM_APPLICATION.app_name, AVR_DIM_VIP.vip_name, '' as profile_name, '' as dosl7_attack_id,  '' as transaction_outcome_name, A.max_tps,  A.client_latency_hits,  A.max_client_latency,  A.client_latency,  A.max_server_latency,  A.server_latency,  A.max_request_throughput,  A.total_request_size,  A.max_response_throughput,  A.total_response_size,  '' as latency_hist_1,  '' as latency_hist_2,  '' as latency_hist_3,  '' as latency_hist_4,  '' as latency_hist_5,  '' as latency_hist_6,  '' as latency_hist_7,  '' as latency_hist_8,  '' as latency_hist_9,  '' as latency_hist_10,  '' as latency_hist_11,  '' as latency_hist_12,  '' as latency_hist_13,  '' as latency_hist_14,  '' as latency_hist_15,  '' as latency_hist_16   ,  A.concurrent_sessions,  A.sessions   from AVR_STAT_VIP_T A  LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc LEFT JOIN AVR_DIM_VIP ON A.vip_crc=AVR_DIM_VIP.vip_crc   where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_ENFORCED_ACL "\{AVR_STAT_ENFORCED_ACL|6\} \{select  	 	aggr_period, 	time_stamp, 	hits_count, 	AVR_DIM_APPLICATION.app_name,  	AVR_DIM_ACL_RULE.rule_name, 	AVR_DIM_ACL_CONTEXT_INFO_TYPE.context_info_type_name, 	AVR_DIM_ACL_CONTEXT_INFO.context_info_name, 	AVR_DIM_FW_ACL_ACTIONS.action, 	AVR_DIM_VLAN.vlan_name, 	AVR_DIM_ACL_POLICY.policy_name, 	HEX( source_ip ) as source_ip, 	source_port, 	HEX( dest_ip ) as dest_ip, 	dest_port, 	AVR_DIM_ACL_SA_TRANS.translate_reason_name, 	AVR_DIM_ACL_TRANSLATE_TYPE.translate_type_name, 	HEX( self_ip ) as self_ip, 	HEX( server_ip ) as server_ip, 	source_country_code, 	dest_country_code 	from AVR_STAT_ENFORCED_ACL_T A  	LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc  	LEFT JOIN AVR_DIM_ACL_RULE ON A.rule_crc=AVR_DIM_ACL_RULE.rule_crc 	LEFT JOIN AVR_DIM_ACL_CONTEXT_INFO_TYPE ON A.context_info_type_id=AVR_DIM_ACL_CONTEXT_INFO_TYPE.context_info_type_id 	LEFT JOIN AVR_DIM_ACL_CONTEXT_INFO ON A.context_info_crc=AVR_DIM_ACL_CONTEXT_INFO.context_info_crc 	LEFT JOIN AVR_DIM_FW_ACL_ACTIONS ON A.action_id=AVR_DIM_FW_ACL_ACTIONS.action_id 	LEFT JOIN AVR_DIM_VLAN ON A.vlan_crc=AVR_DIM_VLAN.vlan_crc 	LEFT JOIN AVR_DIM_ACL_POLICY ON A.policy_crc=AVR_DIM_ACL_POLICY.policy_crc   	LEFT JOIN AVR_DIM_ACL_SA_TRANS ON A.translate_reason_crc=AVR_DIM_ACL_SA_TRANS.translate_reason_crc 	LEFT JOIN AVR_DIM_ACL_TRANSLATE_TYPE ON A.translate_type_id=AVR_DIM_ACL_TRANSLATE_TYPE.translate_type_id where A.time_stamp IN (<tosendbuckets>)\}"
			AVR_STAT_STAGING_ACL "\{AVR_STAT_STAGING_ACL|6\} \{select  	 	aggr_period, 	time_stamp, 	hits_count, 	AVR_DIM_APPLICATION.app_name,  	AVR_DIM_ACL_RULE.rule_name, 	AVR_DIM_ACL_CONTEXT_INFO_TYPE.context_info_type_name, 	AVR_DIM_ACL_CONTEXT_INFO.context_info_name, 	AVR_DIM_FW_ACL_ACTIONS.action, 	AVR_DIM_VLAN.vlan_name, 	AVR_DIM_ACL_POLICY.policy_name, 	HEX( source_ip ) as source_ip, 	source_port, 	HEX( dest_ip ) as dest_ip, 	dest_port, 	 	 	source_country_code, 	dest_country_code 	from AVR_STAT_STAGING_ACL_T A  	LEFT JOIN AVR_DIM_APPLICATION ON A.app_crc=AVR_DIM_APPLICATION.app_crc  	LEFT JOIN AVR_DIM_ACL_RULE ON A.rule_crc=AVR_DIM_ACL_RULE.rule_crc 	LEFT JOIN AVR_DIM_ACL_CONTEXT_INFO_TYPE ON A.context_info_type_id=AVR_DIM_ACL_CONTEXT_INFO_TYPE.context_info_type_id 	LEFT JOIN AVR_DIM_ACL_CONTEXT_INFO ON A.context_info_crc=AVR_DIM_ACL_CONTEXT_INFO.context_info_crc 	LEFT JOIN AVR_DIM_FW_ACL_ACTIONS ON A.action_id=AVR_DIM_FW_ACL_ACTIONS.action_id 	LEFT JOIN AVR_DIM_VLAN ON A.vlan_crc=AVR_DIM_VLAN.vlan_crc 	LEFT JOIN AVR_DIM_ACL_POLICY ON A.policy_crc=AVR_DIM_ACL_POLICY.policy_crc where A.time_stamp IN (<tosendbuckets>)\}"
		}	
	}
		


	set tmctlcommands ""
	foreach stat $::statistics__customcollectionconfig {
		set command ""
		catch {set command $tmctlmapping($stat)}
		if {$command != ""} {
			append tmctlcommands "$stat $command "
		}
	}

	set tmctlcommands [string trimright $tmctlcommands " "]
	if {$tmctlcommands == ""} {
		set tmctlcommands " "
	}		

	set avrcommands ""
	foreach stat $::statistics__customcollectionconfig {
		set command ""
		catch {set command $avrmapping($stat)}
		if {$command != ""} {
			append avrcommands "$command "
		}
	}

	set avrcommands [string trimright $avrcommands " "]
	if {$avrcommands == ""} {
		set avrcommands " "
	}
	

	set ::splunkstats_datagroup	{
		source_metrics_to_ignore {
		    data "proc_pid_stat.command_line memory_usage_stat.caches_used"
		}
		sessiondbkeys {
		    data "session.access.profile session.assigned.resources.na session.assigned.webtop session.client.activex session.client.browscap_info session.client.cpu session.client.js session.client.platform session.client.plugin session.client.type session.client.version session.end session.inactivity_timeout session.logon.last.logonname session.logon.last.result session.logon.last.username session.server.listener.name session.server.network.name session.server.network.port session.server.network.protocol session.state session.stats.bytes.in session.stats.bytes.out session.stats.egress.compressed session.stats.egress.raw session.stats.ingress.compressed session.stats.ingress.raw session.stats.packets.in session.stats.packets.out session.user.agent session.user.clientip session.user.display_sessionid session.user.ip_reputation session.user.ipgeolocation.continent session.user.ipgeolocation.country_code session.user.ipgeolocation.country_name session.user.ipgeolocation.state session.user.starttime session.policy.result session.user.sessiontype session.ui.lang session.assigned.clientip session.check_software.last.hd.state session.check_software.last.av.state"
		}			
	}
	if {$::basic__format == "F5 Risk Engine"} {	
	
		set ::splunkstats_datagroup	{
			source_metrics_to_ignore {
			    data "proc_pid_stat.command_line memory_usage_stat.caches_used"
			}
			sessiondbkeys {
			    data " "
			}			
		}
		
	}
	append ::splunkstats_datagroup "tmctl_commands { data \"$tmctlcommands\"}"
	append ::splunkstats_datagroup "avr_commands { data \"$avrcommands\"}"
		
	
	
	
	
	
	
	

	########SplunkStats DataGroup End ########
	
	
	########iHealth Script Start ########	
	#yeah we could do some substr stuff here but to keep things simple we will do an append
	set ::icall_ihealth "	set username \"${::ihealth__ihealthuser}\"\r\n	set password \"${::ihealth__ihealthpassword}\"\r\n	set starttime \"${::ihealth__time}\"\r\n	set schedule \"${::ihealth__schedule}\"\r\n	set dayofweek \"${::ihealth__dayofweek}\"\r\n	set dayofmonth \"${::ihealth__dayofmonth}\"\r\n	set proxy \"${::ihealth__proxy}\"\r\n	set proxyip \"${::ihealth__proxyip}\"\r\n	set proxyport \"${::ihealth__proxyport}\"\r\n	set proxyuser \"${::ihealth__proxyuser}\"\r\n	set proxypassword \"${::ihealth__proxypassword}\"\r\nset appname ${::app}\r\nset url ${::statistics__splunkdestinationprotocol}://${::statistics__splunkdestinationip}:${::statistics__splunkdestinationport}/services/collector/event\r\nset hostheader $::statistics__splunkdestinationhostheader\r\n	set apikey \"Splunk $::statistics__splunkapikey\"\r\nset appname ${::app}\r\nset facility \"$::basic__facility\"\r\n"
	append ::icall_ihealth	{
	
		#figure out if we need to run based on DoM or DoW 112734737
		if {$schedule == "Daily" || ($schedule == "Weekly" && $dayofweek == [clock format [clock seconds] -format %A]) || ($schedule == "Monthly" && $dayofmonth == [clock format [clock seconds] -format %d]) } {
		
		
			
		
			set deviceinfo [tmsh::get_config sys global-settings hostname]
			foreach object $deviceinfo {
				set hostname [tmsh::get_field_value $object "hostname"]
			}

			set deviceinfo ""
			set version ""
			catch {set deviceinfo [tmsh::show sys version]}	
			regexp {.*Version\s*(\S*)\s*} $deviceinfo junk version		

			set qkview_file "/shared/tmp/qkview_${hostname}_${appname}_[clock seconds].tar.qkview"
			set cookie_file "/shared/tmp/qkview_${hostname}_${appname}_[clock seconds].cookie"

			if {$::version != "13.0.0" && $::version != "13.1.1" && $::version != "13.1.0" && $::version != "12.1.0" && $::version != "12.1.1" && $::version != "12.0.0" && $::version != "11.6.0" && $::version != "11.6.1"} {
				catch {exec qkview -C -f $qkview_file > /dev/null}				
			} else {
				catch {exec qkview -C -f ../..$qkview_file > /dev/null}
			}


			if {[catch {exec ls $qkview_file}]} {
				tmsh::log "F5 Analytics: Failed to pull qkview, file:$qkview_file"
			} else {
				set curl_response "fail"

				catch {set curl_response [exec curl -k <ihealthproxyinfo> --connect-timeout 10 --max-time 50 -H "Content-type: application/json" --user-agent "F5 Analytics Auto Upload" --cookie-jar $cookie_file -o - --data-ascii "{\"user_id\": \"$username\", \"user_secret\": \"$password\"}" https://api.f5.com/auth/pub/sso/login/ihealth-api -sw "%{http_code}\n"]}		
				tmsh::log "F5 Analytics: Received $curl_response when logging into iHealth for file: $qkview_file"

				set curl_response "fail"
				catch {set curl_response [exec curl -k <ihealthproxyinfo> --connect-timeout 10 --max-time 250 -H "Accept: application/vnd.f5.ihealth.api.v1.0+json" --user-agent "F5 Analytics Auto Upload" --cookie $cookie_file --cookie-jar $cookie_file -F qkview=@$qkview_file -F "visible_in_gui=True" -i https://ihealth-api.f5.com/qkview-analyzer/api/qkviews -o - -sw "%{http_code}\n"]}		
				tmsh::log "F5 Analytics: Received $curl_response when uploading $qkview_file to iHealth"

				catch {exec rm -f $qkview_file}
				catch {exec rm -f $cookie_file}

				regexp {Location: *(\S*)\s} $curl_response junk qkview_location

				catch {exec echo $qkview_location > /shared/tmp/f5_analytics-${appname}-ihealthpickuplocation}


			}
		}
	
	}
	########iHealth Script End ########
	
	########Agent Manager Reg Script Start ########	
	#yeah we could do some substr stuff here but to keep things simple we will do an append
	set ::icall_agentmanagerreg 	""
	append ::icall_agentmanagerreg 	"	set iappversion \"${iappversion}\"\r\n"
	append ::icall_agentmanagerreg 	"	set url \"${::statistics__splunkdestinationprotocol}://${::statistics__splunkdestinationip}:${::statistics__splunkdestinationport}/mgmt/ap/v1/tenants/${::basic__systemtenant}/sources\"\r\n"
	append ::icall_agentmanagerreg 	"	set hostnameoverride \"${::basic__hostnameoverride}\"\r\n"
	append ::icall_agentmanagerreg 	"	set systemtenant \"${::basic__systemtenant}\"\r\n"
	append ::icall_agentmanagerreg 	"	set hostheader \"${::statistics__splunkdestinationhostheader}\"\r\n"
	append ::icall_agentmanagerreg 	"	set apikey \"${datareceiverauth}\"\r\n"	
	append ::icall_agentmanagerreg 	"	set appname ${::app}\r\n"
		
	append ::icall_agentmanagerreg	{
	
		set date [clock seconds]
		set version ""
		catch {set deviceinfo [tmsh::show sys version]}	
		regexp {.*Version\s*(\S*)\s*} $deviceinfo junk version

		#hostname override logic 114310721
		if {$hostnameoverride == "" } { 
			set deviceinfo [tmsh::get_config sys global-settings hostname]
			foreach object $deviceinfo {
				set hostname [tmsh::get_field_value $object "hostname"]
			}
		} else {
			set hostname $hostnameoverride
		}
		
		set deviceinfo ""
		set device_base_mac ""
		catch {set deviceinfo [tmsh::get_status sys hardware]}
		foreach object $deviceinfo {
			catch {set device_base_mac [tmsh::get_field_value $object "base-mac"]}
		}

		if {$device_base_mac != ""} {
			set device_base_mac_split [split $device_base_mac ":"]
			set device_base_mac ""
			foreach macpart $device_base_mac_split {
				if {[string first 0 $macpart] == 0}{
					append device_base_mac "[string range $macpart 1 1]:"
				} else {
					append device_base_mac "${macpart}:"
				}
			}
			set device_base_mac [string trimright $device_base_mac ":"]
		}
		
		set deviceinfo ""
		catch {set deviceinfo [tmsh::get_config sys management-ip]}
		foreach object $deviceinfo {
			set mgmtip ""
			catch {set mgmtip [tmsh::get_name $object]}
			if { $mgmtip != "" } {
				set mgmtip [lindex [split $mgmtip "/"] 0]
			}
		}
		
		
		
		set deviceinfo [tmsh::get_config net self]
		set addresses ""
		set floatingaddresses ""
		foreach object $deviceinfo {
			set address ""
			regexp {traffic-group[ |\n]*(\S*)} $object junk trafficgroup

			if {$trafficgroup contains "local"} {
				regexp {address[ |\n]*([0-9|.]*)} $object junk address
				# correct for IPv6 as the first address returned 114436217
				if {$address contains "."} {
					append addresses "\"$address\","
				}
			} else {
				regexp {address[ |\n]*([0-9|.]*)} $object junk address
				# correct for IPv6 as the first address returned 114436217
				if {$address contains "."} {
					append floatingaddresses "\"$address\","
				}
			}			

		}
		
		set addresses [string trimright $addresses ","] 
		set floatingaddresses [string trimright $floatingaddresses ","] 
		
		
		set postdata ""
		append postdata "{"
		append postdata "  \"sourceInfo\" : {"
		append postdata "    \"tenantId\" : \"$systemtenant\","
		append postdata "    \"sourceId\" : \"$hostname\","
		append postdata "    \"type\" : \"bigip\","
		append postdata "    \"version\" : \"$version\","
		append postdata "    \"mgmtIpAddress\" : \"$mgmtip\","
		append postdata "    \"selfIpAddresses\" : \[$addresses\],"
		append postdata "    \"floatingIpAddresses\" : \[$floatingaddresses\],"
		append postdata "    \"deviceBaseMac\" : \"$device_base_mac\""		
		append postdata "  },"
		append postdata "  \"agentInfo\" : {"
		append postdata "    \"type\" : \"iApp\","
		append postdata "    \"version\" : \"$iappversion\""
		append postdata "  }"
		append postdata "}"
		
		
		set curl_response "Fail"
		catch {set curl_response [exec /usr/bin/curl --connect-timeout 10 --max-time 50 -k $url <statsproxyinfo> -H "Host: $hostheader" -H "Content-Type: application/json" -H "$apikey" -X POST -d $postdata -o /shared/tmp/${appname}-agentmanagerregout -0 -sw "%{http_code}\n"]}			
		tmsh::log "Agent Manager Registration Response for $appname $date $curl_response"	
	}
	########Agent Manager Reg Script End ########	


	########Splunk HEC tcp log iRule Start ########
	set ::splunk_hec_forwarder_tcp_irule	{
		when RULE_INIT {
			# SOL14544 workaround 
			upvar #0 tcl_platform static::tcl_platform
		} ; #end of event RULE_INIT

		when CLIENT_ACCEPTED {
			set buf "\n"
			TCP::collect
		} ; #end of event CLIENT_ACCEPTED

		when CLIENT_DATA {
			set source "bigip.log"
			if {[string length $buf] == 0} { set buf "\n" }   

			##if we want to strip binary data from the message
			#set clean [list]
			#binary scan [TCP::payload] c* chars
			#foreach {c} $chars {
			#	if {($c & 0x80) || ($c == 127) ||
			#		(($c < 32) && ($c != 9) && ($c != 10) && ($c != 13))} {
			#		continue
			#	} 
			#	lappend clean $c
			#}        
			#append buf [binary format c* $clean]     

			##else just append the full payload to the buffer          
			append buf [TCP::payload]


			TCP::payload replace 0 [TCP::payload length] ""
			TCP::collect
			#Note: do NOT call TCP::release here, because that will reset
			#the TCP connection since we don't have a pool.  If we just
			#keep calling TCP:::collect alone we can go on indefinitely
			while {[set dex [string first "\n" $buf]] >= 0 } {
				if {[set d2x [string first "\n" $buf [expr {$dex + 1}]]] < 0} {
					#unsure buf contains a complete message yet
					break
				}

				#pull first complete message from buf
				set cefmsg [string range $buf [expr {$dex +1 }] [expr {$d2x - 1}]]
				
				if {[string first "event_source=bigip.adm," $cefmsg] >= 0}{
					set source "bigip.adm"
					set cefmsg [string range $cefmsg 23 [string length $cefmsg]]
				}

				if {[string first "event_source=bigip.risk.log," $cefmsg] >= 0}{
					set source "bigip.risk.log"
					set cefmsg [string range $cefmsg 28 [string length $cefmsg]]
				}				
					
				if {[set asm [string first "ASM:unit" $cefmsg]] >= 0}{
					#set source "bigip.asm"
					set cefmsg [string range $cefmsg $asm [string length $cefmsg]]
				}

				set buf [string range $buf [expr {$d2x +1 }] end]         

				set hslpool [HSL::open -proto TCP -pool "<hslpool>"]
				regsub -all "=\"" $cefmsg "\":\"" msg
				regsub -all "\"," $msg "\",\"" msg
				set msg "<bofdata><bordata>\{\"time\":[clock seconds]<index>,\"host\":\"<hostname>\",\"source\":\"$source\",\"sourcetype\":\"f5:bigip:log:json\",<eventformat_start>\"bigip_version\":\"$static::tcl_platform(osVersion)\",\"device_base_mac\":\"<device_base_mac>\",\"devicegroup\":\"<devicegroup>\",\"facility\":\"<facility>\",\"${msg}<eventformat_end>\}<eordata><eofdata>"
				set fullPOST "POST <datareceiverurl> HTTP/1.1\nHost: <hechost>\nAccept: */*\nUser-Agent: BigIP\nContent-Type: application/json\n<datareceiverauth>\nContent-Length: [string length $msg]\n\n${msg}"			
				catch {HSL::send $hslpool $fullPOST} 
			}

			#any trailing partial message stays in buf until next packet
			#arrives or incoming TCP connection is closed
		} ; #end of event CLIENT_DATA

		when CLIENT_CLOSED {
			#deal with final message in buf
			if {[set dex [string first "\n" $buf]] >= 1} {
			
				if {[string first "event_source=bigip.risk.log," $buf] >= 0}{
					set source "bigip.risk.log"
					set buf [string range $buf 28 [string length $buf]]
				}				
					
				if {[set asm [string first "ASM:unit" $buf]] >= 0}{
					#set source "bigip.asm"
					set buf [string range $buf $asm [string length $buf]]
				}
				
				set hslpool [HSL::open -proto TCP -pool "<hslpool>"]
				regsub -all "=\"" $buf "\":\"" msg
				regsub -all "\"," $msg "\",\"" msg
				set msg "<bofdata><bordata>\{\"time\":[clock seconds]<index>,\"host\":\"<hostname>\",\"source\":\"bigip.log\",\"sourcetype\":\"f5:bigip:log:json\",<eventformat_start>\"bigip_version\":\"$static::tcl_platform(osVersion)\",\"device_base_mac\":\"<device_base_mac>\",\"devicegroup\":\"<devicegroup>\",\"facility\":\"<facility>\",\"${msg}<eventformat_end>\}<eordata><eofdata>"
				set fullPOST "POST <datareceiverurl> HTTP/1.1\nHost: <hechost>\nAccept: */*\nUser-Agent: BigIP\nContent-Type: application/json\n<datareceiverauth>\nContent-Length: [string length $msg]\n\n${msg}"			
				catch {HSL::send $hslpool $fullPOST} 
			}
		} ; #end of event CLIENT_CLOSED	
	}
	########Splunk HEC tcp log iRule END ########
	regsub -all "\\\\" $::splunk_hec_forwarder_tcp_irule "\\\\\\\\" ::splunk_hec_forwarder_tcp_irule  
	regsub -all {\$} $::splunk_hec_forwarder_tcp_irule "\\\\$" ::splunk_hec_forwarder_tcp_irule  

	########Splunk HEC adm log iRule Start ########
	set ::splunk_hec_forwarder_adm_irule	{
		when RULE_INIT {
			# SOL14544 workaround 
			upvar #0 tcl_platform static::tcl_platform
		} ; #end of event RULE_INIT

		when CLIENT_ACCEPTED {
			set buf ""
			TCP::collect
		} ; #end of event CLIENT_ACCEPTED

		when CLIENT_DATA {
			set source "bigip.adm"
			append buf [TCP::payload]
			

			TCP::payload replace 0 [TCP::payload length] ""
			TCP::collect
			#Note: do NOT call TCP::release here, because that will reset
			#the TCP connection since we don't have a pool.  If we just
			#keep calling TCP:::collect alone we can go on indefinitely
			while {[set dex [string first "asyncMsg" $buf]] >= 0 } {
				if {[set d2x [string first "\}\"\}\}\}\}\]" [string range $buf $dex end]]] < 0} {
					#unsure buf contains a complete message yet
					break
				}
				set d2x [expr $d2x + $dex - 5 ]


				#pull first complete message from buf
				set cefmsg [string range $buf [expr {$dex}] [expr {$d2x}]]
				set time [clock seconds]

				set junk ""
				set groupid ""
				set stats ""

				set statpos [expr [string first "stats\\\": \[" $cefmsg] + 10]
	
				regexp {\\"group_id\\": \\"(.*)\\",.*\\"stats\\": \[(.*)} [string range $cefmsg 0 $statpos] junk groupid
				unset junk	
				
				set stats [string range $cefmsg $statpos end]
					

				regsub -all {\\\", \\\"} $stats {\"|\"} stats
				regsub -all " " $stats "" stats

				set stats [split $stats "|"]

				set msg ""
				foreach stat $stats {
					set vs ""
					set metricname ""
					set metricval ""
					set junk ""
					regexp {vs\.(.*)\.(sig\..*|anomaly\..*|base\..*|info\..*|threshold\..*|):\[(.*)\]} $stat junk vs metricname metricval
					unset junk
					if {$vs ne "" && $metricname ne "" && $metricval ne ""} {
						set metricvals [split $metricval ","]
						set v 0
						set metricval ""
						foreach val $metricvals {
							append metricval ",\"metric_v$v\":\"$val\""
							set v [expr $v + 1]
						}
						append msg "<bofdata><bordata>\{\"time\":$time<index>,\"host\":\"<hostname>\",\"source\":\"$source\",\"sourcetype\":\"f5:bigip:log:json\",<eventformat_start>\"bigip_version\":\"$static::tcl_platform(osVersion)\",\"device_base_mac\":\"<device_base_mac>\",\"devicegroup\":\"<devicegroup>\",\"facility\":\"<facility>\",\"groupid\":\"$groupid\",\"virtual_name\":\"$vs\",\"metric_name\":\"$metricname\"$metricval<eventformat_end>\}<eordata><eofdata>\n"
					}
				}
				
				set buf "[string range $buf [expr {$d2x + 13}] end]"       

				set hslpool [HSL::open -proto TCP -pool "<hslpool>"]					
				if {$msg ne ""} {
					set fullPOST "POST <datareceiverurl> HTTP/1.1\nHost: <hechost>\nAccept: */*\nUser-Agent: BigIP\nContent-Type: application/json\n<datareceiverauth>\nContent-Length: [string length $msg]\n\n${msg}"			
					catch {HSL::send $hslpool $fullPOST} 
				}
			}

			#any trailing partial message stays in buf until next packet
			#arrives or incoming TCP connection is closed
		} ; #end of event CLIENT_DATA

		when CLIENT_CLOSED {
			#deal with final message in buf
			if {[set dex [string first "asyncMsg" $buf]] >= 1} {
						
				set hslpool [HSL::open -proto TCP -pool "<hslpool>"]

				set time [clock seconds]
				
				set junk ""
				set groupid ""
				set stats ""
				set junk ""
				regexp {\\"group_id\\": \\"(.*)\\",.*\\"stats\\": \[(.*)} $cefmsg junk groupid stats
				unset junk

				regsub -all {\\\", \\\"} $stats {\"|\"} stats
				regsub -all " " $stats "" stats
				
				set stats [split $stats "|"]
				
				set msg ""
				foreach stat $stats {
					set vs ""
					set metricname ""
					set metricval ""
					set junk ""
					regexp {vs\.(.*)\.(sig\..*|anomaly\..*|base\..*|info\..*|threshold\..*|):\[(.*)\]} $stat junk vs metricname metricval
					unset junk
					if {$vs ne "" && $metricname ne "" && $metricval ne ""} {
						set metricvals [split $metricval ","]
						set v 0
						set metricval ""
						foreach val $metricvals {
							append metricval ",\"metric_v$v\":\"$val\""
							set v [expr $v + 1]
						}
						append msg "<bofdata><bordata>\{\"time\":$time<index>,\"host\":\"<hostname>\",\"source\":\"$source\",\"sourcetype\":\"f5:bigip:log:json\",<eventformat_start>\"bigip_version\":\"$static::tcl_platform(osVersion)\",\"device_base_mac\":\"<device_base_mac>\",\"devicegroup\":\"<devicegroup>\",\"facility\":\"<facility>\",\"groupid\":\"$groupid\",\"virtual_name\":\"$vs\",\"metric_name\":\"$metricname\"$metricval<eventformat_end>\}<eordata><eofdata>\n"
					}
				}
				if {$msg ne ""} {
					set fullPOST "POST <datareceiverurl> HTTP/1.1\nHost: <hechost>\nAccept: */*\nUser-Agent: BigIP\nContent-Type: application/json\n<datareceiverauth>\nContent-Length: [string length $msg]\n\n${msg}"			
					catch {HSL::send $hslpool $fullPOST} 
				}
			}
		} ; #end of event CLIENT_CLOSED	
	}
	########Splunk HEC adm log iRule END ########
	regsub -all "\\\\" $::splunk_hec_forwarder_adm_irule "\\\\\\\\" ::splunk_hec_forwarder_adm_irule  
	regsub -all {\$} $::splunk_hec_forwarder_adm_irule "\\\\$" ::splunk_hec_forwarder_adm_irule 

	########Splunk HEC syslog log iRule Start ########
	set ::splunk_hec_forwarder_udp_syslog_irule	{
		when RULE_INIT {
			# SOL14544 workaround
			upvar #0 tcl_platform static::tcl_platform
		} ; #end of event RULE_INIT


		when CLIENT_DATA {
			### !!!!WARNING!!!! Do not log in the rule or it will loop and your system will go down"""
			set hslpool [HSL::open -proto TCP -pool "<hslpool>"]
			regsub -all "\"" [UDP::payload] "\\\"" msg
			regsub -all "\n" $msg "" msg

			set msg "<bofdata><bordata>\{\"time\":[clock seconds]<index>,\"host\":\"<hostname>\",\"source\":\"bigip.syslog\",\"sourcetype\":\"f5:bigip:syslog:json\",<eventformat_start>\"bigip_version\":\"$static::tcl_platform(osVersion)\",\"device_base_mac\":\"<device_base_mac>\",\"devicegroup\":\"<devicegroup>\",\"facility\":\"<facility>\",\"syslog_message\":\"${msg}\"<eventformat_end>\}<eordata><eofdata>"
			set fullPOST "POST <datareceiverurl> HTTP/1.1\nHost: <hechost>\nAccept: */*\nUser-Agent: BigIP\nContent-Type: application/json\n<datareceiverauth>\nContent-Length: [string length $msg]\n\n${msg}"			
			catch {HSL::send $hslpool $fullPOST} 

		} ; #end of event CLIENT_DATA	

	}
	########Splunk HEC syslog log iRule END ########
	regsub -all "\\\\" $::splunk_hec_forwarder_udp_syslog_irule "\\\\\\\\" ::splunk_hec_forwarder_udp_syslog_irule  
	regsub -all {\$} $::splunk_hec_forwarder_udp_syslog_irule "\\\\$" ::splunk_hec_forwarder_udp_syslog_irule  


	########Splunk HEC snmptrap iRule Start ########
	set ::splunk_hec_forwarder_udp_snmptrap_irule	{
		when RULE_INIT {
			# SOL14544 workaround
			upvar #0 tcl_platform static::tcl_platform
			# array with the implicit tags definitions
			array set static::tags {
				 02 { INTEGER	      forward int}
				 04 { OCTETSTRING	  forward string}
				 05 { NULL		 skip {}}
				 06 { {OBJECT IDENTIFIER}  forward oid}
				 30 { SEQUENCE	     count {}}
				 40 { NetworkAddress       forward address}
				 41 { Counter32	    forward {}}
				 43 { TimeTicks	    time {}}
				 a7 { SNMPv2-Trap      skip {}}
			}
		} ; #end of event RULE_INIT

		when CLIENT_DATA {
			binary scan [UDP::payload] H* raw

			set pos 0
			set seq 0
			set pair 0

			while {$pos < [string length $raw]} { 
				set tag [string range $raw $pos [expr $pos + 1]]
				if {![catch {set tagInfo $static::tags($tag)}]}{
					set type [lindex $tagInfo 0]
					set action [lindex $tagInfo 1]
					set decode [lindex $tagInfo 2]

					#let's figure out the length, we need to chomp more data
					set pos [expr $pos + 2]
					set tag [string range $raw $pos [expr $pos + 1]]
					set pos [expr $pos + 2]
					set length [scan $tag %x]
					if {$length > 127} {
						set tag [string range $raw $pos [expr $pos + (($length - 128) * 2) - 1]]
						set pos [expr $pos + (($length - 128) * 2)]
						set length [scan $tag %x]
					}
					set data [string range $raw $pos [expr $pos + ($length * 2) - 1]]
					if { $action == "count" } { set seq [expr $seq + 1] }
					if { $action == "forward" && $seq > 3 && $data != "2b06010201010300"} {		
						set pair [expr $pair + 1]
						switch $decode {
							oid 	{
									set datapos 2
									set newdata "1.3"
									set getlast ""
									while {$datapos < [string length $data]} { 
										set newvalue ""
										set chomp [string range $data $datapos [expr $datapos + 1]]
										set value [scan $chomp %x]
										while {$value > 127 } {
											binary scan [format %c [expr $value - 128]] B* binaryfmt
											append newvalue [string range $binaryfmt 1 end]
											set datapos [expr $datapos + 2]
											set chomp [string range $data $datapos [expr $datapos + 1]]
											set value [scan $chomp %x]
											set getlast 1
										}
										if {$getlast == 1} {
											binary scan [format %c $value] B* binaryfmt
											append newvalue [string range $binaryfmt 1 end]
											set value 0
											foreach i [split $newvalue {}] {
												set value [expr {$value*2+$i}]
											}
											set getlast ""
										}
										append newdata ".$value"
										set datapos [expr $datapos + 2]
									}
									set data $newdata
								}
							string 	{
									set data [binary format H* $data] 
									regsub -all "\"" $data "\\\"" data
								}
							int 	{set data [scan $data %x]} 
						}				
						if {$pair%2} {
							append msg "\"$data\":"
						} else {
							append msg "\"$data\","
						}
					}
					if {$action != "skip" && $action != "count"} {set pos [expr $pos + ($length * 2)]}
				} else {
					set pos [expr $pos + 2]
				}
			}
			set msg [string trimright $msg ","] 
			set hslpool [HSL::open -proto TCP -pool "<hslpool>"]	
			set msg "<bofdata><bordata>\{\"time\":[clock seconds]<index>,\"host\":\"<hostname>\",\"source\":\"bigip.snmptrap\",\"sourcetype\":\"f5:bigip:snmp:json\",<eventformat_start>\"bigip_version\":\"$static::tcl_platform(osVersion)\",\"device_base_mac\":\"<device_base_mac>\",\"devicegroup\":\"<devicegroup>\",\"facility\":\"<facility>\",${msg}<eventformat_end>\}<eordata><eofdata>"
			set fullPOST "POST <datareceiverurl> HTTP/1.1\nHost: <hechost>\nAccept: */*\nUser-Agent: BigIP\nContent-Type: application/json\n<datareceiverauth>\nContent-Length: [string length $msg]\n\n${msg}"			
			catch {HSL::send $hslpool $fullPOST}
		} ; #end of event CLIENT_DATA	
	}
	########Splunk HEC snmptrap iRule END ########
	regsub -all "\\\\" $::splunk_hec_forwarder_udp_snmptrap_irule "\\\\\\\\" ::splunk_hec_forwarder_udp_snmptrap_irule  
	regsub -all {\$} $::splunk_hec_forwarder_udp_snmptrap_irule "\\\\$" ::splunk_hec_forwarder_udp_snmptrap_irule 
	
	########Splunk session table iRule Start ########
	set ::splunk_session_table_irule	{	
		when HTTP_REQUEST {
			#we could do some fancy stuff with passing what table to pull but we want to lock it down for security reasons
			set output ""
			set table "AVR_STAT_SSLI_DOMAIN"
			foreach key [table keys -subtable $table] {
				set value [table lookup -notouch -subtable $table $key]
				if {$value > -1} {
					#account for first incr setting the value to 0 not 1
					set value [expr $value + 1]
					append output "${table}|${value}|${key}\n"			
					table incr -notouch -subtable $table $key [expr $value * -1]
				}
			}
			HTTP::respond 200 content $output
		}
	}
	########Splunk session table iRule END ########
	regsub -all "\\\\" $::splunk_session_table_irule "\\\\\\\\" ::splunk_session_table_irule  
	regsub -all {\$} $::splunk_session_table_irule "\\\\$" ::splunk_session_table_irule 	

	##########################################################################################################################################################################################################################################################################################################################################################################
	##########################################################################################################################################################################################################################################################################################################################################################################
	############################################################################################################################################################# START START  Risk Engine Team Code  START START ############################################################################################################################################################
	##########################################################################################################################################################################################################################################################################################################################################################################
	##########################################################################################################################################################################################################################################################################################################################################################################

	########Risk Engine Log iRule Start ########
	set ::risk_engine_log_irule	{
		when RULE_INIT {
			# SOL14544 workaround
			upvar #0 tcl_platform static::tcl_platform
		}
		when HTTP_REQUEST {
		    # DevCentral specific - Start (closed by default)
		    #if { [string tolower [HTTP::path]] starts_with "/monitors/" } {return}
		    # DevCentral specific - End

			set http_request_time [clock clicks -milliseconds]
			if { [class match [string tolower [HTTP::path]] contains <extdatagroup>] } {
				return
			}

			set xhr false
			if { [HTTP::header "X-Requested-With" ] equals "XMLHttpRequest" } {
				set xhr true
			}

			# alert_guid will be filled assuming integration with WebSafe was properly done and cookie name was set to "kubdum" (or the iRule was synchronized according to the integration settings).
			set alert_guid ""
			if {[HTTP::cookie exists "kubdum"]} {
				set alert_guid [HTTP::cookie value "kubdum"]
			}

			set deviceCookieExists "0"
			if {[HTTP::cookie exists "dcid"]} {
				set dcid [HTTP::cookie value "dcid"]
                set deviceCookieExists "1"
			} else {
				set dcid "$http_request_time-[expr { int(100000000 * rand()) }]"
			}

			set pvid "$http_request_time-[expr { int(100000000 * rand()) }]"

			set RE {[][{};#\\\$\r\n\t\"\u0080-\uffff]}
			set substitution {[format \\\\u%04x [scan "\\&" %c]]}

			set client_addr [IP::client_addr]

			set pr_dcid [subst [string map {\n {\\u000a}} [regsub -all $RE $dcid $substitution]]]
			set pr_xff [subst [string map {\n {\\u000a}} [regsub -all $RE [HTTP::header X-Forwarded-For] $substitution]]]
			set pr_path [subst [string map {\n {\\u000a}} [regsub -all $RE [URI::decode [HTTP::path]] $substitution]]]
			set pr_query [subst [string map {\n {\\u000a}} [regsub -all $RE [URI::decode [HTTP::query]] $substitution]]]
			set pr_ua [subst [string map {\n {\\u000a}} [regsub -all $RE [HTTP::header User-Agent] $substitution]]]
			set pr_ref [subst [string map {\n {\\u000a}} [regsub -all $RE [URI::decode [HTTP::header Referer]] $substitution]]]
			set pr_content_type [subst [string map {\n {\\u000a}} [regsub -all $RE [HTTP::header Content-Type] $substitution]]]
			set pr_accept_language [subst [string map {\n {\\u000a}} [regsub -all $RE [HTTP::header Accept-Language] $substitution]]]
			set pr_accept_header [subst [string map {\n {\\u000a}} [regsub -all $RE [HTTP::header Accept] $substitution]]]
			set pr_http_method [subst [string map {\n {\\u000a}} [regsub -all $RE [HTTP::method] $substitution]]]
			set pr_host [subst [string map {\n {\\u000a}} [regsub -all $RE [HTTP::host] $substitution]]]
			set pr_virtual_name [subst [string map {\n {\\u000a}} [regsub -all $RE [virtual name] $substitution]]]

			set current_geolocation ""
			if { [catch { set current_geolocation [whereis $client_addr] } ] } {
				set current_geolocation "Not Available"
			}

            set ip_reputation ""
			if { [catch { set ip_reputation [IP::reputation $client_addr] } ] } {
				set ip_reputation "Not Available"
			}

			set current_xff_geolocation ""
			set xff_reputation ""
			if {[HTTP::header exists X-Forwarded-For]}
            {
                if { [catch { set current_xff_geolocation [whereis $pr_xff] } ] } {
                    set current_xff_geolocation "Not Available"
                }

                if { [catch { set xff_reputation [IP::reputation $pr_xff] } ] } {
                    set xff_reputation "Not Available"
                }
			}
			
			set user_data_ext "\{\}"

			set msg "<bofdata><bordata>\{\"time\":$http_request_time,\"host\":\"<hostname>\",\"source\":\"bigip.bbbbbbbbbbb.log.pv\",\"sourcetype\":\"f5:bigip:log:json\",<eventformat_start>\"device_base_mac\":\"<device_base_mac>\",\"devicegroup\":\"<devicegroup>\",\"facility\":\"<facility>\",\"event_type\":\"PV\",\"ver\":1.1,\"VS\":\"$pr_virtual_name\",\"pvid\":\"$pvid\",\"client_addr\":\"$client_addr\",\"DCID\":\"$pr_dcid\",\"xff\":\"$pr_xff\",\"user-agent\":\"$pr_ua\",\"referer\":\"$pr_ref\",\"http_host\":\"$pr_host\",\"path\":\"$pr_path\",\"query\":\"$pr_query\",\"geolocation\":\"$current_geolocation\",\"xff_geolocation\":\"$current_xff_geolocation\",\"http_method\":\"$pr_http_method\",\"xhr\":\"$xhr\",\"header_accept\":\"$pr_accept_header\",\"accept_language\":\"$pr_accept_language\",\"content_type\":\"$pr_content_type\",\"alert_guid\":\"$alert_guid\",\"ip_reputation\":\"$ip_reputation\",\"xff_reputation\":\"$xff_reputation\"<eventformat_end>\}<eordata><eofdata>\n"
			set fullPOST "POST <datareceiverurl> HTTP/1.1\nHost: <hechost>\nAccept: */*\nUser-Agent: BigIP\nContent-Type: application/json\n<datareceiverauth>\nContent-Length: [string length $msg]\n\n${msg}"
	
			catch {HSL::send [HSL::open <pool> ] $<datatosend>}
		}


		when HTTP_RESPONSE {
			if {[info exists deviceCookieExists] && ($deviceCookieExists == "0")} {
				HTTP::cookie insert name "dcid" value $dcid
				HTTP::cookie expires "dcid" 7776000 relative
				unset deviceCookieExists
			}

		    if {[info exists pvid] && [string length $pvid] > 0} {
				HTTP::cookie insert name "pvid" value $pvid
				HTTP::cookie expires "pvid" 300 relative
			}
		}	
	}
	########Risk Engine Log iRule END ########
	regsub -all "\\\\" $::risk_engine_log_irule "\\\\\\\\" ::risk_engine_log_irule  
	regsub -all {\$} $::risk_engine_log_irule "\\\\$" ::risk_engine_log_irule  
	
	########Risk Engine Login iRule Start ########
	set ::risk_engine_login_irule	{
		when RULE_INIT {
			# SOL14544 workaround
			upvar #0 tcl_platform static::tcl_platform
		}
		when HTTP_REQUEST {
			set loginrequest 0
			
			##lookup class data and set input data
			if {[set risk_matchstring "[class match -value "[virtual name]|[string tolower [HTTP::path]]" equals <datagroup>]"] ne "" } {
				set risk_matchstring [split $risk_matchstring "|"]
				set risk_login_method [lindex $risk_matchstring 0]
				set risk_login_form_username [lindex $risk_matchstring 1]
				set risk_login_validation [lindex $risk_matchstring 2]
				set risk_login_validation_string [lindex $risk_matchstring 3]
				set risk_login_validation_value [lindex $risk_matchstring 4]
				
				
				#"HTML - Form", "HTML - Basic Auth", "HTML - Digest"
				
					if { $risk_login_method equals "HTML - Form" && [HTTP::method] equals "POST" } {
						set loginrequest 1
						HTTP::collect [HTTP::header Content-Length]
					}
			}
		}

		when HTTP_REQUEST_DATA {
			if {[info exists loginrequest] && $loginrequest} {
				set RE {[][{};#\\\$\r\n\t\"\u0080-\uffff]}
				set substitution {[format \\\\u%04x [scan "\\&" %c]]}

				set http_request_time [clock clicks -milliseconds]
				set pr_path [subst [string map {\n {\\u000a}} [regsub -all $RE [URI::decode [HTTP::path]] $substitution]]]

				set username ""
				if { $risk_login_method equals "HTML - Form" } {
					set body 		"?[HTTP::payload]"
					set username	[string trim [URI::decode [URI::query $body $risk_login_form_username]]]
					unset body

				}

			    set laid "la_$http_request_time-[expr { int(1000000 * rand()) }]"

				set login_request_data ""
				set pvid ""
				set pr_pvid ""

				if {[HTTP::cookie exists "pvid"] && [string length [HTTP::cookie value "pvid"]] > 0} {
					set pvid [HTTP::cookie value "pvid"]
					set pr_pvid [subst [string map {\n {\\u000a}} [regsub -all $RE $pvid $substitution]]]
				}

                set deviceCookieExists "0"
                if {[HTTP::cookie exists "dcid"]} {
                    set dcid [HTTP::cookie value "dcid"]
                    set deviceCookieExists "1"
                } else {
                    set dcid "$http_request_time-[expr { int(100000000 * rand()) }]"
                }

			    set client_addr [IP::client_addr]

			    set pr_dcid [subst [string map {\n {\\u000a}} [regsub -all $RE $dcid $substitution]]]
			    set pr_username [subst [string map {\n {\\u000a}} [regsub -all $RE $username $substitution]]]
			    set pr_xff [subst [string map {\n {\\u000a}} [regsub -all $RE [HTTP::header X-Forwarded-For] $substitution]]]
			    set pr_ua [subst [string map {\n {\\u000a}} [regsub -all $RE [HTTP::header User-Agent] $substitution]]]
			    set pr_ref [subst [string map {\n {\\u000a}} [regsub -all $RE [URI::decode [HTTP::header Referer]] $substitution]]]
			    set pr_virtual_name [subst [string map {\n {\\u000a}} [regsub -all $RE [virtual name] $substitution]]]
                set pr_path [subst [string map {\n {\\u000a}} [regsub -all $RE [URI::decode [HTTP::path]] $substitution]]]
                set pr_query [subst [string map {\n {\\u000a}} [regsub -all $RE [URI::decode [HTTP::query]] $substitution]]]
                set pr_host [subst [string map {\n {\\u000a}} [regsub -all $RE [HTTP::host] $substitution]]]

			set current_geolocation ""
			if { [catch { set current_geolocation [whereis $client_addr] } ] } {
				set current_geolocation "Not Available"
			}

            set ip_reputation ""
			if { [catch { set ip_reputation [IP::reputation $client_addr] } ] } {
				set ip_reputation "Not Available"
			}

			set current_xff_geolocation ""
			set xff_reputation ""
			if {[HTTP::header exists X-Forwarded-For]}
            {
                if { [catch { set current_xff_geolocation [whereis $pr_xff] } ] } {
                    set current_xff_geolocation "Not Available"
                }

                if { [catch { set xff_reputation [IP::reputation $pr_xff] } ] } {
                    set xff_reputation "Not Available"
                }
			}

			set user_data_ext "\{\}"
			
		        set login_request_data ", \"pvid\":\"$pr_pvid\",\"client_addr\":\"$client_addr\",\"DCID\":\"$pr_dcid\",\"xff\":\"$pr_xff\",\"user-agent\":\"$pr_ua\",\"path\":\"$pr_path\",\"referer\":\"$pr_ref\",\"http_host\":\"$pr_host\",\"query\":\"$pr_query\",\"geolocation\":\"$current_geolocation\",\"xff_geolocation\":\"$current_xff_geolocation\",\"ip_reputation\":\"$ip_reputation\",\"xff_reputation\":\"$xff_reputation\""

				HTTP::release
			}
		}

		when HTTP_RESPONSE {
		  if {[info exists laid] && [string length $laid] > 0} {

			if {[info exists deviceCookieExists] && ($deviceCookieExists == "0")} {
			  HTTP::cookie insert name "dcid" value $dcid
			  HTTP::cookie expires "dcid" 7776000 relative
			  unset deviceCookieExists
			}

			set login_result "NA"
			

			if { [info exists risk_login_validation] && $risk_login_validation eq "Cookie Name" && [info exists risk_login_validation_string] && $risk_login_validation_string ne "" } {
				if {[HTTP::cookie exists $risk_login_validation_string]} {
					set login_result "PASS"
				} else {
					set login_result "FAIL"
				}
			}
			
			if { [info exists risk_login_validation] && $risk_login_validation eq "Cookie Name-Value" && [info exists risk_login_validation_string] && $risk_login_validation_string ne "" } {
				if {[HTTP::cookie value $risk_login_validation_string] == $risk_login_validation_value} {
					set login_result "PASS"
				} else {
					set login_result "FAIL"
				}
			}			
			
			if { [info exists risk_login_validation] && $risk_login_validation eq "Response Code" && [info exists risk_login_validation_string] && $risk_login_validation_string ne "" } {
				if {[HTTP::status] == $risk_login_validation_string} {
					set login_result "PASS"
				} else {
					set login_result "FAIL"
				}
			}
			
			if { [info exists risk_login_validation] && $risk_login_validation eq "Redirect Path" && [info exists risk_login_validation_string] && $risk_login_validation_string ne "" } {
				if {[HTTP::header location] == $risk_login_validation_string} {
					set login_result "PASS"
				} else {
					set login_result "FAIL"
				}
			}			
			
			set msg "<bofdata><bordata>\{\"time\":$http_request_time,\"host\":\"<hostname>\",\"source\":\"bigip.risk.log.login.result\",\"sourcetype\":\"f5:bigip:log:json\",<eventformat_start>\"device_base_mac\":\"<device_base_mac>\",\"devicegroup\":\"<devicegroup>\",\"facility\":\"<facility>\",\"event_type\":\"LoginResult\",\"ver\":1.1,\"VS\":\"$pr_virtual_name\",\"laid\":\"$laid\",\"username\":\"$pr_username\",\"login_result\":\"$login_result\" $login_request_data<eventformat_end>\}<eordata><eofdata>\n"
			set fullPOST "POST <datareceiverurl> HTTP/1.1\nHost: <hechost>\nAccept: */*\nUser-Agent: BigIP\nContent-Type: application/json\n<datareceiverauth>\nContent-Length: [string length $msg]\n\n${msg}"
	
			catch {HSL::send [HSL::open <pool> ] $<datatosend>}
			unset laid
		  }
		}	
	}
	########Risk Engine Log iRule END ########
	regsub -all "\\\\" $::risk_engine_login_irule "\\\\\\\\" ::risk_engine_login_irule  
	regsub -all {\$} $::risk_engine_login_irule "\\\\$" ::risk_engine_login_irule 
	
	
	##########################################################################################################################################################################################################################################################################################################################################################################
	##########################################################################################################################################################################################################################################################################################################################################################################
	############################################################################################################################################################ END END END  Risk Engine Team Code  END END END #############################################################################################################################################################
	##########################################################################################################################################################################################################################################################################################################################################################################
	##########################################################################################################################################################################################################################################################################################################################################################################
	

	########run local iapp START ########
	set ::icall_run_iapp	{
		set info [tmsh::get_config sys application service /Common/<appname>-local.app/<appname>-local]
		set junk ""
		set lastupdated 0
		set lastdeployedvirtual ""
		set lastdeployed 0

		regexp {localmode__lastupdated[ |\n]*\{[ |\n]*value *(\d*)} $info junk lastupdated
		regexp {localmode__lastupdatedvirtual[ |\n]*\{[ |\n]*value *(\S*)} $info junk lastdeployedvirtual

		catch {set info [tmsh::get_config ltm virtual $lastdeployedvirtual]}
		regexp {lastdeployed:(\d*)} $info junk lastdeployed

		if {$lastdeployed < $lastupdated } {
			#iapp::conf modify sys application service /Common/<appname>-local.app/<appname>-local \{ execute-action definition \};#11.5.x support
			exec /usr/bin/tmsh -c " modify sys application service /Common/<appname>-local.app/<appname>-local \{ execute-action definition \} "
		}
	}
	########run local iapp END ########


	proc format_poolmembers {input} {
		set poolmembers ""
		foreach item $input {
			set member [split $item ":"]
			#check to see if this is an ip
			if {[regexp {^((([2][5][0-5]|([2][0-4]|[1][0-9]|[0-9])?[0-9])\.){3})([2][5][0-5]|([2][0-4]|[1][0-9]|[0-9])?[0-9])$} [lindex $member 0]]} {
				append poolmembers "$item \{ address [lindex $member 0] \}"
			} else {
				#must be FQDN - let tmsh do validation
				if {$::version != "13.1.1" && $::version != "13.1.0" && $::version != "13.0.0" && $::version != "12.1.1" && $::version != "12.1.0" && $::version != "12.0.0" } {
					puts "Sorry FQNDs are not supported in this version"
					error "Sorry FQNDs are not supported in this version"				
				}
				append poolmembers "splunk-$item \{ fqdn \{ autopopulate enabled name [lindex $member 0] \} \}"
				
			}
		}	
		return $poolmembers
	}

	proc tmsh_exe {command}{
		#this proc gives us the ability to do commands outside the context of the iApp:)
		puts $command
		exec /usr/bin/tmsh -c $command
	}	

	proc tmsh_create { component arguments } {
	    regsub -all {\"} $arguments "\\\"" arguments
	    regsub -all {\[} $arguments "\\\[" arguments
	    regsub -all {\]} $arguments "\\\]" arguments
	    puts "$component $arguments"
	    tmsh::run_proc f5.app_utils:do_tmsh_create "\"$component\"" "\"$arguments\""
	}

	proc tmsh_modify { component arguments } {
	    regsub -all {\"} $arguments "\\\"" arguments
	    regsub -all {\[} $arguments "\\\[" arguments
	    regsub -all {\]} $arguments "\\\]" arguments
	    puts "$component $arguments"	    
	    tmsh::run_proc f5.app_utils:do_tmsh_modify "\"$component\"" "\"$arguments\""
	}
	
	proc listformat { input } {
		set listofitems {}
		set workinglist {}

		#let's get our output into a list by line
		regsub -all " |{|\\}" $input "" input
		set workinglist [split $input "\n"] 
		foreach item $workinglist {
			if {[string first / $item] == 0 } {
				lappend listofitems $item
			}
		}
		return $listofitems	
	}	

	###start of logic

	set iappvars "intro__localmode \{ value \"Yes\" \} localmode__uniqueid \{ value \"$::uniqueid\"\} localmode__lastupdated \{ value \"${::time}\" \} localmode__orginalapp \{ value \"${::app}\" \} basic__logging \{ value \"$::basic__logging\" \} basic__syslog \{ value \"$::basic__syslog\" \} basic__format \{ value \"$::basic__format\" \} basic__appiqformat \{ value \"$::basic__appiqformat\" \} basic__systemtenant \{ value \\\"$::basic__systemtenant\\\" \} basic__alerts \{ value \"$::basic__alerts\" \} basic__hostnameoverride \{ value \\\"$::basic__hostnameoverride\\\" \} basic__devicegroupoverride \{ value \\\"$::basic__devicegroupoverride\\\" \} basic__facility \{ value \\\"$::basic__facility\\\" \} rbac__indexprefix \{ value \\\"$::rbac__indexprefix\\\" \} rbac__indexprefixstring \{ value \\\"$::rbac__indexprefixstring\\\" \} rbac__systemindex \{ value \\\"$::rbac__systemindex\\\" \} rbac__systemindexstring \{ value \\\"$::rbac__systemindexstring\\\" \} rbac__defaultindex \{ value \\\"$::rbac__defaultindex\\\" \} rbac__defaultindexstring \{ value \\\"$::rbac__defaultindexstring\\\" \} rbac__logindex \{ value \\\"$::rbac__logindex\\\" \} rbac__logindexstring \{ value \\\"$::rbac__logindexstring\\\" \} rbac__sharedindex \{ value \\\"$::rbac__sharedindex\\\" \} rbac__sharedindexstring \{ value \\\"$::rbac__sharedindexstring\\\" \} basic__rbac \{ value \\\"$::basic__rbac\\\" \} "                    
	set createiapp "No"
	set syslogconfigtype "NONE"
	set alertconfigtype "NONE"
	set logpublisher ""
	set application_mapping ""

	#stats
	if {$::basic__stats == "Yes" && $::intro__localmode == "No"}{ 
		#tmsh::log "FINEME $::statistics__pushconfig"
		
		if {$::statistics__pushconfig == "Yes" && $::basic__format != "F5 BIG-IQ"} {
			###Application Mapping Logic
			#tmsh::log "FINEME Phase2"
			if {$::applicationmapping__mode == "Define" || $::applicationmapping__mode == "Use Existing with Addtional"} {
				set nonpriority 0
				set mappingconfig ""
				
				if {$::applicationmapping__mode == "Use Existing with Addtional"} {
					set mappingconfig [exec /bin/echo $::applicationmapping__mapping | /usr/bin/base64 -d -i]
				}


				foreach mapping $::applicationmapping__mappings {
					set mapping_type [tmsh::get_field_value $mapping type]
					set mapping_datasource [tmsh::get_field_value $mapping datasource]
					switch $mapping_datasource {
						"Virtual Name" {set mapping_datasource virtual_name}
						"Virtual IP" {set mapping_datasource ip}
						"Virtual Port" {set mapping_datasource port}
						"Virtual Protocol" {set mapping_datasource protocol}
						"Virtual Description" {set mapping_datasource description}
						"Partition" {set mapping_datasource partition}
						"iApp Name" {set mapping_datasource appservice}
						"Wideip Name" {set mapping_datasource wideip_name}
					}

					set mapping_regex [tmsh::get_field_value $mapping regex]
					set mapping_mappingaction [tmsh::get_field_value $mapping mappingaction]
					set mapping_directmapping [tmsh::get_field_value $mapping directmapping]
					set mapping_priority [tmsh::get_field_value $mapping priority]	
					set mapping_appendprefix [tmsh::get_field_value $mapping appendprefix]	

					if {$mapping_priority == ""} {set mapping_priority [expr $nonpriority +10000000000]}

					append mappingconfig "{$mapping_priority} {$mapping_type~$mapping_datasource~$mapping_regex~$mapping_mappingaction~$mapping_directmapping~$mapping_appendprefix} "
					set nonpriority [expr $nonpriority +1]
				}
				set application_mapping "application_mapping {\ndata \"$mappingconfig\"\n}"				
			}
			if {$::applicationmapping__mode == "Use Existing" } {
				set mappingconfig [exec /bin/echo $::applicationmapping__mapping | /usr/bin/base64 -d -i]
				set application_mapping "application_mapping {\ndata \"$mappingconfig\"\n}"
			}
			
			#tmsh::log "FINEME $application_mapping"
				
		}
		set existing_splunkstats "non exist"
		#we can uncomment the line below to not update the data group each time. this would be used if we wanted to update the list of metrics per customer.
		#catch {set existing_splunkstats [tmsh::get_config ltm data-group internal /Common/${::app}-send_stats ]}
			    
		if {$existing_splunkstats == "non exist"}{
			#iapp::conf create ltm data-group internal /Common/${::app}-send_stats \{ records replace-all-with \{$application_mapping$::splunkstats_datagroup \} type string \};#11.5.x support
			tmsh_create "ltm data-group internal" "/Common/${::app}-send_stats \{ records replace-all-with \{ $application_mapping$::splunkstats_datagroup  \} type string \}"	
		} else {
			#iapp::conf create ltm data-group internal /Common/${::app}-send_stats type string ;#11.5.x support
			tmsh_create "ltm data-group internal" "/Common/${::app}-send_stats type string"
			
		}
		
		
		
		#deal with proxy configuration 112654373
		set statsproxystring ""
		if {$::statistics__proxy != "No" } {
			set statsproxystring " --proxy ${::statistics__proxyip}:${::statistics__proxyport} "
			if {$::statistics__proxyuser != "" && $::statistics__proxypassword != ""} {
				append statsproxystring "--proxy-user ${::statistics__proxyuser}:${::statistics__proxypassword} "
			}

		}
		set ihealthproxystring ""
		if {$::ihealth__proxy != "No" } {
			set ihealthproxystring " --proxy ${::ihealth__proxyip}:${::ihealth__proxyport} "
			if {$::ihealth__proxyuser != "" && $::ihealth__proxypassword != ""} {
				append ihealthproxystring "--proxy-user ${::ihealth__proxyuser}:${::ihealth__proxypassword} "
			}

		}		
			
		set map "
		  <ihealthproxyinfo> \"$ihealthproxystring\"
		  <statsproxyinfo> \"$statsproxystring\"
		"	
		set ::icall_splunkstats [string map $map $::icall_splunkstats]		

		iapp::conf create sys icall script /Common/${::app}-send_stats \{ definition \{$::icall_splunkstats\} description none events none \};#11.5.x support
		
		#deal with random offset
		if {$::statistics__randomstart == "Yes" } {
			#pick a random time between the two numbers
			set start_second [expr {int(rand()*($::statistics__pushinterval))}]
			set randomstart "[clock format $::time -format "%Y-%m-%d:%H:%M"]:${start_second}"
			tmsh_create "sys icall handler periodic" "/Common/${::app}-send_stats \{  interval $::statistics__pushinterval first-occurrence $randomstart script /Common/${::app}-send_stats \}"
		} else {		
			tmsh_create "sys icall handler periodic" "/Common/${::app}-send_stats \{  interval $::statistics__pushinterval script /Common/${::app}-send_stats \}"
		}
		


		
		if {$::statistics__pushconfig == "Yes" && $::applicationmapping__mode != "Use Existing" && $::basic__format != "F5 BIG-IQ"} {
			set mappingconfig [exec /bin/echo $mappingconfig | /usr/bin/base64 -w 0 ]
			if {$version == "13.0.0" || $version == "13.1.0" || $version == "13.1.1" || $::version == "12.0.0" || $::version == "12.1.0" || $::version == "12.1.1" } {
				iapp::conf modify sys application service /Common/${::app}.app/${::app} variables modify \{ applicationmapping__exportmapping  \{ value "$mappingconfig" \} \}			
			} else {
				#deal with pre 12.0 iapp callback 112280367
				set command "\"modify sys application service /Common/${::app}.app/${::app} variables modify \{ applicationmapping__exportmapping  \{ value \"$mappingconfig\" \} \}\""
				exec nohup bash -c "sleep 30;  tmsh -c $command " &
			}
		}
		
		
		##SSLi Stats
		if {$::statistics__pushsslistats == "Yes"} {
			set deviceinfo [tmsh::get_config net self /Common/*]
			set address ""
			foreach object $deviceinfo {
				regexp {traffic-group[ |\n]*(\S*)} $object junk trafficgroup

				if {$trafficgroup contains "local"} {
					regexp {address[ |\n]*([0-9|.]*)} $object junk address
					# correct for IPv6 as the first address returned 114436217
					if {$address contains "."} {
						break
					}
				}

			}
			catch {tmsh_exe "create sys management-route /Common/session_table-stats network 255.255.255.253/32 gateway $address"}

			tmsh_create "ltm rule" "/Common/ir-${::app}-session_table-stats \{ $::splunk_session_table_irule \}"
			iapp::conf create ltm virtual /Common/${::app}-session_table-stats \{ destination 255.255.255.253:[expr $::uniqueid + 5] ip-protocol tcp mask 255.255.255.255 profiles replace-all-with \{ http \{ \} tcp \{ \} \} rules \{  /Common/ir-${::app}-session_table-stats \} source 0.0.0.0/0\}

		}
		
		
	}
	
	
	#agent manager registration iCall
	if {$::basic__format == "F5 Analytics" && $::intro__localmode == "No"} {
		#deal with proxy configuration 112654373
		set statsproxystring ""
		if {$::statistics__proxy != "No" } {
			set statsproxystring " --proxy ${::statistics__proxyip}:${::statistics__proxyport} "
			if {$::statistics__proxyuser != "" && $::statistics__proxypassword != ""} {
				append statsproxystring "--proxy-user ${::statistics__proxyuser}:${::statistics__proxypassword} "
			}

		}
		set ihealthproxystring ""
		if {$::ihealth__proxy != "No" } {
			set ihealthproxystring " --proxy ${::ihealth__proxyip}:${::ihealth__proxyport} "
			if {$::ihealth__proxyuser != "" && $::ihealth__proxypassword != ""} {
				append ihealthproxystring "--proxy-user ${::ihealth__proxyuser}:${::ihealth__proxypassword} "
			}

		}	
		set map "
		  <ihealthproxyinfo> \"$ihealthproxystring\"
		  <statsproxyinfo> \"$statsproxystring\"
		"	
		set ::icall_agentmanagerreg [string map $map $::icall_agentmanagerreg]
		set regstarttime "[clock format $::time -format "%Y-%m-%d:%H:%M:%S"]"

		iapp::conf create sys icall script /Common/${::app}-agentmanager_reg \{ definition \{$::icall_agentmanagerreg\} description none events none \};#11.5.x support
		tmsh_create "sys icall handler periodic" "/Common/${::app}-agentmanager_reg \{  interval 3600 first-occurrence $regstarttime script /Common/${::app}-agentmanager_reg \}"		
	}	


	#ihealth
	if {$::basic__ihealth == "Yes" && $::ihealth__ihealthpassword != "" && $::intro__localmode == "No"}{ 
		#deal with proxy configuration 112654373
		set ihealthproxystring ""
		if {$::ihealth__proxy != "No" } {
			set ihealthproxystring " --proxy ${::ihealth__proxyip}:${::ihealth__proxyport} "
			if {$::ihealth__proxyuser != "" && $::ihealth__proxypassword != ""} {
				append ihealthproxystring "--proxy-user ${::ihealth__proxyuser}:${::ihealth__proxypassword} "
			}

		}		
			
		set map "
		  <ihealthproxyinfo> \"$ihealthproxystring\"
		"	
		set ::icall_ihealth [string map $map $::icall_ihealth]			
	
		iapp::conf create sys icall script /Common/${::app}-send_ihealth \{ definition \{$::icall_ihealth\} description none events none \}
		
		regexp {(.*):(.*)} $::ihealth__time junk start_hour start_minute
		
		#deal with padded 0 
		scan $start_minute %d start_minute
		
		#if start time is earlier change start date to tomorrow
		
		set current_hour [clock format $time -format "%H"]
		#deal with padded 0 
		scan $current_hour %d current_hour		
		set current_min [clock format $time -format "%M"]
		scan $current_min %d current_min
		
		set starttime $time
		
		if {[expr ($start_hour * 60) + $start_minute ] < [expr ($current_hour * 60) + $current_min ]} {
			set starttime [expr $time + 86400]
		}
		
		set starttime "[clock format $starttime -format "%Y-%m-%d"]:${start_hour}:${start_minute}:00"
		
		tmsh_create "sys icall handler periodic" "/Common/${::app}-send_ihealth \{  interval 86400 first-occurrence  $starttime script /Common/${::app}-send_ihealth \}"	
	}

	#logging
	if {$::basic__logging == "Yes"}{ 

		if {[catch {set ::logging__useexistingsplunk $::logging__useexistingsplunk}]}{set ::logging__useexistingsplunk "No"}
		if {[catch {set ::logging__useexistingapikey $::logging__useexistingapikey}]}{set ::logging__useexistingapikey "No"}
		if {[catch {set ::logging__splunkdestinationprotocol $::logging__splunkdestinationprotocol}]}{set ::logging__splunkdestinationprotocol ""}
		
		if {[catch {set ::logging__sendrisklogins $::logging__sendrisklogins}]}{set ::logging__sendrisklogins "No"}
		if {[catch {set ::logging__sendriskdata $::logging__sendriskdata}]}{set ::logging__sendriskdata "No"}
		if {[catch {set ::logging__sendadm $::logging__sendadm}]}{set ::logging__sendadm "No"}
		if {[catch {set ::logging__virtual $::logging__virtual}]}{set ::logging__virtual ""}
		
		if {[catch {set logging_dest $::logging__splunkdestinationip}]}{set logging_dest ""}
		if {[catch {set logging_port $::logging__splunkdestinationport}]}{set logging_port ""}	
		if {[catch {set ::logging__splunkdestinationhostheader $::logging__splunkdestinationhostheader}]}{set ::logging__splunkdestinationhostheader ""}
		if {[catch {set ::logging__splunkdestinationip $::logging__splunkdestinationip}]}{set ::logging__splunkdestinationip ""}
		if {$::logging__splunkdestinationhostheader == "" }{set ::logging__splunkdestinationhostheader $::logging__splunkdestinationip}
		if {$::logging__splunkdestinationprotocol == "HTTP Event Collector - HTTP" } {set ::logging__splunkdestinationprotocol "HTTP"}
		if {$::logging__splunkdestinationprotocol == "HTTP Event Collector - HTTPS" } {set ::logging__splunkdestinationprotocol "HTTPS"}
		if {[catch {set ::logging__snatpool $::logging__snatpool}]}{set ::logging__snatpool "Auto-Map"}

		if { $::logging__useexistingsplunk == "Yes" } {
			set ::logging__splunkdestinationip $::statistics__splunkdestinationip
			set ::logging__splunkdestinationhostheader $::statistics__splunkdestinationhostheader
			set ::logging__splunkdestinationport $::statistics__splunkdestinationport
			set ::logging__splunkdestinationprotocol $::statistics__splunkdestinationprotocol
			set ::logging__splunkapikey $::statistics__splunkapikey
		}
		if { $::logging__useexistingapikey == "Yes"  } {
			set ::logging__splunkapikey $::statistics__splunkapikey
		}
		if {$::logging__splunkdestinationprotocol == "HTTPS" || $::logging__splunkdestinationprotocol == "HTTP" } {	
		
		
			if {$::basic__format == "Splunk"} {
				set datareceiverurl "/services/collector/event"
				set datareceiverauth "Authorization: Splunk $::logging__splunkapikey"
			} 
			if {$::basic__format == "F5 Analytics"} {	
				set datareceiverurl "/mgmt/ap/v1/tenants/$::basic__systemtenant/sources/$hostnamemapping/raw-data"
				set datareceiverauth "Postman-Token: $::logging__splunkapikey"
			}
			if {$::basic__format == "F5 Risk Engine"} {	
				set datareceiverurl "/"
				set datareceiverauth "HealthStats: $::logging__splunkapikey"
			}
			if {$::basic__format == "F5 Risk Engine - Full"} {	
				set datareceiverurl "/"
				set datareceiverauth "HealthStats: $::logging__splunkapikey"
			}			
			
			
			if {$::intro__localmode == "No"} {
				append iappvars " logging__splunkdestinationip  \{ value \"$::logging__splunkdestinationip\" \} logging__splunkdestinationhostheader  \{ value \"$::logging__splunkdestinationhostheader\" \} logging__splunkdestinationport \{ value \"$::logging__splunkdestinationport\" \} logging__splunkdestinationprotocol  \{ value \"$::logging__splunkdestinationprotocol\" \} logging__splunkapikey  \{ value \"$::logging__splunkapikey\" \} logging__snatpool  \{ value \"$::logging__snatpool\" \} logging__sendriskdata  \{ value \"$::logging__sendriskdata\" \} logging__sendadm  \{ value \"$::logging__sendadm\" \} "
				set iapp_updated_virtual " localmode__lastupdatedvirtual  \{ value \"/Common/${::app}-hec-forwarder-tcp-log-stage1\" \} "
				set createiapp Yes

				if {$::logging__sendriskdata == "Yes" } {
					set map "
					  <pool> \"-proto TCP -pool /Common/${::app}-hec-forwarder-tcp-log-stage1\"
					  <datatosend> fullPOST
					  <hechost> $::logging__splunkdestinationhostheader
					  <datareceiverurl> $datareceiverurl
					  <datareceiverauth> \"$datareceiverauth\"			  
					  <hslpool> /Common/${::app}-hec-forwarder-tcp-log-stage1
					  <hostname> \"$hostnamemapping\"
					  <eventformat_start> \"$eventformat_start\"
					  <eventformat_end> \"$eventformat_end\"
					  <bofdata> \"$bofdata\"
					  <eofdata> \"$eofdata\"
					  <bordata> \"$bordata\"
					  <eordata> \"$eordata\"					  
					  <facility> \"$::basic__facility\"
					  <devicegroup> \"$devicegroup\"
					  <device_base_mac> \"$device_base_mac\"
					  <extdatagroup> \"/Common/${::app}-risk_engine-exclude-ext\"
					  
					"
					set ::risk_engine_log_irule [string map $map $::risk_engine_log_irule]
					
					
					iapp::conf create ltm data-group internal /Common/${::app}-risk_engine-exclude-ext records replace-all-with \{ .bmp \{ \} .css \{ \} .eot \{ \} .flv \{ \} .gif \{ \} .ico \{ \} .jpeg \{ \} .jpg \{ \} .js \{ \} .m4v \{ \} .mp4 \{ \} .mpv \{ \} .ogv \{ \} .otf \{ \} .png \{ \} .svg \{ \} .swf \{ \} .ttf \{ \} .webm \{ \} .woff \{ \} \} type string
					
					
					tmsh_create "ltm rule" "/Common/ir-${::app}-risk_engine-log \{ $::risk_engine_log_irule \}"
										
				}
				
	
				if {$::logging__sendrisklogins == "Yes" } {
					set map "
					  <pool> \"-proto TCP -pool /Common/${::app}-hec-forwarder-tcp-log-stage1\"
					  <datatosend> fullPOST
					  <hechost> $::logging__splunkdestinationhostheader
					  <datareceiverurl> $datareceiverurl
					  <datareceiverauth> \"$datareceiverauth\"			  
					  <hslpool> /Common/${::app}-hec-forwarder-tcp-log-stage1
					  <hostname> \"$hostnamemapping\"
					  <eventformat_start> \"$eventformat_start\"
					  <eventformat_end> \"$eventformat_end\"
					  <bofdata> \"$bofdata\"
					  <eofdata> \"$eofdata\"
					  <bordata> \"$bordata\"
					  <eordata> \"$eordata\"					  
					  <datagroup> \"/Common/${::app}-risk_engine-loginmapping\"
					  <facility> \"$::basic__facility\"
					  <devicegroup> \"$devicegroup\"
					  <device_base_mac> \"$device_base_mac\"
					  <extdatagroup> \"/Common/${::app}-risk_engine-exclude-ext\"
					"
					set ::risk_engine_login_irule [string map $map $::risk_engine_login_irule]
					tmsh_create "ltm rule" "/Common/ir-${::app}-risk_engine-login \{ $::risk_engine_login_irule \}"
										
				}				
				
				
				
				

			} else {
			
				
				
				set map "
				  <hechost> $::logging__splunkdestinationhostheader
				  <datareceiverurl> $datareceiverurl
				  <datareceiverauth> \"$datareceiverauth\"			  
				  <hslpool> /Common/${::app}-hec-forwarder-tcp-log-stage1
				  <hostname> \"$hostnamemapping\"
				  <eventformat_start> \"$eventformat_start\"
				  <eventformat_end> \"$eventformat_end\"
				  <bofdata> \"$bofdata\"
				  <eofdata> \"$eofdata\"
				  <bordata> \"$bordata\"
				  <eordata> \"$eordata\"
				  <index> \"$rbac_log_index_irule\"
				  <facility> \"$::basic__facility\"
				  <devicegroup> \"$devicegroup\"
				  <device_base_mac> \"$device_base_mac\"				  
				"	
				set ::splunk_hec_forwarder_tcp_irule [string map $map $::splunk_hec_forwarder_tcp_irule]
				set ::splunk_hec_forwarder_adm_irule [string map $map $::splunk_hec_forwarder_adm_irule]
				
				#iapp::conf create ltm rule /Common/ir-${::app}-hec-forwarder-tcp-log \{ $::splunk_hec_forwarder_tcp_irule \};#11.5.x support
				tmsh_create "ltm rule" "/Common/ir-${::app}-hec-forwarder-tcp-log \{ $::splunk_hec_forwarder_tcp_irule \}"
				
				
				
				
				if {$::logging__sendadm == "Yes" } {
					tmsh_create "ltm rule" "/Common/ir-${::app}-hec-forwarder-adm-log \{ $::splunk_hec_forwarder_adm_irule \}" 
				}


				#iapp::conf create ltm pool /Common/${::app}-hec-forwarder-tcp-log-stage2 \{ members replace-all-with \{ [format_poolmembers "$::logging__splunkdestinationip:$::logging__splunkdestinationport"] \} \};#11.5.x support
				tmsh_create "ltm pool" "/Common/${::app}-hec-forwarder-tcp-log-stage2 \{ members replace-all-with \{ [format_poolmembers "$::logging__splunkdestinationip:$::logging__splunkdestinationport"] \} \}"
				#iapp::conf create ltm pool /Common/${::app}-hec-forwarder-tcp-log-stage1 \{ members replace-all-with  \{ 255.255.255.254:[expr $::uniqueid + 40001] \{ address 255.255.255.254 \} \} \};#11.5.x support
				tmsh_create "ltm pool" "/Common/${::app}-hec-forwarder-tcp-log-stage1 \{ members replace-all-with  \{ 255.255.255.254:[expr $::uniqueid + 40001] \{ address 255.255.255.254 \} \} \}"
				#iapp::conf create ltm pool /Common/${::app}-hec-forwarder-tcp-log-stage0 \{ members replace-all-with  \{ 255.255.255.254:[expr $::uniqueid + 1] \{ address 255.255.255.254 \} \} \};#11.5.x support
				tmsh_create "ltm pool" "/Common/${::app}-hec-forwarder-tcp-log-stage0 \{ members replace-all-with  \{ 255.255.255.254:[expr $::uniqueid + 1] \{ address 255.255.255.254 \} \} \}" 

				#iapp::conf create sys log-config destination remote-high-speed-log /Common/${::app}-hec-forwarder-tcp-log \{ pool-name /Common/${::app}-hec-forwarder-tcp-log-stage0 \} ;#11.5.x support
				tmsh_create "sys log-config destination remote-high-speed-log" "/Common/${::app}-hec-forwarder-tcp-log \{ pool-name /Common/${::app}-hec-forwarder-tcp-log-stage0 \}" 
				#iapp::conf create sys log-config destination splunk /Common/${::app}-hec-forwarder-tcp-log-splunkformat \{ forward-to /Common/${::app}-hec-forwarder-tcp-log \} ;#11.5.x support
				tmsh_create "sys log-config destination splunk" "/Common/${::app}-hec-forwarder-tcp-log-splunkformat \{ forward-to /Common/${::app}-hec-forwarder-tcp-log \}"
				
				tmsh_create "ltm profile" "request-log pr-${::app}-logging \{ defaults-from request-log  log-response-by-default yes log-response-logging-errors disabled response-log-error-pool none response-log-error-protocol mds-udp response-log-error-template none response-log-pool /Common/${::app}-hec-forwarder-tcp-log-stage0 response-log-protocol mds-tcp response-log-template \"$::request_logging_string\" response-logging enabled\}"
				
				
				if {$::basic__format != "F5 Risk Engine"} {
					set logpublisher "/Common/${::app}-hec-forwarder-tcp-log-splunkformat \{ \} "
				}
				
				
				catch {tmsh_exe "create ltm virtual-address /Common/255.255.255.254 app-service none traffic-group /Common/traffic-group-local-only"}	
				iapp::conf create ltm virtual /Common/${::app}-hec-forwarder-tcp-log-stage1 \{ destination 255.255.255.254:[expr $::uniqueid + 1] description "lastdeployed:${::time}" ip-protocol tcp mask 255.255.255.255 profiles replace-all-with \{ tcp \{ \} \} rules \{  /Common/ir-${::app}-hec-forwarder-tcp-log \} source 0.0.0.0/0 source-address-translation \{ type automap \}\} ;#11.5.x support
				if {$::logging__sendadm == "Yes" } {
					iapp::conf create ltm virtual /Common/${::app}-hec-forwarder-tcp-adm-stage1 \{ destination 255.255.255.254:[expr $::uniqueid + 11] description "lastdeployed:${::time}" ip-protocol tcp mask 255.255.255.255 profiles replace-all-with \{ tcp \{ \} \} rules \{  /Common/ir-${::app}-hec-forwarder-adm-log \} source 0.0.0.0/0 source-address-translation \{ type automap \}\} ;#11.5.x support
					catch {tmsh_exe "modify sys db adm.cloud.host value 255.255.255.254:1011"}
				}
				
				if {$::logging__snatpool == "Auto-Map" } {
					set natconfig "source-address-translation \{ type automap \}"
				} else {
					set natconfig "source-address-translation \{ type snat pool $::logging__snatpool \}"
				}
				
				if {$::logging__splunkdestinationprotocol == "HTTPS"} {
					iapp::conf create ltm virtual /Common/${::app}-hec-forwarder-tcp-log-stage2 \{ destination 255.255.255.254:[expr $::uniqueid + 40001] description "lastdeployed:${::time}" ip-protocol tcp mask 255.255.255.255 pool /Common/${::app}-hec-forwarder-tcp-log-stage2 profiles  replace-all-with \{ serverssl-insecure-compatible \{ context serverside \} tcp \{ \} \} source 0.0.0.0/0 $natconfig\}          ;#11.5.x support
				} else {
					iapp::conf create ltm virtual /Common/${::app}-hec-forwarder-tcp-log-stage2 \{ destination 255.255.255.254:[expr $::uniqueid + 40001] description "lastdeployed:${::time}" ip-protocol tcp mask 255.255.255.255 pool /Common/${::app}-hec-forwarder-tcp-log-stage2 profiles  replace-all-with \{ tcp \{ \} \} source 0.0.0.0/0 $natconfig\}          ;#11.5.x support
				}

			}


		} else {
			if {$::intro__localmode == "No"} {
				if {$::logging__splunkdestinationprotocol == "TCP"} {
					#iapp::conf create ltm pool /Common/${::app}-tcp-log \{ members replace-all-with \{ [format_poolmembers "$logging_dest:$logging_port"] \} \};#11.5.x support
					tmsh_create "ltm pool" "/Common/${::app}-tcp-log \{ members replace-all-with \{ [format_poolmembers "$logging_dest:$logging_port"] \} \}"
					
					tmsh_create "ltm profile" "request-log pr-${::app}-logging \{ defaults-from request-log  log-response-by-default yes log-response-logging-errors disabled response-log-error-pool none response-log-error-protocol mds-udp response-log-error-template none response-log-pool /Common/${::app}-tcp-log response-log-protocol mds-tcp response-log-template \"$::request_logging_string\" response-logging enabled\}"

					#iapp::conf create sys log-config destination remote-high-speed-log /Common/${::app}-tcp-log \{ pool-name /Common/${::app}-tcp-log \};#11.5.x support
					tmsh_create "sys log-config destination remote-high-speed-log" "/Common/${::app}-tcp-log \{ pool-name /Common/${::app}-tcp-log \}"  
					#iapp::conf create sys log-config destination splunk /Common/${::app}-tcp-log-splunkformat \{ forward-to /Common/${::app}-tcp-log \};#11.5.x support
					tmsh_create "sys log-config destination splunk" "/Common/${::app}-tcp-log-splunkformat \{ forward-to /Common/${::app}-tcp-log \}" 
					if {$::basic__format != "F5 Risk Engine"} {
						set logpublisher "/Common/${::app}-tcp-log-splunkformat \{ \}"
					}
					
					
					if {$::logging__sendriskdata == "Yes" } {
						set map "
						  <pool> \"-proto TCP -pool /Common/${::app}-tcp-log\"
						  <datatosend> msg
						  <hechost> $::logging__splunkdestinationhostheader
						  <datareceiverurl> $datareceiverurl
						  <datareceiverauth> \"$datareceiverauth\"			  
						  <hslpool> /Common/${::app}-hec-forwarder-tcp-log-stage1
						  <hostname> \"$hostnamemapping\"
						  <eventformat_start> \"$eventformat_start\"
						  <eventformat_end> \"$eventformat_end\"
						  <bofdata> \"$bofdata\"
						  <eofdata> \"$eofdata\"
						  <bordata> \"$bordata\"
						  <eordata> \"$eordata\"
						  <index> \"$rbac_log_index_irule\"
						  <facility> \"$::basic__facility\"
						  <devicegroup> \"$devicegroup\"
						  <device_base_mac> \"$device_base_mac\"
						  <extdatagroup> \"/Common/${::app}-risk_engine-exclude-ext\"
						  
						"
						set ::risk_engine_log_irule [string map $map $::risk_engine_log_irule]
						
						iapp::conf create ltm data-group internal /Common/${::app}-risk_engine-exclude-ext records replace-all-with \{ .bmp \{ \} .css \{ \} .eot \{ \} .flv \{ \} .gif \{ \} .ico \{ \} .jpeg \{ \} .jpg \{ \} .js \{ \} .m4v \{ \} .mp4 \{ \} .mpv \{ \} .ogv \{ \} .otf \{ \} .png \{ \} .svg \{ \} .swf \{ \} .ttf \{ \} .webm \{ \} .woff \{ \} \} type string
						
						tmsh_create "ltm rule" "/Common/ir-${::app}-risk_engine-log \{ $::risk_engine_log_irule \}"			
					}
					
					if {$::logging__sendrisklogins == "Yes" } {
						set map "
						  <pool> \"-proto TCP -pool /Common/${::app}-tcp-log\"
						  <datatosend> msg
						  <hechost> $::logging__splunkdestinationhostheader
						  <datareceiverurl> $datareceiverurl
						  <datareceiverauth> \"$datareceiverauth\"			  
						  <hslpool> /Common/${::app}-hec-forwarder-tcp-log-stage1
						  <hostname> \"$hostnamemapping\"
						  <eventformat_start> \"$eventformat_start\"
						  <eventformat_end> \"$eventformat_end\"
						  <bofdata> \"$bofdata\"
						  <eofdata> \"$eofdata\"
						  <bordata> \"$bordata\"
						  <eordata> \"$eordata\"
						  <index> \"$rbac_log_index_irule\"
						  <datagroup> \"/Common/${::app}-risk_engine-loginmapping\"
						  <facility> \"$::basic__facility\"
						  <devicegroup> \"$devicegroup\"
						  <device_base_mac> \"$device_base_mac\"
						  <extdatagroup> \"/Common/${::app}-risk_engine-exclude-ext\"
						  
						"
						set ::risk_engine_login_irule [string map $map $::risk_engine_login_irule]
						tmsh_create "ltm rule" "/Common/ir-${::app}-risk_engine-login \{ $::risk_engine_login_irule \}"			
					}					
					
					
				} else {
					#iapp::conf create ltm pool /Common/${::app}-udp-log \{ members replace-all-with \{ [format_poolmembers "$logging_dest:$logging_port"] \} \};#11.5.x support
					tmsh_create "ltm pool" "/Common/${::app}-udp-log \{ members replace-all-with \{ [format_poolmembers "$logging_dest:$logging_port"] \} \}" 

					#iapp::conf create sys log-config destination remote-high-speed-log /Common/${::app}-udp-log \{ protocol udp pool-name /Common/${::app}-udp-log \} ;#11.5.x support
					tmsh_create "sys log-config destination remote-high-speed-log" "/Common/${::app}-udp-log \{ protocol udp pool-name /Common/${::app}-udp-log \}"
					#iapp::conf create sys log-config destination splunk /Common/${::app}-udp-log-splunkformat \{ forward-to /Common/${::app}-udp-log \};#11.5.x support
					tmsh_create "sys log-config destination splunk" "/Common/${::app}-udp-log-splunkformat \{ forward-to /Common/${::app}-udp-log \}"
					
					tmsh_create "ltm profile" "request-log pr-${::app}-logging \{ defaults-from request-log  log-response-by-default yes log-response-logging-errors disabled response-log-error-pool none response-log-error-protocol mds-udp response-log-error-template none response-log-pool /Common/${::app}-udp-log response-log-protocol mds-udp response-log-template \"$::request_logging_string\" response-logging enabled\}"
					
					if {$::basic__format != "F5 Risk Engine"} {
						set logpublisher "/Common/${::app}-udp-log-splunkformat \{ \}"
					}
					
					if {$::logging__sendriskdata == "Yes" } {
						set map "
						  <pool> \"-proto UDP -pool /Common/${::app}-udp-log\"
						  <datatosend> msg
						  <hechost> $::logging__splunkdestinationhostheader
						  <datareceiverurl> $datareceiverurl
						  <datareceiverauth> \"$datareceiverauth\"			  
						  <hslpool> /Common/${::app}-hec-forwarder-tcp-log-stage1
						  <hostname> \"$hostnamemapping\"
						  <eventformat_start> \"$eventformat_start\"
						  <eventformat_end> \"$eventformat_end\"
						  <bofdata> \"$bofdata\"
						  <eofdata> \"$eofdata\"
						  <bordata> \"$bordata\"
						  <eordata> \"$eordata\"
						  <index> \"$rbac_log_index_irule\"
						  <facility> \"$::basic__facility\"
						  <devicegroup> \"$devicegroup\"
						  <device_base_mac> \"$device_base_mac\"
						  <extdatagroup> \"/Common/${::app}-risk_engine-exclude-ext\"
						  
						"
						set ::risk_engine_log_irule [string map $map $::risk_engine_log_irule]
						tmsh_create "ltm rule" "/Common/ir-${::app}-risk_engine-log \{ $::risk_engine_log_irule \}"			
					}

					if {$::logging__sendrisklogins == "Yes" } {
						set map "
						  <pool> \"-proto UDP -pool /Common/${::app}-udp-log\"
						  <datatosend> msg
						  <hechost> $::logging__splunkdestinationhostheader
						  <datareceiverurl> $datareceiverurl
						  <datareceiverauth> \"$datareceiverauth\"			  
						  <hslpool> /Common/${::app}-hec-forwarder-tcp-log-stage1
						  <hostname> \"$hostnamemapping\"
						  <eventformat_start> \"$eventformat_start\"
						  <eventformat_end> \"$eventformat_end\"
						  <bofdata> \"$bofdata\"
						  <eofdata> \"$eofdata\"
						  <bordata> \"$bordata\"
						  <eordata> \"$eordata\"
						  <index> \"$rbac_log_index_irule\"
						  <datagroup> \"/Common/${::app}-risk_engine-loginmapping\"
						  <facility> \"$::basic__facility\"
						  <devicegroup> \"$devicegroup\"
						  <device_base_mac> \"$device_base_mac\"				  
						  
						"
						set ::risk_engine_login_irule [string map $map $::risk_engine_login_irule]
						tmsh_create "ltm rule" "/Common/ir-${::app}-risk_engine-login \{ $::risk_engine_login_irule \}"			
					}					
				}
			}
		}
		
		
		if {($::logging__sendriskdata == "Yes" || $::logging__sendrisklogins == "Yes") && $::intro__localmode == "No"} {
			set virtualstomodify {}
			set virtualstomodify_log {}
			set virtualstomodify_login {}
			set riskengine_logins ""
			
			if {$::logging__sendriskdata == "Yes" } {
				foreach virtual $::logging__virtual {
					lappend virtualstomodify_log $virtual
					lappend virtualstomodify $virtual
				}
			}
			
			if {$::logging__sendrisklogins == "Yes" } {
				foreach login $::logging__risklogindata {
					if {[tmsh::get_field_value $login virtual] == "<ALL-FROM-ABOVE>"} {
						foreach virtual $::logging__virtual {
							lappend virtualstomodify_login $virtual
							lappend virtualstomodify $virtual
							append riskengine_logins "\"$virtual|[string tolower [tmsh::get_field_value $login risklogin]]\" \{ data \"[tmsh::get_field_value $login loginmethod]|[tmsh::get_field_value $login usernamefield]|[tmsh::get_field_value $login validationmethod]|[tmsh::get_field_value $login validation]|[tmsh::get_field_value $login validationvalue]\" \}"
						}							
					} else {
						lappend virtualstomodify_login [tmsh::get_field_value $login virtual]
						lappend virtualstomodify [tmsh::get_field_value $login virtual]
						append riskengine_logins "\"[tmsh::get_field_value $login virtual]|[string tolower [tmsh::get_field_value $login risklogin]]\" \{ data \"[tmsh::get_field_value $login loginmethod]|[tmsh::get_field_value $login usernamefield]|[tmsh::get_field_value $login validationmethod]|[tmsh::get_field_value $login validation]|[tmsh::get_field_value $login validationvalue]\" \}"
					}
				}
			}


			
			#get the last run of virtual servers - catch if this is the first time run
			set historicalvirtualstomodify_log {}
			catch {set historicalvirtualstomodify_log [listformat [tmsh::get_config ltm data-group internal /Common/${::app}-risk_engine-log]]}
			set historicalvirtualstomodify_login {}
			catch {set historicalvirtualstomodify_login [listformat [tmsh::get_config ltm data-group internal /Common/${::app}-risk_engine-login]]}			
			
			foreach virtual $historicalvirtualstomodify_log {
				lappend virtualstomodify $virtual
			}

			foreach virtual $historicalvirtualstomodify_login {
				lappend virtualstomodify $virtual
			}			
			
			
			set virtualstomodify [lsort -unique $virtualstomodify]
			set virtualstomodify_log [lsort -unique $virtualstomodify_log]
			set virtualstomodify_login [lsort -unique $virtualstomodify_login]			
				
					##get current irules tied to the virtual server##
					set currentvirtualirules ""
					catch {set currentvirtualirules [listformat [tmsh::get_config ltm virtual $virtual rules]]}
					#modify if missing
					if {[string first ir-${::app}-risk_engine-log $currentvirtualirules] ==-1}{
						iapp::conf modify ltm virtual $virtual rules \{ /Common/ir-${::app}-risk_engine-log $currentvirtualirules \}	
					}			
			
			foreach virtual $virtualstomodify {
				if { ![catch {set currentvirtualirules [listformat [tmsh::get_config ltm virtual $virtual rules]]}] } {
					#figure out what we need to do
					set modify 0
					set addlog 0
					set addlogin 0
					set haslog 0
					set haslogin 0
					
					if {[lsearch $virtualstomodify_log $virtual] !=-1} {set addlog 1}
					if {[lsearch $virtualstomodify_login $virtual] !=-1} {set addlogin 1}
					if {[string first ir-${::app}-risk_engine-log $currentvirtualirules] !=-1}{set haslog 1}
					if {[string first ir-${::app}-risk_engine-login $currentvirtualirules] !=-1}{set haslogin 1}
					
					if {$addlog == "1" && $haslog == "0"} {
						set currentvirtualirules "$currentvirtualirules /Common/ir-${::app}-risk_engine-log"
						set modify 1
					}
					
					if {$addlogin == "1" && $haslogin == "0"} {
						set currentvirtualirules "$currentvirtualirules /Common/ir-${::app}-risk_engine-login"
						set modify 1
					}
					
					if {$addlog == "0" && $haslog == "1"} {
						set newvirtualirules {}
						set modify 1
						foreach irule $currentvirtualirules {
							#figure out if it is a patch rule and remove
							if {[string first ir-${::app}-risk_engine-log $irule] ==-1}{
								lappend newvirtualirules $irule
							}
						}
						set currentvirtualirules $newvirtualirules
					}
					if {$addlogin == "0" && $haslogin == "1"} {
						set newvirtualirules {}
						set modify 1
						foreach irule $currentvirtualirules {
							#figure out if it is a patch rule and remove
							if {[string first ir-${::app}-risk_engine-login $irule] ==-1}{
								lappend newvirtualirules $irule
							}
						}
						set currentvirtualirules $newvirtualirules
					}
					
					if {$modify == "1"} {
						iapp::conf modify ltm virtual $virtual rules \{ $currentvirtualirules \}
					}
				}
			}			
			
			#store loginmappings
			if {$riskengine_logins !=""}{
				iapp::conf create ltm data-group internal /Common/${::app}-risk_engine-loginmapping records replace-all-with \{ $riskengine_logins \} type string
			}			

			#store the list of virtuals that were patched on this pass so we can remove the irule from a virtual server removed from the patched list on the next run
			if {$virtualstomodify_log !=""}{
				iapp::conf create ltm data-group internal /Common/${::app}-risk_engine-log records replace-all-with \{ $virtualstomodify_log \} type string
			}
			if {$virtualstomodify_login !=""}{
				iapp::conf create ltm data-group internal /Common/${::app}-risk_engine-login records replace-all-with \{ $virtualstomodify_login \} type string
			}			
		}		
		
	}


	#syslog
	if {$::basic__syslog == "Yes"}{ 
		if {[catch {set ::syslog__useexistingsplunk $::syslog__useexistingsplunk}]}{set ::syslog__useexistingsplunk "No"}
		if {[catch {set ::syslog__useexistingapikey $::syslog__useexistingapikey}]}{set ::syslog__useexistingapikey "No"}
		if {[catch {set ::syslog__splunkdestinationprotocol $::syslog__splunkdestinationprotocol}]}{set ::syslog__splunkdestinationprotocol ""}
		if {[catch {set syslog_dest $::syslog__splunkdestinationip}]}{set syslog_dest ""}
		if {[catch {set syslog_port $::syslog__splunkdestinationport}]}{set syslog_port ""}
		if {[catch {set ::syslog__splunkdestinationhostheader $::syslog__splunkdestinationhostheader}]}{set ::syslog__splunkdestinationhostheader ""}
		if {[catch {set ::syslog__splunkdestinationip $::syslog__splunkdestinationip}]}{set ::syslog__splunkdestinationip ""}
		if { $::syslog__splunkdestinationhostheader == "" }{set ::syslog__splunkdestinationhostheader $::syslog__splunkdestinationip}
		if {$::syslog__splunkdestinationprotocol == "HTTP Event Collector - HTTP" } {set ::syslog__splunkdestinationprotocol "HTTP"}
		if {$::syslog__splunkdestinationprotocol == "HTTP Event Collector - HTTPS" } {set ::syslog__splunkdestinationprotocol "HTTPS"}
		if {[catch {set ::syslog__snatpool $::syslog__snatpool}]}{set ::syslog__snatpool "Auto-Map"}

		if { $::syslog__useexistingsplunk == "Yes" } {
			set ::syslog__splunkdestinationip $::statistics__splunkdestinationip
			set ::syslog__splunkdestinationhostheader $::statistics__splunkdestinationhostheader
			set ::syslog__splunkdestinationport $::statistics__splunkdestinationport
			set ::syslog__splunkdestinationprotocol $::statistics__splunkdestinationprotocol
			set ::syslog__splunkapikey $::statistics__splunkapikey
		}
		if { $::syslog__useexistingapikey == "Yes"  } {
			set ::syslog__splunkapikey $::statistics__splunkapikey
		}
		if {$::syslog__splunkdestinationprotocol == "HTTPS" || $::syslog__splunkdestinationprotocol == "HTTP" } {
			if {$::intro__localmode == "No"} {		
				append iappvars " syslog__splunkdestinationip  \{ value \"$::syslog__splunkdestinationip\" \}  syslog__splunkdestinationhostheader  \{ value \"$::syslog__splunkdestinationhostheader\" \} syslog__splunkdestinationport  \{ value \"$::syslog__splunkdestinationport\" \} syslog__splunkdestinationprotocol  \{ value \"$::syslog__splunkdestinationprotocol\" \} syslog__splunkapikey  \{ value \"$::syslog__splunkapikey\" \} syslog__snatpool  \{ value \"$::syslog__snatpool\" \} "
				set iapp_updated_virtual " localmode__lastupdatedvirtual  \{ value \"/Common/${::app}-hec-forwarder-syslog-stage1\" \} "
				set createiapp Yes
				set syslogconfigtype "HEC"
				set syslogconfig " /Common/${::app}-syslog \{ host 255.255.255.254 remote-port [expr $::uniqueid + 2]\} "

			} else {
				if {$::basic__format == "Splunk"} {
					set datareceiverurl "/services/collector/event"
					set datareceiverauth "Authorization: Splunk $::syslog__splunkapikey"
				} 
				if {$::basic__format == "F5 Analytics"} {	
					set datareceiverurl "/mgmt/ap/v1/tenants/$::basic__systemtenant/sources/$hostnamemapping/raw-data"
					set datareceiverauth "Postman-Token: $::syslog__splunkapikey"
				}
				if {$::basic__format == "F5 Risk Engine"} {	
					set datareceiverurl "/"
					set datareceiverauth "HealthStats: $::syslog__splunkapikey"
				}
				if {$::basic__format == "F5 Risk Engine - Full"} {	
					set datareceiverurl "/"
					set datareceiverauth "HealthStats: $::syslog__splunkapikey"
				}				
				
				
				set map "
				  <hechost> $::syslog__splunkdestinationhostheader
				  <datareceiverurl> $datareceiverurl
				  <datareceiverauth> \"$datareceiverauth\"			  
				  <hslpool> /Common/${::app}-hec-forwarder-syslog-stage1
				  <hostname> \"$hostnamemapping\"
				  <eventformat_start> \"$eventformat_start\"
				  <eventformat_end> \"$eventformat_end\"
				  <bofdata> \"$bofdata\"
				  <eofdata> \"$eofdata\"
				  <bordata> \"$bordata\"
				  <eordata> \"$eordata\"
				  <index> \"$rbac_log_index_irule\"
				  <facility> \"$::basic__facility\"
				  <devicegroup> \"$devicegroup\"
				  <device_base_mac> \"$device_base_mac\"				  
				  
				"
	
				set ::splunk_hec_forwarder_udp_syslog_irule [string map $map $::splunk_hec_forwarder_udp_syslog_irule]
				#iapp::conf create ltm rule /Common/ir-${::app}-hec-forwarder-udp-syslog \{ $::splunk_hec_forwarder_udp_syslog_irule \}	;#11.5.x support
				tmsh_create "ltm rule" "/Common/ir-${::app}-hec-forwarder-udp-syslog \{ $::splunk_hec_forwarder_udp_syslog_irule \}"


				iapp::conf create ltm pool /Common/${::app}-hec-forwarder-syslog-stage2 \{ members replace-all-with \{ [format_poolmembers "$::syslog__splunkdestinationip:$::syslog__splunkdestinationport"] \} \}
				iapp::conf create ltm pool /Common/${::app}-hec-forwarder-syslog-stage1 \{ members replace-all-with  \{ 255.255.255.254:[expr $::uniqueid + 40002] \{ address 255.255.255.254 \} \} \} 			

				catch {tmsh_exe "create ltm virtual-address /Common/255.255.255.254 app-service none traffic-group /Common/traffic-group-local-only"}
				iapp::conf create ltm virtual /Common/${::app}-hec-forwarder-syslog-stage1 \{ destination 255.255.255.254:[expr $::uniqueid + 2] description "lastdeployed:${::time}" ip-protocol udp mask 255.255.255.255 profiles  replace-all-with \{ udp \{ \} \} rules \{ /Common/ir-${::app}-hec-forwarder-udp-syslog \} source 0.0.0.0/0 \} 
				if {$::syslog__snatpool == "Auto-Map" } {
					set natconfig "source-address-translation \{ type automap \}"
				} else {
					set natconfig "source-address-translation \{ type snat pool $::syslog__snatpool \}"
				}
				if {$::syslog__splunkdestinationprotocol == "HTTPS"} {
					iapp::conf create ltm virtual /Common/${::app}-hec-forwarder-syslog-stage2 \{ destination 255.255.255.254:[expr $::uniqueid + 40002] description "lastdeployed:${::time}" ip-protocol tcp mask 255.255.255.255 pool /Common/${::app}-hec-forwarder-syslog-stage2 profiles  replace-all-with \{ serverssl-insecure-compatible \{ context serverside \} tcp \{ \} \} source 0.0.0.0/0 $natconfig\}          
				} else {
					iapp::conf create ltm virtual /Common/${::app}-hec-forwarder-syslog-stage2 \{ destination 255.255.255.254:[expr $::uniqueid + 40002] description "lastdeployed:${::time}" ip-protocol tcp mask 255.255.255.255 pool /Common/${::app}-hec-forwarder-syslog-stage2 profiles  replace-all-with \{  tcp \{ \} \} source 0.0.0.0/0 $natconfig\}          
				}
			}

		} else {
			if {$::intro__localmode == "No"} {
				set syslogconfigtype "UDP"
				set syslogconfig " /Common/${::app}-syslog \{ host $syslog_dest remote-port $syslog_port\} "
			}
		}
	}

	#alerts
	if {$::basic__alerts == "Yes"}{ 
		if {[catch {set ::alerts__useexistingsplunk $::alerts__useexistingsplunk}]}{set ::alerts__useexistingsplunk "No"}
		if {[catch {set ::alerts__useexistingapikey $::alerts__useexistingapikey}]}{set ::alerts__useexistingapikey "No"}
		if {[catch {set ::alerts__splunkdestinationprotocol $::alerts__splunkdestinationprotocol}]}{set ::alerts__splunkdestinationprotocol ""}
		if {[catch {set ::alerts__splunkdestinationhostheader $::alerts__splunkdestinationhostheader}]}{set ::alerts__splunkdestinationhostheader ""}
		if {[catch {set ::alerts__splunkdestinationip $::alerts__splunkdestinationip}]}{set ::alerts__splunkdestinationip ""}
		if { $::alerts__splunkdestinationhostheader == "" }{set ::alerts__splunkdestinationhostheader $::alerts__splunkdestinationip}
		if {$::alerts__splunkdestinationprotocol == "HTTP Event Collector - HTTP" } {set ::alerts__splunkdestinationprotocol "HTTP"}
		if {$::alerts__splunkdestinationprotocol == "HTTP Event Collector - HTTPS" } {set ::alerts__splunkdestinationprotocol "HTTPS"}
		if {[catch {set ::alerts__snatpool $::alerts__snatpool}]}{set ::alerts__snatpool "Auto-Map"}

		if { $::alerts__useexistingsplunk == "Yes" } {
			set ::alerts__splunkdestinationip $::statistics__splunkdestinationip
			set ::alerts__splunkdestinationhostheader $::statistics__splunkdestinationhostheader
			set ::alerts__splunkdestinationport $::statistics__splunkdestinationport
			set ::alerts__splunkdestinationprotocol $::statistics__splunkdestinationprotocol
			set ::alerts__splunkapikey $::statistics__splunkapikey
		}
		if { $::alerts__useexistingapikey == "Yes"  } {
			set ::alerts__splunkapikey $::statistics__splunkapikey
		}
		if {$::alerts__splunkdestinationprotocol == "HTTPS" || $::alerts__splunkdestinationprotocol == "HTTP" } {
			if {$::intro__localmode == "No"} {		
				append iappvars " alerts__splunkdestinationip  \{ value \"$::alerts__splunkdestinationip\" \}  alerts__splunkdestinationhostheader  \{ value \"$::alerts__splunkdestinationhostheader\" \} alerts__splunkdestinationport  \{ value \"$::alerts__splunkdestinationport\" \} alerts__splunkdestinationprotocol  \{ value \"$::alerts__splunkdestinationprotocol\" \} alerts__splunkapikey  \{ value \"$::alerts__splunkapikey\" \} alerts__snatpool  \{ value \"$::alerts__snatpool\" \} "
				set iapp_updated_virtual " localmode__lastupdatedvirtual  \{ value \"/Common/${::app}-hec-forwarder-snmptrap-stage1\" \} "
				set createiapp Yes
				set alertconfig " /Common/${::app}-snmp \{ community splunk version 2c host 255.255.255.254 port [expr $::uniqueid + 3] \} "
				set alertconfigtype "HEC"
			} else {
				if {$::basic__format == "Splunk"} {
					set datareceiverurl "/services/collector/event"
					set datareceiverauth "Authorization: Splunk $::alerts__splunkapikey"
				} 
				if {$::basic__format == "F5 Analytics"} {	
					set datareceiverurl "/mgmt/ap/v1/tenants/$::basic__systemtenant/sources/$hostnamemapping/raw-data"
					set datareceiverauth "Postman-Token: $::alerts__splunkapikey"
				}
				if {$::basic__format == "F5 Risk Engine"} {	
					set datareceiverurl "/"
					set datareceiverauth "HealthStats: $::alerts__splunkapikey"
				}
				if {$::basic__format == "F5 Risk Engine - Full"} {	
					set datareceiverurl "/"
					set datareceiverauth "HealthStats: $::alerts__splunkapikey"
				}				
				
				
				set map "
				  <hechost> $::alerts__splunkdestinationhostheader
				  <datareceiverurl> $datareceiverurl
				  <datareceiverauth> \"$datareceiverauth\"			  
				  <hslpool> /Common/${::app}-hec-forwarder-snmptrap-stage1
				  <hostname> \"$hostnamemapping\"
				  <eventformat_start> \"$eventformat_start\"
				  <eventformat_end> \"$eventformat_end\"
				  <bofdata> \"$bofdata\"
				  <eofdata> \"$eofdata\"
				  <bordata> \"$bordata\"
				  <eordata> \"$eordata\"
				  <index> \"$rbac_log_index_irule\"
				  <facility> \"$::basic__facility\"
				  <devicegroup> \"$devicegroup\"
				  <device_base_mac> \"$device_base_mac\"				  
				  
				"				
				set ::splunk_hec_forwarder_udp_snmptrap_irule [string map $map $::splunk_hec_forwarder_udp_snmptrap_irule]
				iapp::conf create ltm rule /Common/ir-${::app}-hec-forwarder-udp-snmptrap \{ $::splunk_hec_forwarder_udp_snmptrap_irule \};#11.5.x support
				tmsh_create "ltm rule" "/Common/ir-${::app}-hec-forwarder-udp-snmptrap \{ $::splunk_hec_forwarder_udp_snmptrap_irule \}"

				iapp::conf create ltm pool /Common/${::app}-hec-forwarder-snmptrap-stage2 \{ members replace-all-with \{ [format_poolmembers "$::alerts__splunkdestinationip:$::alerts__splunkdestinationport"] \} \}
				iapp::conf create ltm pool /Common/${::app}-hec-forwarder-snmptrap-stage1 \{ members replace-all-with  \{ 255.255.255.254:[expr $::uniqueid + 40003] \{ address 255.255.255.254 \} \} \}                                                                                                


				catch {tmsh_exe "create ltm virtual-address /Common/255.255.255.254 app-service none traffic-group /Common/traffic-group-local-only"}
				iapp::conf create ltm virtual /Common/${::app}-hec-forwarder-snmptrap-stage1 \{ destination 255.255.255.254:[expr $::uniqueid + 3] description "lastdeployed:${::time}" ip-protocol udp mask 255.255.255.255 profiles  replace-all-with \{ udp \{ \} \} rules \{ /Common/ir-${::app}-hec-forwarder-udp-snmptrap \} source 0.0.0.0/0 \} 
				if {$::alerts__snatpool == "Auto-Map" } {
					set natconfig "source-address-translation \{ type automap \}"
				} else {
					set natconfig "source-address-translation \{ type snat pool $::alerts__snatpool \}"
				}				
				if {$::alerts__splunkdestinationprotocol == "HTTPS" } { 
					iapp::conf create ltm virtual /Common/${::app}-hec-forwarder-snmptrap-stage2 \{ destination 255.255.255.254:[expr $::uniqueid + 40003] description "lastdeployed:${::time}" ip-protocol tcp mask 255.255.255.255 pool /Common/${::app}-hec-forwarder-snmptrap-stage2 profiles  replace-all-with \{ serverssl-insecure-compatible \{ context serverside \} tcp \{ \} \} source 0.0.0.0/0 $natconfig\}          
				} else {
					iapp::conf create ltm virtual /Common/${::app}-hec-forwarder-snmptrap-stage2 \{ destination 255.255.255.254:[expr $::uniqueid + 40003] description "lastdeployed:${::time}" ip-protocol tcp mask 255.255.255.255 pool /Common/${::app}-hec-forwarder-snmptrap-stage2 profiles  replace-all-with \{ tcp \{ \} \} source 0.0.0.0/0 $natconfig\}          
				}

			}
		} else {
			if {$::intro__localmode == "No"} {
				set alertconfigtype "UDP"
				set alertconfig " /Common/${::app}-snmp \{ community $::alerts__splunkdestinationcommunity version 2c host $::alerts__splunkdestinationip port $::alerts__splunkdestinationport \} "
			}
		}
	}


	#local iapp
	if { $createiapp == "Yes" } {


		set existing_iapp "non exist"
		catch {set existing_iapp [tmsh::get_config sys application service /Common/${::app}-local.app/${::app}-local]}
		if {$existing_iapp == "non exist"}{
			#iapp::conf create sys application service /Common/${::app}-local \{ template f5.analytics traffic-group traffic-group-local-only variables replace-all-with \{ $iapp_updated_virtual $iappvars \} \};#issue with 11.6 and back - think it has to do with transactions
			tmsh_exe "create sys application service /Common/${::app}-local \{ template f5.analytics traffic-group traffic-group-local-only variables replace-all-with \{ $iapp_updated_virtual $iappvars \} \}"
		} else {
			#iapp::conf modify sys application service /Common/${::app}-local.app/${::app}-local \{ template f5.analytics traffic-group traffic-group-local-only execute-action definition variables replace-all-with \{ $iapp_updated_virtual $iappvars \} \};#issue with 11.6 and back - think it has to do with transactions
			tmsh_exe "modify sys application service /Common/${::app}-local.app/${::app}-local \{ template f5.analytics traffic-group traffic-group-local-only execute-action definition variables replace-all-with \{ $iapp_updated_virtual $iappvars \} \}"
		}		

		set map "
		  <appname> ${::app}
		"	
		set ::icall_run_iapp [string map $map $::icall_run_iapp]		
		iapp::conf create sys icall script /Common/${::app}-local_run_iapp \{ definition \{$::icall_run_iapp\} description none events none \}
		iapp::conf create sys icall handler periodic /Common/${::app}-local_run_iapp \{  interval 300 script /Common/${::app}-local_run_iapp \}		
	}

	if {$::basic__format != "F5 Risk Engine" && $::basic__format != "F5 BIG-IQ" && $::basic__logging == "Yes"} {	
		set deviceinfo "non exist"
		catch {set deviceinfo [tmsh::get_config sys log-config publisher /Common/logging-publisher-f5_analytics]}

		if {$deviceinfo == "non exist"}{
			catch {tmsh_exe "create sys log-config publisher /Common/logging-publisher-f5_analytics"}
			set deviceinfo ""
			set deviceinfo [tmsh::get_config sys log-config publisher /Common/logging-publisher-f5_analytics]
		}
		foreach object $deviceinfo {
			if {$::intro__localmode == "Yes" || $createiapp != "Yes" } {
				regsub -all "/Common/${::app}-hec-forwarder-tcp-log-splunkformat { }" $object "" object
			} else {
				regsub -all "/Common/${::app}-udp-log { }" $object "" object
				regsub -all "/Common/${::app}-tcp-log { }" $object "" object
			}
			regsub -all "/Common/logging-publisher-f5_analytics { }" $object "/Common/logging-publisher-f5_analytics \{ destinations replace-all-with \{ $logpublisher \} \}" object
			regsub -all {destinations \{} $object "destinations replace-all-with \{ $logpublisher  " object	
				if {$object != "sys log-config publisher /Common/logging-publisher-f5_analytics { }" && $object != "sys log-config publisher /Common/logging-publisher-f5_analytics { destinations replace-all-with {  } }" }{
					iapp::conf modify $object 
				} else {
					iapp::conf modify sys log-config publisher /Common/logging-publisher-f5_analytics destinations none
				}
			break
		}
		if {$::basic__appiqformat == "Yes" && $logpublisher != ""} {
			catch {tmsh_exe "create sys log-config publisher /Common/logging-publisher-APP-IQ"}		
			iapp::conf modify sys log-config publisher /Common/logging-publisher-APP-IQ \{ destinations replace-all-with \{ $logpublisher \} \}
			iapp::conf modify analytics global-settings external-logging-publisher /Common/logging-publisher-APP-IQ
			iapp::conf modify analytics global-settings use-hsl enabled
			iapp::conf modify analytics global-settings use-offbox enabled
		}
		if {$::basic__appiqformat == "Yes" && $::intro__localmode == "No"} {
			iapp::conf modify analytics global-settings avrd-interval $::basic__avrinterval
		}
		
	}
	#other local things
	if {$::intro__localmode == "Yes"} {
		set deviceinfo [tmsh::get_config net self /Common/*]
		set address ""
		foreach object $deviceinfo {
			regexp {traffic-group[ |\n]*(\S*)} $object junk trafficgroup

			if {$trafficgroup contains "local"} {
				regexp {address[ |\n]*([0-9|.]*)} $object junk address
				# correct for IPv6 as the first address returned 114436217
				if {$address contains "."} {
					break
				}
			}

		}
		catch {tmsh_exe "create sys management-route /Common/splunk-hec-forward network 255.255.255.254/32 gateway $address"}
	} else {
	#other non local things
		if { $createiapp != "Yes" } {
			catch {iapp::conf delete sys application service /Common/${::app}-local.app/${::app}-local}
		}

		#syslog setup
		set deviceinfo [tmsh::get_config sys syslog]
		switch $syslogconfigtype {
			NONE	{
					if { $deviceinfo contains "${::app}-syslog" } {
						tmsh_exe "modify sys syslog \{remote-servers delete \{ /Common/${::app}-syslog \} \}"
					}
				}
			UDP	{
					if { $deviceinfo contains "${::app}-syslog" } {
						tmsh_exe "modify sys syslog \{remote-servers modify \{ $syslogconfig \} \}"
					} else {
						tmsh_exe "modify sys syslog \{remote-servers add \{ $syslogconfig \} \}"
					}
				}
			HEC	{
					if { $deviceinfo contains "${::app}-syslog" } {
						tmsh_exe "modify sys syslog \{remote-servers modify \{ $syslogconfig \} \}"
					} else {
						tmsh_exe "modify sys syslog \{remote-servers add \{ $syslogconfig \} \}"
					}
				}
		}


		#alert setup
		set deviceinfo ""
		#set deviceinfo [tmsh::get_config sys snmp] ;#had to remove and switch to tmsh_exe b/c of version 11.6 errors
		set deviceinfo [tmsh_exe "list sys snmp"]
		switch $alertconfigtype {
			NONE	{
					if { $deviceinfo contains "${::app}-snmp" } {					
						tmsh_exe "modify sys snmp \{traps delete \{ /Common/${::app}-snmp \} \}"
					}
				}
			UDP	{
					if { $deviceinfo contains "${::app}-snmp" } {
						tmsh_exe "modify sys snmp \{traps modify \{ $alertconfig \} \}"
					} else {
						tmsh_exe "modify sys snmp \{traps add \{ $alertconfig \} \}"
					}
				}
			HEC	{
					if { $deviceinfo contains "${::app}-snmp" } {
						tmsh_exe "modify sys snmp \{traps modify \{ $alertconfig \} \}"
					} else {
						tmsh_exe "modify sys snmp \{traps add \{ $alertconfig \} \}"
					}
				}
		}



	}
            }
            presentation {
include "/Common/f5.apl_common"
section intro {
    message hello "This template allows configuring for data to be sent from this BIG-IP to the F5 Splunk Dashboard visualization tool."
    message hello1 "For Questions, Feature Requests, and Comments feel free to reach out to me at K.Bocchino@F5.com"   
    optional ( hello == "NEVER_SHOW_THIS" ) {
        choice analytics_provisioned tcl { tmsh::run_proc f5.app_utils:get_provisioned avr }
        choice wam_provisioned tcl { tmsh::run_proc f5.app_utils:get_provisioned wam }
        choice is_viprion tcl { tmsh::run_proc f5.app_utils:get_is_viprion }
        choice localmode default "No" {"Yes", "No"}
        choice is_offbox_capable tcl { tmsh::run_proc f5.app_utils:get_bigip_version_is_equal_or_later 13.0.0 }
    }
    optional ( localmode == "No" ) {
    	message check_for_updates "Ensure you are using the most recent template before continuing. This template was released on 2016-9-15 - v3.6.8. Check for newer versions at DevCentral."
		choice help display "xxlarge" {
			"Yes, show inline help" => "show",
			"No, do not show inline help" => "hide"
		}
		optional (help == "show") {
			message help_help "This template offers extensive inline assistance, notes, and configuration tips. We strongly recommend reading the inline help presented in the template until you are familiar with the functions and implications of the deployment options. Important notes and warnings are always shown no matter which selection you make."
		}
		choice advanced display "xxlarge" default "hide" {
			"Yes, show advanced options" => "show",
			"No, do not show advanced options" => "hide"
		}
		optional (help == "show") {
			message advanced_advanced "By default, this template offers only the most relevant and important options for configuration. Additional configuration options are available for more complex environments. Enabling this setting will expose these options and allow you to configure them."
		}
	}
    optional ( localmode == "Yes" ) {
    	message localmodemessage "This application service is part of a different deployment, to modify please use the original deployment."
    }


}


optional ( intro.localmode == "No" ) {

	section basic {
		choice format display "large" default "Splunk" {"Splunk", "F5 Analytics", "F5 Risk Engine", "F5 BIG-IQ"}
		optional ( intro.help == "show" ) {
			message format_help "Select the destination format."
		}
		optional ( intro.is_offbox_capable == "true" && intro.analytics_provisioned == "provisioned" && basic.format == "F5 Analytics" && intro.advanced == "show") {
			choice appiqformat display "medium" default "Yes" {"Yes", "No"}
			optional ( intro.advanced == "show" && basic.appiqformat == "Yes" ) {
				string avrinterval display "medium" default "300" validator "NonNegativeNumber"
			}			
		}
		optional ( intro.advanced == "show" ) {
			optional ( basic.format != "F5 BIG-IQ" ) {			
				string uniqueid display "small" default "1000" required
				optional ( intro.help == "show" ) {
					message uniqueid_help "Enter a an id i.e. 1000,2000,3000,4000,5000,6000 this should increment by 1000 per Analytics iApp deployment starting with 1000"
				}
			}
			choice debug display "medium" default "Yes" {"Yes", "No"}
		}
		choice stats display "medium" default "Yes" {"Yes", "No"}
		optional ( intro.help == "show" ) {
			message stats_help "By default, most reporting is built from basic statistical information collected from this device. To ensure the proper function of most reports, we do not typically recommend disabling this option. The items that are collected and sent to Splunk can be configured when Advanced mode is enabled."
		}
		optional ( basic.format != "F5 BIG-IQ" ) {
			choice logging display "medium" default "Yes" {"Yes", "No"}
			optional ( intro.help == "show" ) {
				message logging_help " Some system services use HSL/Syslog for relaying logging information. Configuring this item will create a local capability to forward these log messages."
			}
			choice syslog display "medium" default "Yes" {"Yes", "No"}
			optional ( intro.help == "show" ) {
				message syslog_help "Configuring the above item will create a process to forward local logfiles (e.g., /var/log/ltm, /var/log/apm, etc.) from this device to be analyzed."
			}
			choice alerts display "medium" default "Yes" {"Yes", "No"}
			optional ( intro.help == "show" ) {
				message alerts_help "Configuring this item will create a process to forward SNMP alert information from this device to be analyzed."
			}
			choice ihealth display "medium" default "Yes" {"Yes", "No"}
			optional ( intro.help == "show" ) {
				message ihealth_help "iHealth is an F5 cloud service that assesses your system configuration's health and safety. Configuring this item will create a process to periodically generate a system snapshot, process it with iHealth, and forward any items of note to be displayed alongside device and/or application reporting. You will need a valid F5 Support ID to configure this option."
			}
		
			optional ( intro.hello == "NEVER_SHOW_THIS" ) {
				choice silverline display "medium" default "No" {"Yes", "No"}
				optional ( intro.help == "show" ) {
					message silverline_help "Silverline is an F5 cloud service that provides a number of security protections in front of your BIG-IP infrastructure. If selected, this item will create a process to periodically send statistical data from Silverline. You need a valid Silverline management ID for this to function. You should only configure ONE instance of this data collection in your environment using this template."
				}
			}
			string facility display "large"
			optional ( intro.help == "show" ) {
				message facility_help "Your name for the facility in which this BIG-IP is located (e.g., 'Main Data Center', 'AWS', 'NYC', etc.)."
			}
		}
		
		optional ( basic.format == "F5 Analytics" ) {
			string systemtenant required display "large"
			optional ( intro.help == "show" ) {
				message systemtenant_help "F5 Analytics Tenant"
			}	
		}
		
		
		optional ( basic.format != "F5 BIG-IQ" ) {		
			string tenantdefault display "large"
			optional ( intro.help == "show" ) {
				message tenantdefault_help "A Tenant is a group of objects that are related to each other by environment or organization. For example, an Enterprise customer could use the Tenant mapping to describe items that belong to 'Production', 'Testing', or 'Development' environments, while a Hosting customer could use it to distiguish objects that belong to specific hosted customers. Enter the DEFAULT Tenant name to assign all objects who do not have a specific Application Mapping configuration (see below). If all the configured items on this BIG-IP belong to a single Tenant, you can configure it here so that you don't need to specify a Tenant Name mapping in the Application Mapping section at all."
			}
		}
		string devicegroupoverride display "large"
		optional ( intro.help == "show" ) {
			message devicegroupoverride_help "This option allows you to override the default device group name commonly Sync-Failover to the actual cluster name you would like to see within the dashboards. No changes are made to the actual device group configuration. Use this option if you see all of your Big-IPs under one device group within the dashboards."
		}
		optional ( basic.format != "F5 BIG-IQ" ) {
			optional ( intro.advanced == "show" ) {		
				string hostnameoverride display "large"
				optional ( intro.help == "show" ) {
					message hostnameoverride_help "If you would like your Device Group name or BIG-IP Device hostname to be displayed in your reporting differently from how it is presently configured, you can change it here. A hostname can only be overridden on a Standalone system - this setting will be ignored on BIG-IP devices configured for High Availability."
				}	

				choice callbacktype display "large" default "Use Management" {"Static", "Use Management"}
				optional ( basic.callbacktype == "Static" ) {
					string callbackurl display "xxlarge" 
				}
				optional ( intro.help == "show" ) {
					message callbacktype_help "Some items displayed in generated reports contain links that direct you back to your BIG-IP for additional information. You can choose whether to use the Management IP to build these links, or you can instead enter a base URL (e.g., https://mybigipmgmt.customer.com) to use in building these links."
				}
			}
			optional ( basic.format == "Splunk" ) {
				choice rbac display "medium" default "No" {"Yes", "No"}
				optional ( intro.help == "show" ) {
					message rbac_help "Enable Role Based Access Controls"
				}	
			}
		}
	}
	optional ( basic.rbac == "Yes" ) {
		section rbac {
			choice indexprefix display "medium" default "Yes" {"Yes", "No"}
			optional ( rbac.indexprefix == "Yes" ) {
				string indexprefixstring required default "f5-" display "xlarge"
			}
			optional ( intro.help == "show" ) {
				message indexprefix_help "Should all indexes be prepended? Preprention of index names is recommended as it ensures data coming from F5 is identifed in Splunk. However if you're trying to align to existing indexes you may turn this off."
			}			
			
			choice systemindex display "xlarge" default "Use Default Tenant" {"Use Default Tenant", "Specify"}
			optional ( rbac.systemindex == "Specify" ) {
				string systemindexstring required default "system_stats" display "xlarge"
			}
			optional ( intro.help == "show" ) {
				message systemindex_help "For system level statistics what index name should be used?"
			}
			choice defaultindex display "xlarge" default "Use Default Tenant" {"Use Default Tenant", "Specify"}
			optional ( rbac.defaultindex == "Specify" ) {
				string defaultindexstring required default "unknown_stats" display "xlarge"
			}
			optional ( intro.help == "show" ) {
				message defaultindex_help "When a tenant is not mapped for statistics what index name should be used?"
			}
			
			choice sharedindex display "xlarge" default "Use Default Tenant" {"Use Default Tenant", "Specify"}
			optional ( rbac.sharedindex == "Specify" ) {
				string sharedindexstring required default "shared_stats" display "xlarge"
			}
			optional ( intro.help == "show" ) {
				message sharedindex_help "For shared statistics what index should be used?"
			}

			
			choice logindex display "xlarge" default "Use Default Tenant" {"Use Default Tenant", "Specify"}
			optional ( rbac.logindex == "Specify" ) {
				string logindexstring required default "events" display "xlarge"
			}
			optional ( intro.help == "show" ) {
				message logindex_help "For event data what index name should be used?"
			}			
		}
	}	
	optional ( basic.stats == "Yes" ) {
		section statistics {
			optional ( basic.format != "F5 BIG-IQ" ) {
				string splunkdestinationip display "xlarge" required validator "IpOrFqdn"
				optional ( intro.advanced == "show" ) {
					string splunkdestinationhostheader display "xlarge"
				}
				string splunkdestinationport required validator "PortNumber" display "small"
				choice splunkdestinationprotocol display "medium" default "HTTPS" {"HTTP", "HTTPS"}
				string splunkapikey display "xxlarge" required
				optional ( intro.help == "show" ) {
					message splunk_help "This template configures a process that uses Spunk's native APIs to send our data. It is highly recommended your data be sent via HTTPS, which is the default. You will also need to have enabled Splunk API access and obtained your Splunk instance's API Key. To do this, log into your Splunk instance as administrator and enable API Access in global settings. Your API key will then be found in Settings -> Data Input -> HTTP Event Collector."
				}
			}
			string pushinterval display "small" required default "60" validator "NonNegativeNumber"			
			optional ( intro.advanced == "show" ) {
				choice randomstart display "medium" default "No" {"Yes", "No"}
			}
			optional ( intro.help == "show" ) {
				message pushinterval_help "By default, device information will be collected every 60 seconds. For some larger configurations, you may need to increase the interval to avoid impact to your device."
			}
			optional ( basic.format != "F5 BIG-IQ" ) {
				choice proxy display "medium" default "No" {"Yes", "No"}
				optional ( statistics.proxy == "Yes" ) {
					string proxyip display "xlarge" required validator "IpOrFqdn"
					string proxyport required validator "PortNumber" display "small"
					string proxyuser display "xlarge" 
					password proxypassword display "xlarge" 
				}
				optional ( intro.help == "show" ) {
					message proxy_help "Enable this if your environment uses a Web proxy to access the Internet."
				}
			}
			optional ( intro.advanced == "show" ) {
				choice pushstate display "medium" default "Yes" {"Yes", "No"}
				choice pushtmstats display "medium" default "Yes" {"Yes", "No"}				
				choice pushistats display "medium" default "Yes" {"Yes", "No"}	
				choice pushsslistats display "medium" default "No" {"Yes", "No"}	
				choice pushavr display "medium" default "Yes" {"Yes", "No"}
				choice pushsessiondb display "medium" default "Yes" {"Yes", "No"}
				optional ( pushsessiondb == "Yes" ) {
					choice customsessiondb display "medium" default "No" {"Yes", "No"}
					optional ( customsessiondb == "Yes" ) {
						string customsessiondb1 display "xlarge"
						string customsessiondb2 display "xlarge"
						string customsessiondb3 display "xlarge"
						string customsessiondb4 display "xlarge"
						string customsessiondb5 display "xlarge"
					}
				}
				optional ( basic.format != "F5 BIG-IQ" ) {
					choice pushconfig display "medium" default "Yes" {"Yes", "No"}
					choice certexpiration display "medium" default "Yes" {"Yes", "No"}
					optional ( intro.help == "show" ) {
						message tuning_help "By default, we collect statistics from a BIG-IP device that enable us to build reports for you that incorporate all elements of your configuration. If you don't want certain statistics collected, you can disable them here. Please note that this may cause certain reports for this device to not function correctly within your dashboard."
					}
				}
				choice customcollection display "medium" default "No" {"Yes", "No"}
				optional ( statistics.customcollection == "Yes" ) {
					multichoice customcollectionconfig display "xxlarge" default {"monitor_instance_stat", "monitor_stat", "disk_info_stat", "tmm_dns_server_stat", "tmm_dns_zone_stat", "profile_dns_stat", "gtm_wideip_stat", "dns_cache_resolver_stat", "tmmdns_zone_stat", "dnsexpress_zone_stat", "gtm_dc_stat", "tmm_stat", "memory_usage_stat", "profile_udp_stat", "interface_stat", "virtual_server_conn_stat", "rule_stat", "kvm_vcpu_stat", "kvm_vm_stat", "vcmp_global_stat", "vcmp_stat", "asm_cpu_util_stats", "cpu_info_stat", "dos_stat", "dosl7_plugin_stats", "proc_pid_stat", "dosl7d_stat", "flow_eviction_policy_stat", "host_info_stat", "ifc_stats", "ip_intelligence_stat", "ip_stat", "iprepd_stat", "pool_member_stat", "pool_stat", "profile_bigproto_stat", "profile_clientssl_stat", "profile_connpool_stat", "profile_ftp_stat", "profile_http_stat", "profile_httpcompression_stat", "profile_serverssl_stat", "profile_tcp_stat", "profile_webacceleration_stat", "virtual_server_cpu_stat", "virtual_server_stat", "AVR_STAT_DNS_QUERY", "AVR_STAT_DNS_CLIENT_IP", "AVR_STAT_APM_SWG_BLOCKED", "AVR_STAT_APM_SWG_URL_INFO", "AVR_STAT_APM_SWG_USER_INFO", "AVR_STAT_URL", "AVR_STAT_POOL_MEMBER", "AVR_STAT_ASM_ANOMALIES", "AVR_STAT_ASM_HTTP_ATTACK_DATA", "AVR_STAT_ASM_HTTP_VIOLATION", "AVR_STAT_ASM_NETWORK", "AVR_STAT_GEO_LOCATION", "AVR_STAT_METHOD", "AVR_STAT_USER_AGENT", "AVR_STAT_VIP", "AVR_STAT_ENFORCED_ACL", "AVR_STAT_STAGING_ACL", "AVR_STAT_RESPONSE_CODE", "AVR_STAT_CLIENT_IP", "AVR_STAT_TCP"} {"monitor_instance_stat", "monitor_stat", "disk_info_stat", "tmm_dns_server_stat", "tmm_dns_zone_stat", "profile_dns_stat", "gtm_wideip_stat", "dns_cache_resolver_stat", "tmmdns_zone_stat", "dnsexpress_zone_stat", "gtm_dc_stat", "tmm_stat", "memory_usage_stat", "profile_udp_stat", "interface_stat", "virtual_server_conn_stat", "rule_stat", "kvm_vcpu_stat", "kvm_vm_stat", "vcmp_global_stat", "vcmp_stat", "asm_cpu_util_stats", "cpu_info_stat", "dos_stat", "dosl7_plugin_stats", "proc_pid_stat", "dosl7d_stat", "flow_eviction_policy_stat", "host_info_stat", "ifc_stats", "ip_intelligence_stat", "ip_stat", "iprepd_stat", "pool_member_stat", "pool_stat", "profile_bigproto_stat", "profile_clientssl_stat", "profile_connpool_stat", "profile_ftp_stat", "profile_http_stat", "profile_httpcompression_stat", "profile_serverssl_stat", "profile_tcp_stat", "profile_webacceleration_stat", "virtual_server_cpu_stat", "virtual_server_stat", "AVR_STAT_DNS_QUERY", "AVR_STAT_DNS_CLIENT_IP", "AVR_STAT_APM_SWG_BLOCKED", "AVR_STAT_APM_SWG_URL_INFO", "AVR_STAT_APM_SWG_USER_INFO", "AVR_STAT_URL", "AVR_STAT_POOL_MEMBER", "AVR_STAT_ASM_ANOMALIES", "AVR_STAT_ASM_HTTP_ATTACK_DATA", "AVR_STAT_ASM_HTTP_VIOLATION", "AVR_STAT_ASM_NETWORK", "AVR_STAT_GEO_LOCATION", "AVR_STAT_METHOD", "AVR_STAT_USER_AGENT", "AVR_STAT_VIP", "AVR_STAT_ENFORCED_ACL", "AVR_STAT_STAGING_ACL", "AVR_STAT_RESPONSE_CODE", "AVR_STAT_CLIENT_IP", "AVR_STAT_TCP"}

				}
			}
		}
	}
	optional ( ( basic.logging == "Yes" && basic.format != "F5 BIG-IQ" ) || basic.appiqformat == "Yes" ) {
		section logging {
			optional ( basic.stats == "Yes" ) {
				choice useexistingsplunk display "medium" default "Yes" {"Yes", "No"}
			}
			optional ( logging.useexistingsplunk == "No"  || basic.stats == "No" ) {
				string splunkdestinationip display "xlarge" required validator "IpOrFqdn"
				string splunkdestinationport required validator "PortNumber" display "small"
				choice splunkdestinationprotocol display "xlarge" default "TCP" {"TCP", "UDP","HTTP Event Collector - HTTP", "HTTP Event Collector - HTTPS"}
				optional ( logging.splunkdestinationprotocol == "HTTP Event Collector - HTTP" || logging.splunkdestinationprotocol == "HTTP Event Collector - HTTPS") {
					string splunkdestinationhostheader display "xlarge"
					optional ( intro.hello == "NEVER_SHOW_THIS" ) {
						choice proxy display "large" default "No" {"Yes", "No", "From Main Configuration"}
					}
					optional ( logging.proxy == "Yes" ) {
						message proxynote "Caution sending high speed log messages via a proxy could cause issues with the proxy"
						string proxyip display "xlarge" required validator "IpOrFqdn"
						string proxyport required validator "PortNumber" display "small"
						string proxyuser display "xlarge" 
						password proxypassword display "xlarge" 
					}					
					optional ( intro.help == "show" ) {
					message proxy_help "Enable this if your environment uses a Web proxy to access the Internet. If you want to use the same proxy configuration that you've previously configured, select 'From Main Configuration'."
					}
					optional ( basic.stats == "Yes" ) {
						choice useexistingapikey display "medium" default "Yes" {"Yes", "No"}
					}
					optional ( logging.useexistingapikey == "No"  || basic.stats == "No" ) {
						string splunkapikey display "xxlarge" required 
					}
				}
			}
                    	optional ( intro.advanced == "show" ) {
                    		optional ( logging.splunkdestinationprotocol == "HTTP Event Collector - HTTP" || logging.splunkdestinationprotocol == "HTTP Event Collector - HTTPS") {
					choice snatpool display "xlarge" default "Auto-Map" tcl {
						package require iapp 1.0.0
						return "Auto-Map\n[iapp::get_items ltm snatpool]"
					}
				}
                        }
                        optional ( logging.splunkdestinationprotocol == "HTTP Event Collector - HTTP" || logging.splunkdestinationprotocol == "HTTP Event Collector - HTTPS" || logging.useexistingsplunk == "Yes") {
                       		choice sendadm display "medium" default "No" {"Yes", "No"}
				optional ( intro.help == "show" ) {
					message sendadm_help "Enable this if you're using Behavior Anti DDoS and want to collect its stats."
				}
			}
			choice sendriskdata display "medium" default "No" {"Yes", "No"}
			optional ( logging.sendriskdata == "Yes" ) {
				multichoice virtual display "xxlarge" tcl {
					package require iapp 1.0.0
					return "[iapp::get_items ltm virtual]"
				}                      			
			}
			choice sendrisklogins display "medium" default "No" {"Yes", "No"}
			optional ( logging.sendrisklogins == "Yes" ) {
				table risklogindata {
					choice virtual display "xlarge" tcl {
						package require iapp 1.0.0
						return "<ALL-FROM-ABOVE>\n[iapp::get_items ltm virtual]"
					}
					string risklogin display "large"
					choice loginmethod display "large" default "HTML - Form" {"HTML - Form", "HTML - Basic Auth", "HTML - Digest"}
					string usernamefield display "large"
					choice validationmethod display "large" default "Cookie Name" {"Cookie Name", "Cookie Name-Value", "Response Code", "Redirect Path"}
					string validation display "large"
					string validationvalue display "large"
				}  
			}
		}
	}

	optional ( basic.syslog == "Yes" && basic.format != "F5 BIG-IQ" ) {
		section syslog {
			optional ( basic.stats == "Yes" ) {
				choice useexistingsplunk display "medium" default "Yes" {"Yes", "No"}
			}
			optional ( syslog.useexistingsplunk == "No"  || basic.stats == "No" ) {
				string splunkdestinationip display "xlarge" required validator "IpOrFqdn"
				string splunkdestinationport required validator "PortNumber" display "small"
				choice splunkdestinationprotocol display "xlarge" default "UDP" {"UDP","HTTP Event Collector - HTTP", "HTTP Event Collector - HTTPS"}
				optional ( syslog.splunkdestinationprotocol == "HTTP Event Collector - HTTP" || syslog.splunkdestinationprotocol == "HTTP Event Collector - HTTPS") {
					string splunkdestinationhostheader display "xlarge"
					optional ( intro.hello == "NEVER_SHOW_THIS" ) {
						choice proxy display "large" default "No" {"Yes", "No", "From Main Configuration"}
					}
					optional ( syslog.proxy == "Yes" ) {
						message proxynote "Caution sending high speed log messages via a proxy could cause issues with the proxy"
						string proxyip display "xlarge" required validator "IpOrFqdn"
						string proxyport required validator "PortNumber" display "small"
						string proxyuser display "xlarge" 
						password proxypassword display "xlarge" 
					}
					optional ( intro.help == "show" ) {
						message proxy_help "Enable this if your environment uses a Web proxy to access the Internet. If you want to use the same proxy configuration that you've previously configured, select 'From Main Configuration'."
					}					
					optional ( basic.stats == "Yes" ) {
						choice useexistingapikey display "medium" default "Yes" {"Yes", "No"}
					}
					optional ( syslog.useexistingapikey == "No"  || basic.stats == "No" ) {
						string splunkapikey display "xxlarge" required 
					}
				}
			}
                    	optional ( intro.advanced == "show" ) {
                    		optional ( logging.splunkdestinationprotocol == "HTTP Event Collector - HTTP" || logging.splunkdestinationprotocol == "HTTP Event Collector - HTTPS") {
					choice snatpool display "xlarge" default "Auto-Map" tcl {
						package require iapp 1.0.0
						return "Auto-Map\n[iapp::get_items ltm snatpool]"
					}
				}
                        }			
			optional ( (basic.stats == "Yes" && syslog.useexistingsplunk == "Yes") || ( syslog.splunkdestinationprotocol == "HTTP Event Collector - HTTP" || syslog.splunkdestinationprotocol == "HTTP Event Collector - HTTPS") ) {
				message warningtmm "Note selecting HTTP Event Collector will cause syslogs to only be sent when TMM is online"
			}
		}
	}

	optional ( basic.alerts == "Yes" && basic.format != "F5 BIG-IQ" ) {
		section alerts {
			optional ( basic.stats == "Yes" ) {
				choice useexistingsplunk display "medium" default "Yes" {"Yes", "No"}
			}
			optional ( alerts.useexistingsplunk == "No"  || basic.stats == "No" ) {
				string splunkdestinationip display "xlarge" required validator "IpOrFqdn"	
				string splunkdestinationport required validator "PortNumber" display "small"
				choice splunkdestinationprotocol display "xlarge" default "UDP" {"UDP","HTTP Event Collector - HTTP", "HTTP Event Collector - HTTPS"}
				optional ( alerts.splunkdestinationprotocol == "UDP") {
					string splunkdestinationcommunity required display "large"	
				}
				optional ( alerts.splunkdestinationprotocol == "HTTP Event Collector - HTTP" || alerts.splunkdestinationprotocol == "HTTP Event Collector - HTTPS") {
					string splunkdestinationhostheader display "xlarge"
					optional ( intro.hello == "NEVER_SHOW_THIS" ) {
						choice proxy display "large" default "No" {"Yes", "No", "From Main Configuration"}
					}
					optional ( alerts.proxy == "Yes" ) {
						message proxynote "Caution sending high speed log messages via a proxy could cause issues with the proxy"
						string proxyip display "xlarge" required validator "IpOrFqdn"
						string proxyport required validator "PortNumber" display "small"
						string proxyuser display "xlarge" 
						password proxypassword display "xlarge" 
					}
					optional ( intro.help == "show" ) {
						message proxy_help "Enable this if your environment uses a Web proxy to access the Internet. If you want to use the same proxy configuration that you've previously configured, select 'From Main Configuration'."
					}					
					optional ( basic.stats == "Yes" ) {
						choice useexistingapikey display "medium" default "Yes" {"Yes", "No"}
					}
					optional ( alerts.useexistingapikey == "No"  || basic.stats == "No" ) {
						string splunkapikey display "xxlarge" required 
					}
				}
			}
                    	optional ( intro.advanced == "show" ) {
                    		optional ( logging.splunkdestinationprotocol == "HTTP Event Collector - HTTP" || logging.splunkdestinationprotocol == "HTTP Event Collector - HTTPS") {
					choice snatpool display "xlarge" default "Auto-Map" tcl {
						package require iapp 1.0.0
						return "Auto-Map\n[iapp::get_items ltm snatpool]"
					}
				}
                        }			
			optional ( (basic.stats == "Yes" && alerts.useexistingsplunk == "Yes") || ( alerts.splunkdestinationprotocol == "HTTP Event Collector - HTTP" || alerts.splunkdestinationprotocol == "HTTP Event Collector - HTTPS") ) {
				message warningtmm "Note selecting HTTP Event Collector will cause SNMP traps to only be sent when TMM is online"
			}
		}
	}

	optional ( basic.ihealth == "Yes" && basic.format != "F5 BIG-IQ" ) {
		section ihealth {
			string ihealthuser display "xlarge" 
			password ihealthpassword display "xlarge" 
			choice proxy display "large" default "No" {"Yes", "No", "From Main Configuration"}
			optional ( ihealth.proxy == "Yes" ) {
				string proxyip display "xlarge" required validator "IpOrFqdn"
				string proxyport required validator "PortNumber" display "small"
				string proxyuser display "xlarge" 
				password proxypassword display "xlarge" 
			}
			optional ( intro.help == "show" ) {
				message proxy_help "Enable this if your environment uses a Web proxy to access the Internet. If you want to use the same proxy configuration that you've previously configured, select 'From Main Configuration'."
			}			
			choice schedule display "medium" default "Weekly" {"Daily", "Weekly", "Monthly"}
			optional ( ihealth.schedule == "Weekly") {
				choice dayofweek display "medium" default "Sunday" {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"}
			}
			optional ( ihealth.schedule == "Monthly") {
				string dayofmonth display "medium"
			}			
			string time required default "1:00" display "medium" 
			string endtime required default "4:00" display "medium" 
			optional ( intro.help == "show" ) {
				message time_help "Specify a two or more hour window in 24hr format that iHealth data can be sent."
			}			
		}

	}

	optional ( basic.silverline == "Yes" && basic.format != "F5 BIG-IQ" ) {
		section silverline {
			string silverlineuser display "xlarge" 
			password silverlinepassword display "xlarge" 
			string interval display "small" required default "300" validator "NonNegativeNumber"	
			choice proxy display "large" default "No" {"Yes", "No", "From Main Configuration"}
			optional ( silverline.proxy == "Yes" ) {
				string proxyip display "xlarge" required validator "IpOrFqdn"
				string proxyport required validator "PortNumber" display "small"
				string proxyuser display "xlarge" 
				password proxypassword display "xlarge" 
			}
			optional ( intro.help == "show" ) {
				message proxy_help "Enable this if your environment uses a Web proxy to access the Internet. If you want to use the same proxy configuration that you've previously configured, select 'From Main Configuration'."
			}
		}
	}	

	optional ( statistics.pushconfig == "Yes" && basic.stats == "Yes" && basic.format != "F5 BIG-IQ") {
		section applicationmapping {
			choice irulesearch display "medium" default "Yes" {"Yes", "No"}
			optional ( applicationmapping.irulesearch == "Yes") {
				message irulesearchmessage1 "iRules will now be searched for Pools, HTTP::respond, TCP::respond, and UDP::respond. These actions must be on a line by themselves. To add context include a comment as follows:"
				message irulesearchmessage2 "    pool mypoolname ;#context: “Image Requests”"
				message irulesearchmessage3 "    HTTP::respond 301 location “HTTPS:/.... ;#context: “Redirects for Marketing” istat: “marketing301s”"
				message irulesearchmessage4 "    TCP::respond “denied... ;#context: “denied packet type 1” istat: “denied_packets_type1”"
				message irulesearchmessage5 "    DNS::answer “insert.... ;#context: “answer type a”"
			}
			choice mode display "xlarge" default "Define" {"Define", "Use Existing", "Use Existing with Additional"}
			optional ( applicationmapping.mode == "Use Existing" || applicationmapping.mode == "Use Existing with Additional" ) {
				 string mapping display "xxlarge" 
			}
			optional ( applicationmapping.mode == "Define" || applicationmapping.mode == "Use Existing with Additional") {
				table mappings {
					string priority validator "NonNegativeNumber" display "small"
					choice type display "large" default "App Name" {"Tenant Name", "App Name", "App Component Name", "Application Dependencies"}
					choice datasource display "large" default "Virtual Name" {"Virtual Name", "Wideip Name", "Virtual IP", "Virtual Port", "Virtual Protocol", "Virtual Description", "Partition", "iApp Name"}
					string regex display "xlarge" 
					choice mappingaction display "large" default "Map" {"Map", "Append", "Ignore", "Direct Mapping", "Direct Mapping Append"}
					string appendprefix display "large"
					string directmapping display "large" 

				}
				message mappinginfo "Mappings can be defined using Regex. For help with Regex, check out: https://regex101.com/"
				string exportmapping display "xxlarge" 				
				message exportmappinginfo "You can copy the above string and use it to configure other instances of this iApp template. To ensure the latest version of the export string only copy this string after saving your changes and waiting 60 seconds."
			}
		}
	}
}

text
{
    intro "Welcome to the Analytics Template"
    intro.hello "Introduction"
    intro.hello1 ""
    intro.check_for_updates "Check for updates" 
    intro.help "Do you want to see inline help?"
    intro.help_help ""
    intro.advanced "Do you want to display advanced options?"
    intro.advanced_advanced ""
	
	basic "Information Sources"
	basic.format "Data Format"
	basic.format_help ""	
	basic.appiqformat "Send data in native F5 Analytics Format?"
	basic.avrinterval "AVR Data Feed Interval (in seconds)"
	basic.uniqueid "Unique ID"
	basic.debug "Log Stats Responses"
	basic.uniqueid_help ""	
	basic.systemtenant "Analytics System Tenant"
	basic.systemtenant_help ""
	basic.rbac "Role Based Access Controls"
	basic.rbac_help ""	
	basic.stats "System Statistics"
	basic.stats_help ""
	basic.logging "Module HSL Streams"
	basic.logging_help ""
	basic.syslog "Local System Logging (syslog)"
	basic.syslog_help ""
	basic.alerts "System SNMP Alerts"
	basic.alerts_help ""
	basic.ihealth "iHealth Snapshot Information"
	basic.ihealth_help ""
	basic.silverline "Silverline Service Statistics"
	basic.silverline_help ""
	basic.facility "Facility Name"
	basic.facility_help ""
	basic.devicegroupoverride "Alternate Device Group"
	basic.devicegroupoverride_help ""
	basic.hostnameoverride "Alternate Hostname"
	basic.hostnameoverride_help ""
	basic.tenantdefault "Default Tenant"
	basic.tenantdefault_help ""
	basic.callbacktype "Analytics Callback Integration"
	basic.callbackurl "Callback URL"
	basic.callbacktype_help ""
	

	
	rbac "Role Based Access Control (RBAC)"
	rbac.indexprefix "Set an Index Prefix"
	rbac.indexprefix_help ""
	rbac.indexprefixstring "Index Prefix"
	rbac.systemindex "System Statistics Index" 
	rbac.systemindex_help ""
	rbac.systemindexstring "System Statistics Index" 
	rbac.defaultindex "Default Statistics Index" 
	rbac.defaultindex_help ""
	rbac.defaultindexstring "System Default Index" 	
	rbac.logindex "Event Index"
	rbac.logindex_help ""
	rbac.logindexstring "Event Index"
	rbac.sharedindex "Shared Statistics Index"
	rbac.sharedindexstring "Shared Statistics Index"
	rbac.sharedindex_help ""
	
	statistics "Analytics System Configuration"
	statistics.splunkdestinationip "IP Address or Hostname"
	statistics.splunkdestinationhostheader "Alternate Hostname (if different)"
	statistics.splunkdestinationprotocol "Protocol"
	statistics.splunkdestinationport "Port"
	statistics.splunk_help ""
	statistics.proxy "Use an HTTP Proxy?"
	statistics.proxy_help ""
	statistics.proxyip "Proxy IP Address"
	statistics.proxyport "Proxy Port"
	statistics.proxyuser "Proxy Username"
	statistics.proxypassword "Proxy Password"
	statistics.splunkapikey "API Key"
	statistics.pushinterval "Push Interval (in seconds)"
	statistics.pushinterval_help ""
	statistics.pushstate "Push Device State?"
	statistics.pushtmstats "Push Device Statistics?"
	statistics.pushistats "Push iStats?"
	statistics.pushsslistats "Push SSLi Stats?"
	statistics.pushavr "Push AVR-sampled Data?"
	statistics.pushsessiondb "Push SessionDB Statistics (APM)?"
	statistics.customsessiondb "Collect Custom SessionDB Variables?"
	statistics.customsessiondb1 "Custom SessionDB 1"
	statistics.customsessiondb2 "Custom SessionDB 2"
	statistics.customsessiondb3 "Custom SessionDB 3"
	statistics.customsessiondb4 "Custom SessionDB 4"
	statistics.customsessiondb5 "Custom SessionDB 5"
	statistics.customcollection "Manually Manage Stat Collection"
	statistics.customcollectionconfig "Custom Stat Collection"
	statistics.randomstart "Randomize the start time within the push interval i.e. 15, 75, 135 vs 0, 60, 120"
	
	
	statistics.pushconfig "Push Configuration Map?"
	statistics.certexpiration "Push Certificate Expiration Information?"
	statistics.tuning_help ""
	
	logging "Module Log Stream Capture"
	logging.useexistingsplunk "Use the same Analytics System configuration above?"
	logging.splunkdestinationip "IP Address or Hostname"
	logging.splunkdestinationhostheader "Alternate Hostname (if different)"
	logging.splunkdestinationport "Port"
	logging.splunkdestinationprotocol "Protocol"
	logging.proxy "Use an HTTP Proxy?"
	logging.proxynote "WARNING"
	logging.proxyip "Proxy IP Address"
	logging.proxyport "Proxy Port"
	logging.proxyuser "Proxy Username"
	logging.proxypassword "Proxy Password"
	logging.proxy_help ""
	logging.useexistingapikey "Use the same API key as the main configuration?"
	logging.splunkapikey "API Key"
	logging.snatpool "Source Natting"
	logging.sendadm "Send Behavioural Anti-DDoS Stats"
	logging.sendadm_help ""
	
	
	logging.sendriskdata "Send Risk Logs to Analytics System?"
	logging.virtual "Virtual Servers to Attach Risk Logging Profile"
	logging.sendrisklogins "Send Login Events to Analytics System?"
	logging.risklogindata "Configured Logins"
	logging.risklogindata.virtual "Virtual Server"
	logging.risklogindata.risklogin "Login Path"
	logging.risklogindata.loginmethod "Login Method"
	logging.risklogindata.usernamefield "Username Field"
	logging.risklogindata.validationmethod "Validation Method"
	logging.risklogindata.validation "Validation Check String"
	logging.risklogindata.validationvalue "Validation Check Cookie Value"

	
	syslog "Local Logging Capture"
	syslog.useexistingsplunk "Use the same Analytics System configuration above?"
	syslog.splunkdestinationip "IP Address or Hostname"
	syslog.splunkdestinationhostheader "Alternate Hostname (if different)"
	syslog.splunkdestinationport "Port"
	syslog.splunkdestinationprotocol "Protocol"
	syslog.proxy "Use an HTTP Proxy?"
	syslog.proxynote "WARNING"
	syslog.proxyip "Proxy IP Address"
	syslog.proxyport "Proxy Port"
	syslog.proxyuser "Proxy Username"
	syslog.proxypassword "Proxy Password"
	syslog.proxy_help ""
	syslog.useexistingapikey "Use the same API key as the main configuration?"
	syslog.splunkapikey "API Key"
	syslog.warningtmm "WARNING"
	syslog.snatpool "Source Natting"

	alerts "System SNMP Alert Capture"
	alerts.useexistingsplunk "Use the same Analytics System configuration above?"
	alerts.splunkdestinationip "IP Address or Hostname"
	alerts.splunkdestinationhostheader "Alternate Hostname (if different)"
	alerts.splunkdestinationport "Port"
	alerts.splunkdestinationprotocol "Protocol"
	alerts.proxy "Use an HTTP Proxy?"
	alerts.proxynote "WARNING"
	alerts.proxyip "Proxy IP Address"
	alerts.proxyport "Proxy Port"
	alerts.proxyuser "Proxy Username"
	alerts.proxypassword "Proxy Password"
	alerts.proxy_help ""
	alerts.useexistingapikey "Use the same API key as the main configuration?"
	alerts.splunkapikey "API Key"
	alerts.splunkdestinationcommunity "SNMP Community Name"
	alerts.warningtmm "WARNING"
	alerts.snatpool "Source Natting"
	
	ihealth "iHealth Snapshot Information Capture"
	ihealth.ihealthuser "iHealth Username"
	ihealth.ihealthpassword "iHealth Password"
	ihealth.proxy "Use an HTTP Proxy?"
	ihealth.proxyip "Proxy IP Address"
	ihealth.proxyport "Proxy Port"
	ihealth.proxyuser "Proxy Username"
	ihealth.proxypassword "Proxy Password"
	ihealth.proxy_help ""
	ihealth.schedule "Schedule"
	ihealth.dayofweek "Day of Week"
	ihealth.dayofmonth "Day of Month"
	ihealth.time "Start Time"
	ihealth.endtime "End Time"
	ihealth.time_help ""
	
	silverline "Silverline Statistics Capture"
	silverline.silverlineuser "Silverline Username"
	silverline.silverlinepassword "Silverline Password"
	silverline.interval "Collection Interval (in seconds)"
	silverline.proxy "Use an HTTP Proxy?"
	silverline.proxyip "Proxy IP Address"
	silverline.proxyport "Proxy Port"
	silverline.proxyuser "Proxy Username"
	silverline.proxypassword "Proxy Password"
	silverline.proxy_help ""
	
	applicationmapping "Application Mapping"
	applicationmapping.irulesearch "Search iRules?"
	applicationmapping.irulesearchmessage1 ""
	applicationmapping.irulesearchmessage2 ""
	applicationmapping.irulesearchmessage3 ""
	applicationmapping.irulesearchmessage4 ""
	applicationmapping.irulesearchmessage5 ""
	applicationmapping.mode "Configuration Mode"
	applicationmapping.mappinginfo ""
	applicationmapping.mappings "Mapping Table"
	applicationmapping.mappings.priority "Order"
	applicationmapping.mappings.type "Type"
	applicationmapping.mappings.datasource "From"
	applicationmapping.mappings.regex "Regex"
	applicationmapping.mappings.mappingaction "Action"
	applicationmapping.mappings.appendprefix "AppendPrefix"
	applicationmapping.mappings.directmapping "DirectMapping"
	applicationmapping.exportmappinginfo ""
	applicationmapping.exportmapping "Mapping Element for Export"	
	applicationmapping.mapping "Mapping Import String"
}
}
            role-acl none
            run-as none
        }
    }
    description none
}
